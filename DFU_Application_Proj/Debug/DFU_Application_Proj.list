
DFU_Application_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f78  08010188  08010188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08018100  08018100  00009100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018160  08018160  0000a0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018160  08018160  00009160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018168  08018168  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018168  08018168  00009168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801816c  0801816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08018170  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00001cf8  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001df4  20001df4  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014392  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ce  00000000  00000000  0001e4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00021b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da3  00000000  00000000  00022d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024001  00000000  00000000  00023b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001886e  00000000  00000000  00047b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca9f8  00000000  00000000  0006038a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ad82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a34  00000000  00000000  0012adc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010188 <__do_global_dtors_aux>:
 8010188:	b510      	push	{r4, lr}
 801018a:	4c05      	ldr	r4, [pc, #20]	@ (80101a0 <__do_global_dtors_aux+0x18>)
 801018c:	7823      	ldrb	r3, [r4, #0]
 801018e:	b933      	cbnz	r3, 801019e <__do_global_dtors_aux+0x16>
 8010190:	4b04      	ldr	r3, [pc, #16]	@ (80101a4 <__do_global_dtors_aux+0x1c>)
 8010192:	b113      	cbz	r3, 801019a <__do_global_dtors_aux+0x12>
 8010194:	4804      	ldr	r0, [pc, #16]	@ (80101a8 <__do_global_dtors_aux+0x20>)
 8010196:	f3af 8000 	nop.w
 801019a:	2301      	movs	r3, #1
 801019c:	7023      	strb	r3, [r4, #0]
 801019e:	bd10      	pop	{r4, pc}
 80101a0:	200000fc 	.word	0x200000fc
 80101a4:	00000000 	.word	0x00000000
 80101a8:	080180e8 	.word	0x080180e8

080101ac <frame_dummy>:
 80101ac:	b508      	push	{r3, lr}
 80101ae:	4b03      	ldr	r3, [pc, #12]	@ (80101bc <frame_dummy+0x10>)
 80101b0:	b11b      	cbz	r3, 80101ba <frame_dummy+0xe>
 80101b2:	4903      	ldr	r1, [pc, #12]	@ (80101c0 <frame_dummy+0x14>)
 80101b4:	4803      	ldr	r0, [pc, #12]	@ (80101c4 <frame_dummy+0x18>)
 80101b6:	f3af 8000 	nop.w
 80101ba:	bd08      	pop	{r3, pc}
 80101bc:	00000000 	.word	0x00000000
 80101c0:	20000100 	.word	0x20000100
 80101c4:	080180e8 	.word	0x080180e8

080101c8 <__aeabi_uldivmod>:
 80101c8:	b953      	cbnz	r3, 80101e0 <__aeabi_uldivmod+0x18>
 80101ca:	b94a      	cbnz	r2, 80101e0 <__aeabi_uldivmod+0x18>
 80101cc:	2900      	cmp	r1, #0
 80101ce:	bf08      	it	eq
 80101d0:	2800      	cmpeq	r0, #0
 80101d2:	bf1c      	itt	ne
 80101d4:	f04f 31ff 	movne.w	r1, #4294967295
 80101d8:	f04f 30ff 	movne.w	r0, #4294967295
 80101dc:	f000 b988 	b.w	80104f0 <__aeabi_idiv0>
 80101e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80101e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80101e8:	f000 f806 	bl	80101f8 <__udivmoddi4>
 80101ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80101f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101f4:	b004      	add	sp, #16
 80101f6:	4770      	bx	lr

080101f8 <__udivmoddi4>:
 80101f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101fc:	9d08      	ldr	r5, [sp, #32]
 80101fe:	468e      	mov	lr, r1
 8010200:	4604      	mov	r4, r0
 8010202:	4688      	mov	r8, r1
 8010204:	2b00      	cmp	r3, #0
 8010206:	d14a      	bne.n	801029e <__udivmoddi4+0xa6>
 8010208:	428a      	cmp	r2, r1
 801020a:	4617      	mov	r7, r2
 801020c:	d962      	bls.n	80102d4 <__udivmoddi4+0xdc>
 801020e:	fab2 f682 	clz	r6, r2
 8010212:	b14e      	cbz	r6, 8010228 <__udivmoddi4+0x30>
 8010214:	f1c6 0320 	rsb	r3, r6, #32
 8010218:	fa01 f806 	lsl.w	r8, r1, r6
 801021c:	fa20 f303 	lsr.w	r3, r0, r3
 8010220:	40b7      	lsls	r7, r6
 8010222:	ea43 0808 	orr.w	r8, r3, r8
 8010226:	40b4      	lsls	r4, r6
 8010228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 801022c:	fa1f fc87 	uxth.w	ip, r7
 8010230:	fbb8 f1fe 	udiv	r1, r8, lr
 8010234:	0c23      	lsrs	r3, r4, #16
 8010236:	fb0e 8811 	mls	r8, lr, r1, r8
 801023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 801023e:	fb01 f20c 	mul.w	r2, r1, ip
 8010242:	429a      	cmp	r2, r3
 8010244:	d909      	bls.n	801025a <__udivmoddi4+0x62>
 8010246:	18fb      	adds	r3, r7, r3
 8010248:	f101 30ff 	add.w	r0, r1, #4294967295
 801024c:	f080 80ea 	bcs.w	8010424 <__udivmoddi4+0x22c>
 8010250:	429a      	cmp	r2, r3
 8010252:	f240 80e7 	bls.w	8010424 <__udivmoddi4+0x22c>
 8010256:	3902      	subs	r1, #2
 8010258:	443b      	add	r3, r7
 801025a:	1a9a      	subs	r2, r3, r2
 801025c:	b2a3      	uxth	r3, r4
 801025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8010262:	fb0e 2210 	mls	r2, lr, r0, r2
 8010266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801026a:	fb00 fc0c 	mul.w	ip, r0, ip
 801026e:	459c      	cmp	ip, r3
 8010270:	d909      	bls.n	8010286 <__udivmoddi4+0x8e>
 8010272:	18fb      	adds	r3, r7, r3
 8010274:	f100 32ff 	add.w	r2, r0, #4294967295
 8010278:	f080 80d6 	bcs.w	8010428 <__udivmoddi4+0x230>
 801027c:	459c      	cmp	ip, r3
 801027e:	f240 80d3 	bls.w	8010428 <__udivmoddi4+0x230>
 8010282:	443b      	add	r3, r7
 8010284:	3802      	subs	r0, #2
 8010286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801028a:	eba3 030c 	sub.w	r3, r3, ip
 801028e:	2100      	movs	r1, #0
 8010290:	b11d      	cbz	r5, 801029a <__udivmoddi4+0xa2>
 8010292:	40f3      	lsrs	r3, r6
 8010294:	2200      	movs	r2, #0
 8010296:	e9c5 3200 	strd	r3, r2, [r5]
 801029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029e:	428b      	cmp	r3, r1
 80102a0:	d905      	bls.n	80102ae <__udivmoddi4+0xb6>
 80102a2:	b10d      	cbz	r5, 80102a8 <__udivmoddi4+0xb0>
 80102a4:	e9c5 0100 	strd	r0, r1, [r5]
 80102a8:	2100      	movs	r1, #0
 80102aa:	4608      	mov	r0, r1
 80102ac:	e7f5      	b.n	801029a <__udivmoddi4+0xa2>
 80102ae:	fab3 f183 	clz	r1, r3
 80102b2:	2900      	cmp	r1, #0
 80102b4:	d146      	bne.n	8010344 <__udivmoddi4+0x14c>
 80102b6:	4573      	cmp	r3, lr
 80102b8:	d302      	bcc.n	80102c0 <__udivmoddi4+0xc8>
 80102ba:	4282      	cmp	r2, r0
 80102bc:	f200 8105 	bhi.w	80104ca <__udivmoddi4+0x2d2>
 80102c0:	1a84      	subs	r4, r0, r2
 80102c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80102c6:	2001      	movs	r0, #1
 80102c8:	4690      	mov	r8, r2
 80102ca:	2d00      	cmp	r5, #0
 80102cc:	d0e5      	beq.n	801029a <__udivmoddi4+0xa2>
 80102ce:	e9c5 4800 	strd	r4, r8, [r5]
 80102d2:	e7e2      	b.n	801029a <__udivmoddi4+0xa2>
 80102d4:	2a00      	cmp	r2, #0
 80102d6:	f000 8090 	beq.w	80103fa <__udivmoddi4+0x202>
 80102da:	fab2 f682 	clz	r6, r2
 80102de:	2e00      	cmp	r6, #0
 80102e0:	f040 80a4 	bne.w	801042c <__udivmoddi4+0x234>
 80102e4:	1a8a      	subs	r2, r1, r2
 80102e6:	0c03      	lsrs	r3, r0, #16
 80102e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80102ec:	b280      	uxth	r0, r0
 80102ee:	b2bc      	uxth	r4, r7
 80102f0:	2101      	movs	r1, #1
 80102f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80102f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80102fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102fe:	fb04 f20c 	mul.w	r2, r4, ip
 8010302:	429a      	cmp	r2, r3
 8010304:	d907      	bls.n	8010316 <__udivmoddi4+0x11e>
 8010306:	18fb      	adds	r3, r7, r3
 8010308:	f10c 38ff 	add.w	r8, ip, #4294967295
 801030c:	d202      	bcs.n	8010314 <__udivmoddi4+0x11c>
 801030e:	429a      	cmp	r2, r3
 8010310:	f200 80e0 	bhi.w	80104d4 <__udivmoddi4+0x2dc>
 8010314:	46c4      	mov	ip, r8
 8010316:	1a9b      	subs	r3, r3, r2
 8010318:	fbb3 f2fe 	udiv	r2, r3, lr
 801031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8010320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8010324:	fb02 f404 	mul.w	r4, r2, r4
 8010328:	429c      	cmp	r4, r3
 801032a:	d907      	bls.n	801033c <__udivmoddi4+0x144>
 801032c:	18fb      	adds	r3, r7, r3
 801032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8010332:	d202      	bcs.n	801033a <__udivmoddi4+0x142>
 8010334:	429c      	cmp	r4, r3
 8010336:	f200 80ca 	bhi.w	80104ce <__udivmoddi4+0x2d6>
 801033a:	4602      	mov	r2, r0
 801033c:	1b1b      	subs	r3, r3, r4
 801033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8010342:	e7a5      	b.n	8010290 <__udivmoddi4+0x98>
 8010344:	f1c1 0620 	rsb	r6, r1, #32
 8010348:	408b      	lsls	r3, r1
 801034a:	fa22 f706 	lsr.w	r7, r2, r6
 801034e:	431f      	orrs	r7, r3
 8010350:	fa0e f401 	lsl.w	r4, lr, r1
 8010354:	fa20 f306 	lsr.w	r3, r0, r6
 8010358:	fa2e fe06 	lsr.w	lr, lr, r6
 801035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8010360:	4323      	orrs	r3, r4
 8010362:	fa00 f801 	lsl.w	r8, r0, r1
 8010366:	fa1f fc87 	uxth.w	ip, r7
 801036a:	fbbe f0f9 	udiv	r0, lr, r9
 801036e:	0c1c      	lsrs	r4, r3, #16
 8010370:	fb09 ee10 	mls	lr, r9, r0, lr
 8010374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8010378:	fb00 fe0c 	mul.w	lr, r0, ip
 801037c:	45a6      	cmp	lr, r4
 801037e:	fa02 f201 	lsl.w	r2, r2, r1
 8010382:	d909      	bls.n	8010398 <__udivmoddi4+0x1a0>
 8010384:	193c      	adds	r4, r7, r4
 8010386:	f100 3aff 	add.w	sl, r0, #4294967295
 801038a:	f080 809c 	bcs.w	80104c6 <__udivmoddi4+0x2ce>
 801038e:	45a6      	cmp	lr, r4
 8010390:	f240 8099 	bls.w	80104c6 <__udivmoddi4+0x2ce>
 8010394:	3802      	subs	r0, #2
 8010396:	443c      	add	r4, r7
 8010398:	eba4 040e 	sub.w	r4, r4, lr
 801039c:	fa1f fe83 	uxth.w	lr, r3
 80103a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80103a4:	fb09 4413 	mls	r4, r9, r3, r4
 80103a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80103ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80103b0:	45a4      	cmp	ip, r4
 80103b2:	d908      	bls.n	80103c6 <__udivmoddi4+0x1ce>
 80103b4:	193c      	adds	r4, r7, r4
 80103b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80103ba:	f080 8082 	bcs.w	80104c2 <__udivmoddi4+0x2ca>
 80103be:	45a4      	cmp	ip, r4
 80103c0:	d97f      	bls.n	80104c2 <__udivmoddi4+0x2ca>
 80103c2:	3b02      	subs	r3, #2
 80103c4:	443c      	add	r4, r7
 80103c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80103ca:	eba4 040c 	sub.w	r4, r4, ip
 80103ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80103d2:	4564      	cmp	r4, ip
 80103d4:	4673      	mov	r3, lr
 80103d6:	46e1      	mov	r9, ip
 80103d8:	d362      	bcc.n	80104a0 <__udivmoddi4+0x2a8>
 80103da:	d05f      	beq.n	801049c <__udivmoddi4+0x2a4>
 80103dc:	b15d      	cbz	r5, 80103f6 <__udivmoddi4+0x1fe>
 80103de:	ebb8 0203 	subs.w	r2, r8, r3
 80103e2:	eb64 0409 	sbc.w	r4, r4, r9
 80103e6:	fa04 f606 	lsl.w	r6, r4, r6
 80103ea:	fa22 f301 	lsr.w	r3, r2, r1
 80103ee:	431e      	orrs	r6, r3
 80103f0:	40cc      	lsrs	r4, r1
 80103f2:	e9c5 6400 	strd	r6, r4, [r5]
 80103f6:	2100      	movs	r1, #0
 80103f8:	e74f      	b.n	801029a <__udivmoddi4+0xa2>
 80103fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80103fe:	0c01      	lsrs	r1, r0, #16
 8010400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8010404:	b280      	uxth	r0, r0
 8010406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 801040a:	463b      	mov	r3, r7
 801040c:	4638      	mov	r0, r7
 801040e:	463c      	mov	r4, r7
 8010410:	46b8      	mov	r8, r7
 8010412:	46be      	mov	lr, r7
 8010414:	2620      	movs	r6, #32
 8010416:	fbb1 f1f7 	udiv	r1, r1, r7
 801041a:	eba2 0208 	sub.w	r2, r2, r8
 801041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8010422:	e766      	b.n	80102f2 <__udivmoddi4+0xfa>
 8010424:	4601      	mov	r1, r0
 8010426:	e718      	b.n	801025a <__udivmoddi4+0x62>
 8010428:	4610      	mov	r0, r2
 801042a:	e72c      	b.n	8010286 <__udivmoddi4+0x8e>
 801042c:	f1c6 0220 	rsb	r2, r6, #32
 8010430:	fa2e f302 	lsr.w	r3, lr, r2
 8010434:	40b7      	lsls	r7, r6
 8010436:	40b1      	lsls	r1, r6
 8010438:	fa20 f202 	lsr.w	r2, r0, r2
 801043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010440:	430a      	orrs	r2, r1
 8010442:	fbb3 f8fe 	udiv	r8, r3, lr
 8010446:	b2bc      	uxth	r4, r7
 8010448:	fb0e 3318 	mls	r3, lr, r8, r3
 801044c:	0c11      	lsrs	r1, r2, #16
 801044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010452:	fb08 f904 	mul.w	r9, r8, r4
 8010456:	40b0      	lsls	r0, r6
 8010458:	4589      	cmp	r9, r1
 801045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 801045e:	b280      	uxth	r0, r0
 8010460:	d93e      	bls.n	80104e0 <__udivmoddi4+0x2e8>
 8010462:	1879      	adds	r1, r7, r1
 8010464:	f108 3cff 	add.w	ip, r8, #4294967295
 8010468:	d201      	bcs.n	801046e <__udivmoddi4+0x276>
 801046a:	4589      	cmp	r9, r1
 801046c:	d81f      	bhi.n	80104ae <__udivmoddi4+0x2b6>
 801046e:	eba1 0109 	sub.w	r1, r1, r9
 8010472:	fbb1 f9fe 	udiv	r9, r1, lr
 8010476:	fb09 f804 	mul.w	r8, r9, r4
 801047a:	fb0e 1119 	mls	r1, lr, r9, r1
 801047e:	b292      	uxth	r2, r2
 8010480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010484:	4542      	cmp	r2, r8
 8010486:	d229      	bcs.n	80104dc <__udivmoddi4+0x2e4>
 8010488:	18ba      	adds	r2, r7, r2
 801048a:	f109 31ff 	add.w	r1, r9, #4294967295
 801048e:	d2c4      	bcs.n	801041a <__udivmoddi4+0x222>
 8010490:	4542      	cmp	r2, r8
 8010492:	d2c2      	bcs.n	801041a <__udivmoddi4+0x222>
 8010494:	f1a9 0102 	sub.w	r1, r9, #2
 8010498:	443a      	add	r2, r7
 801049a:	e7be      	b.n	801041a <__udivmoddi4+0x222>
 801049c:	45f0      	cmp	r8, lr
 801049e:	d29d      	bcs.n	80103dc <__udivmoddi4+0x1e4>
 80104a0:	ebbe 0302 	subs.w	r3, lr, r2
 80104a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80104a8:	3801      	subs	r0, #1
 80104aa:	46e1      	mov	r9, ip
 80104ac:	e796      	b.n	80103dc <__udivmoddi4+0x1e4>
 80104ae:	eba7 0909 	sub.w	r9, r7, r9
 80104b2:	4449      	add	r1, r9
 80104b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80104b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80104bc:	fb09 f804 	mul.w	r8, r9, r4
 80104c0:	e7db      	b.n	801047a <__udivmoddi4+0x282>
 80104c2:	4673      	mov	r3, lr
 80104c4:	e77f      	b.n	80103c6 <__udivmoddi4+0x1ce>
 80104c6:	4650      	mov	r0, sl
 80104c8:	e766      	b.n	8010398 <__udivmoddi4+0x1a0>
 80104ca:	4608      	mov	r0, r1
 80104cc:	e6fd      	b.n	80102ca <__udivmoddi4+0xd2>
 80104ce:	443b      	add	r3, r7
 80104d0:	3a02      	subs	r2, #2
 80104d2:	e733      	b.n	801033c <__udivmoddi4+0x144>
 80104d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80104d8:	443b      	add	r3, r7
 80104da:	e71c      	b.n	8010316 <__udivmoddi4+0x11e>
 80104dc:	4649      	mov	r1, r9
 80104de:	e79c      	b.n	801041a <__udivmoddi4+0x222>
 80104e0:	eba1 0109 	sub.w	r1, r1, r9
 80104e4:	46c4      	mov	ip, r8
 80104e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80104ea:	fb09 f804 	mul.w	r8, r9, r4
 80104ee:	e7c4      	b.n	801047a <__udivmoddi4+0x282>

080104f0 <__aeabi_idiv0>:
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop

080104f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80104f8:	f000 fbcc 	bl	8010c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80104fc:	f000 f816 	bl	801052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010500:	f000 f912 	bl	8010728 <MX_GPIO_Init>
  MX_I2C1_Init();
 8010504:	f000 f87c 	bl	8010600 <MX_I2C1_Init>
  MX_I2S3_Init();
 8010508:	f000 f8a8 	bl	801065c <MX_I2S3_Init>
  MX_SPI1_Init();
 801050c:	f000 f8d6 	bl	80106bc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8010510:	f007 f8bc 	bl	801768c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8010514:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010518:	4803      	ldr	r0, [pc, #12]	@ (8010528 <main+0x34>)
 801051a:	f000 ff18 	bl	801134e <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 801051e:	2064      	movs	r0, #100	@ 0x64
 8010520:	f000 fc2a 	bl	8010d78 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8010524:	bf00      	nop
 8010526:	e7f5      	b.n	8010514 <main+0x20>
 8010528:	40020c00 	.word	0x40020c00

0801052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b094      	sub	sp, #80	@ 0x50
 8010530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010532:	f107 0320 	add.w	r3, r7, #32
 8010536:	2230      	movs	r2, #48	@ 0x30
 8010538:	2100      	movs	r1, #0
 801053a:	4618      	mov	r0, r3
 801053c:	f007 fda8 	bl	8018090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010540:	f107 030c 	add.w	r3, r7, #12
 8010544:	2200      	movs	r2, #0
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	605a      	str	r2, [r3, #4]
 801054a:	609a      	str	r2, [r3, #8]
 801054c:	60da      	str	r2, [r3, #12]
 801054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010550:	2300      	movs	r3, #0
 8010552:	60bb      	str	r3, [r7, #8]
 8010554:	4b28      	ldr	r3, [pc, #160]	@ (80105f8 <SystemClock_Config+0xcc>)
 8010556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010558:	4a27      	ldr	r2, [pc, #156]	@ (80105f8 <SystemClock_Config+0xcc>)
 801055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8010560:	4b25      	ldr	r3, [pc, #148]	@ (80105f8 <SystemClock_Config+0xcc>)
 8010562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010568:	60bb      	str	r3, [r7, #8]
 801056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801056c:	2300      	movs	r3, #0
 801056e:	607b      	str	r3, [r7, #4]
 8010570:	4b22      	ldr	r3, [pc, #136]	@ (80105fc <SystemClock_Config+0xd0>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	4a21      	ldr	r2, [pc, #132]	@ (80105fc <SystemClock_Config+0xd0>)
 8010576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801057a:	6013      	str	r3, [r2, #0]
 801057c:	4b1f      	ldr	r3, [pc, #124]	@ (80105fc <SystemClock_Config+0xd0>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010584:	607b      	str	r3, [r7, #4]
 8010586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010588:	2301      	movs	r3, #1
 801058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801058c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8010590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010592:	2302      	movs	r3, #2
 8010594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010596:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801059a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 801059c:	2308      	movs	r3, #8
 801059e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80105a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80105a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80105a6:	2302      	movs	r3, #2
 80105a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80105aa:	2307      	movs	r3, #7
 80105ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80105ae:	f107 0320 	add.w	r3, r7, #32
 80105b2:	4618      	mov	r0, r3
 80105b4:	f002 ff1c 	bl	80133f0 <HAL_RCC_OscConfig>
 80105b8:	4603      	mov	r3, r0
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80105be:	f000 f9b1 	bl	8010924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80105c2:	230f      	movs	r3, #15
 80105c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80105c6:	2302      	movs	r3, #2
 80105c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80105ca:	2300      	movs	r3, #0
 80105cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80105ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80105d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80105d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80105da:	f107 030c 	add.w	r3, r7, #12
 80105de:	2105      	movs	r1, #5
 80105e0:	4618      	mov	r0, r3
 80105e2:	f003 f97d 	bl	80138e0 <HAL_RCC_ClockConfig>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d001      	beq.n	80105f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80105ec:	f000 f99a 	bl	8010924 <Error_Handler>
  }
}
 80105f0:	bf00      	nop
 80105f2:	3750      	adds	r7, #80	@ 0x50
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	40023800 	.word	0x40023800
 80105fc:	40007000 	.word	0x40007000

08010600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010604:	4b12      	ldr	r3, [pc, #72]	@ (8010650 <MX_I2C1_Init+0x50>)
 8010606:	4a13      	ldr	r2, [pc, #76]	@ (8010654 <MX_I2C1_Init+0x54>)
 8010608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801060a:	4b11      	ldr	r3, [pc, #68]	@ (8010650 <MX_I2C1_Init+0x50>)
 801060c:	4a12      	ldr	r2, [pc, #72]	@ (8010658 <MX_I2C1_Init+0x58>)
 801060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8010610:	4b0f      	ldr	r3, [pc, #60]	@ (8010650 <MX_I2C1_Init+0x50>)
 8010612:	2200      	movs	r2, #0
 8010614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8010616:	4b0e      	ldr	r3, [pc, #56]	@ (8010650 <MX_I2C1_Init+0x50>)
 8010618:	2200      	movs	r2, #0
 801061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801061c:	4b0c      	ldr	r3, [pc, #48]	@ (8010650 <MX_I2C1_Init+0x50>)
 801061e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8010622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010624:	4b0a      	ldr	r3, [pc, #40]	@ (8010650 <MX_I2C1_Init+0x50>)
 8010626:	2200      	movs	r2, #0
 8010628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801062a:	4b09      	ldr	r3, [pc, #36]	@ (8010650 <MX_I2C1_Init+0x50>)
 801062c:	2200      	movs	r2, #0
 801062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010630:	4b07      	ldr	r3, [pc, #28]	@ (8010650 <MX_I2C1_Init+0x50>)
 8010632:	2200      	movs	r2, #0
 8010634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010636:	4b06      	ldr	r3, [pc, #24]	@ (8010650 <MX_I2C1_Init+0x50>)
 8010638:	2200      	movs	r2, #0
 801063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801063c:	4804      	ldr	r0, [pc, #16]	@ (8010650 <MX_I2C1_Init+0x50>)
 801063e:	f000 fea1 	bl	8011384 <HAL_I2C_Init>
 8010642:	4603      	mov	r3, r0
 8010644:	2b00      	cmp	r3, #0
 8010646:	d001      	beq.n	801064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8010648:	f000 f96c 	bl	8010924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801064c:	bf00      	nop
 801064e:	bd80      	pop	{r7, pc}
 8010650:	20000118 	.word	0x20000118
 8010654:	40005400 	.word	0x40005400
 8010658:	000186a0 	.word	0x000186a0

0801065c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8010660:	4b13      	ldr	r3, [pc, #76]	@ (80106b0 <MX_I2S3_Init+0x54>)
 8010662:	4a14      	ldr	r2, [pc, #80]	@ (80106b4 <MX_I2S3_Init+0x58>)
 8010664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8010666:	4b12      	ldr	r3, [pc, #72]	@ (80106b0 <MX_I2S3_Init+0x54>)
 8010668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 801066e:	4b10      	ldr	r3, [pc, #64]	@ (80106b0 <MX_I2S3_Init+0x54>)
 8010670:	2200      	movs	r2, #0
 8010672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8010674:	4b0e      	ldr	r3, [pc, #56]	@ (80106b0 <MX_I2S3_Init+0x54>)
 8010676:	2200      	movs	r2, #0
 8010678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 801067a:	4b0d      	ldr	r3, [pc, #52]	@ (80106b0 <MX_I2S3_Init+0x54>)
 801067c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8010682:	4b0b      	ldr	r3, [pc, #44]	@ (80106b0 <MX_I2S3_Init+0x54>)
 8010684:	4a0c      	ldr	r2, [pc, #48]	@ (80106b8 <MX_I2S3_Init+0x5c>)
 8010686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8010688:	4b09      	ldr	r3, [pc, #36]	@ (80106b0 <MX_I2S3_Init+0x54>)
 801068a:	2200      	movs	r2, #0
 801068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 801068e:	4b08      	ldr	r3, [pc, #32]	@ (80106b0 <MX_I2S3_Init+0x54>)
 8010690:	2200      	movs	r2, #0
 8010692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8010694:	4b06      	ldr	r3, [pc, #24]	@ (80106b0 <MX_I2S3_Init+0x54>)
 8010696:	2200      	movs	r2, #0
 8010698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 801069a:	4805      	ldr	r0, [pc, #20]	@ (80106b0 <MX_I2S3_Init+0x54>)
 801069c:	f000 ffb6 	bl	801160c <HAL_I2S_Init>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d001      	beq.n	80106aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80106a6:	f000 f93d 	bl	8010924 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80106aa:	bf00      	nop
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	2000016c 	.word	0x2000016c
 80106b4:	40003c00 	.word	0x40003c00
 80106b8:	00017700 	.word	0x00017700

080106bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80106c0:	4b17      	ldr	r3, [pc, #92]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106c2:	4a18      	ldr	r2, [pc, #96]	@ (8010724 <MX_SPI1_Init+0x68>)
 80106c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80106c6:	4b16      	ldr	r3, [pc, #88]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80106cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80106ce:	4b14      	ldr	r3, [pc, #80]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106d0:	2200      	movs	r2, #0
 80106d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80106d4:	4b12      	ldr	r3, [pc, #72]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106d6:	2200      	movs	r2, #0
 80106d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80106da:	4b11      	ldr	r3, [pc, #68]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106dc:	2200      	movs	r2, #0
 80106de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80106e0:	4b0f      	ldr	r3, [pc, #60]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80106e6:	4b0e      	ldr	r3, [pc, #56]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80106ee:	4b0c      	ldr	r3, [pc, #48]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80106f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80106fa:	4b09      	ldr	r3, [pc, #36]	@ (8010720 <MX_SPI1_Init+0x64>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010700:	4b07      	ldr	r3, [pc, #28]	@ (8010720 <MX_SPI1_Init+0x64>)
 8010702:	2200      	movs	r2, #0
 8010704:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8010706:	4b06      	ldr	r3, [pc, #24]	@ (8010720 <MX_SPI1_Init+0x64>)
 8010708:	220a      	movs	r2, #10
 801070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801070c:	4804      	ldr	r0, [pc, #16]	@ (8010720 <MX_SPI1_Init+0x64>)
 801070e:	f003 fc35 	bl	8013f7c <HAL_SPI_Init>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d001      	beq.n	801071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8010718:	f000 f904 	bl	8010924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801071c:	bf00      	nop
 801071e:	bd80      	pop	{r7, pc}
 8010720:	200001b4 	.word	0x200001b4
 8010724:	40013000 	.word	0x40013000

08010728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08c      	sub	sp, #48	@ 0x30
 801072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801072e:	f107 031c 	add.w	r3, r7, #28
 8010732:	2200      	movs	r2, #0
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	605a      	str	r2, [r3, #4]
 8010738:	609a      	str	r2, [r3, #8]
 801073a:	60da      	str	r2, [r3, #12]
 801073c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801073e:	2300      	movs	r3, #0
 8010740:	61bb      	str	r3, [r7, #24]
 8010742:	4b72      	ldr	r3, [pc, #456]	@ (801090c <MX_GPIO_Init+0x1e4>)
 8010744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010746:	4a71      	ldr	r2, [pc, #452]	@ (801090c <MX_GPIO_Init+0x1e4>)
 8010748:	f043 0310 	orr.w	r3, r3, #16
 801074c:	6313      	str	r3, [r2, #48]	@ 0x30
 801074e:	4b6f      	ldr	r3, [pc, #444]	@ (801090c <MX_GPIO_Init+0x1e4>)
 8010750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010752:	f003 0310 	and.w	r3, r3, #16
 8010756:	61bb      	str	r3, [r7, #24]
 8010758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801075a:	2300      	movs	r3, #0
 801075c:	617b      	str	r3, [r7, #20]
 801075e:	4b6b      	ldr	r3, [pc, #428]	@ (801090c <MX_GPIO_Init+0x1e4>)
 8010760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010762:	4a6a      	ldr	r2, [pc, #424]	@ (801090c <MX_GPIO_Init+0x1e4>)
 8010764:	f043 0304 	orr.w	r3, r3, #4
 8010768:	6313      	str	r3, [r2, #48]	@ 0x30
 801076a:	4b68      	ldr	r3, [pc, #416]	@ (801090c <MX_GPIO_Init+0x1e4>)
 801076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801076e:	f003 0304 	and.w	r3, r3, #4
 8010772:	617b      	str	r3, [r7, #20]
 8010774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010776:	2300      	movs	r3, #0
 8010778:	613b      	str	r3, [r7, #16]
 801077a:	4b64      	ldr	r3, [pc, #400]	@ (801090c <MX_GPIO_Init+0x1e4>)
 801077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801077e:	4a63      	ldr	r2, [pc, #396]	@ (801090c <MX_GPIO_Init+0x1e4>)
 8010780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010784:	6313      	str	r3, [r2, #48]	@ 0x30
 8010786:	4b61      	ldr	r3, [pc, #388]	@ (801090c <MX_GPIO_Init+0x1e4>)
 8010788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801078e:	613b      	str	r3, [r7, #16]
 8010790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010792:	2300      	movs	r3, #0
 8010794:	60fb      	str	r3, [r7, #12]
 8010796:	4b5d      	ldr	r3, [pc, #372]	@ (801090c <MX_GPIO_Init+0x1e4>)
 8010798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801079a:	4a5c      	ldr	r2, [pc, #368]	@ (801090c <MX_GPIO_Init+0x1e4>)
 801079c:	f043 0301 	orr.w	r3, r3, #1
 80107a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80107a2:	4b5a      	ldr	r3, [pc, #360]	@ (801090c <MX_GPIO_Init+0x1e4>)
 80107a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107a6:	f003 0301 	and.w	r3, r3, #1
 80107aa:	60fb      	str	r3, [r7, #12]
 80107ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80107ae:	2300      	movs	r3, #0
 80107b0:	60bb      	str	r3, [r7, #8]
 80107b2:	4b56      	ldr	r3, [pc, #344]	@ (801090c <MX_GPIO_Init+0x1e4>)
 80107b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107b6:	4a55      	ldr	r2, [pc, #340]	@ (801090c <MX_GPIO_Init+0x1e4>)
 80107b8:	f043 0302 	orr.w	r3, r3, #2
 80107bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80107be:	4b53      	ldr	r3, [pc, #332]	@ (801090c <MX_GPIO_Init+0x1e4>)
 80107c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107c2:	f003 0302 	and.w	r3, r3, #2
 80107c6:	60bb      	str	r3, [r7, #8]
 80107c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80107ca:	2300      	movs	r3, #0
 80107cc:	607b      	str	r3, [r7, #4]
 80107ce:	4b4f      	ldr	r3, [pc, #316]	@ (801090c <MX_GPIO_Init+0x1e4>)
 80107d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107d2:	4a4e      	ldr	r2, [pc, #312]	@ (801090c <MX_GPIO_Init+0x1e4>)
 80107d4:	f043 0308 	orr.w	r3, r3, #8
 80107d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80107da:	4b4c      	ldr	r3, [pc, #304]	@ (801090c <MX_GPIO_Init+0x1e4>)
 80107dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107de:	f003 0308 	and.w	r3, r3, #8
 80107e2:	607b      	str	r3, [r7, #4]
 80107e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80107e6:	2200      	movs	r2, #0
 80107e8:	2108      	movs	r1, #8
 80107ea:	4849      	ldr	r0, [pc, #292]	@ (8010910 <MX_GPIO_Init+0x1e8>)
 80107ec:	f000 fd96 	bl	801131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80107f0:	2201      	movs	r2, #1
 80107f2:	2101      	movs	r1, #1
 80107f4:	4847      	ldr	r0, [pc, #284]	@ (8010914 <MX_GPIO_Init+0x1ec>)
 80107f6:	f000 fd91 	bl	801131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin
 80107fa:	2200      	movs	r2, #0
 80107fc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8010800:	4845      	ldr	r0, [pc, #276]	@ (8010918 <MX_GPIO_Init+0x1f0>)
 8010802:	f000 fd8b 	bl	801131c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8010806:	2308      	movs	r3, #8
 8010808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801080a:	2301      	movs	r3, #1
 801080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801080e:	2300      	movs	r3, #0
 8010810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010812:	2300      	movs	r3, #0
 8010814:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8010816:	f107 031c 	add.w	r3, r7, #28
 801081a:	4619      	mov	r1, r3
 801081c:	483c      	ldr	r0, [pc, #240]	@ (8010910 <MX_GPIO_Init+0x1e8>)
 801081e:	f000 fbe1 	bl	8010fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8010822:	2301      	movs	r3, #1
 8010824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010826:	2301      	movs	r3, #1
 8010828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801082a:	2300      	movs	r3, #0
 801082c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801082e:	2300      	movs	r3, #0
 8010830:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8010832:	f107 031c 	add.w	r3, r7, #28
 8010836:	4619      	mov	r1, r3
 8010838:	4836      	ldr	r0, [pc, #216]	@ (8010914 <MX_GPIO_Init+0x1ec>)
 801083a:	f000 fbd3 	bl	8010fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 801083e:	2308      	movs	r3, #8
 8010840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010842:	2302      	movs	r3, #2
 8010844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010846:	2300      	movs	r3, #0
 8010848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801084a:	2300      	movs	r3, #0
 801084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801084e:	2305      	movs	r3, #5
 8010850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8010852:	f107 031c 	add.w	r3, r7, #28
 8010856:	4619      	mov	r1, r3
 8010858:	482e      	ldr	r0, [pc, #184]	@ (8010914 <MX_GPIO_Init+0x1ec>)
 801085a:	f000 fbc3 	bl	8010fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 801085e:	2301      	movs	r3, #1
 8010860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8010862:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8010866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010868:	2300      	movs	r3, #0
 801086a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801086c:	f107 031c 	add.w	r3, r7, #28
 8010870:	4619      	mov	r1, r3
 8010872:	482a      	ldr	r0, [pc, #168]	@ (801091c <MX_GPIO_Init+0x1f4>)
 8010874:	f000 fbb6 	bl	8010fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8010878:	2304      	movs	r3, #4
 801087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801087c:	2300      	movs	r3, #0
 801087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010880:	2300      	movs	r3, #0
 8010882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8010884:	f107 031c 	add.w	r3, r7, #28
 8010888:	4619      	mov	r1, r3
 801088a:	4825      	ldr	r0, [pc, #148]	@ (8010920 <MX_GPIO_Init+0x1f8>)
 801088c:	f000 fbaa 	bl	8010fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8010890:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010896:	2302      	movs	r3, #2
 8010898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801089a:	2300      	movs	r3, #0
 801089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801089e:	2300      	movs	r3, #0
 80108a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80108a2:	2305      	movs	r3, #5
 80108a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80108a6:	f107 031c 	add.w	r3, r7, #28
 80108aa:	4619      	mov	r1, r3
 80108ac:	481c      	ldr	r0, [pc, #112]	@ (8010920 <MX_GPIO_Init+0x1f8>)
 80108ae:	f000 fb99 	bl	8010fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin PD13 LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin
 80108b2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80108b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80108b8:	2301      	movs	r3, #1
 80108ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108bc:	2300      	movs	r3, #0
 80108be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108c0:	2300      	movs	r3, #0
 80108c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80108c4:	f107 031c 	add.w	r3, r7, #28
 80108c8:	4619      	mov	r1, r3
 80108ca:	4813      	ldr	r0, [pc, #76]	@ (8010918 <MX_GPIO_Init+0x1f0>)
 80108cc:	f000 fb8a 	bl	8010fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80108d0:	2320      	movs	r3, #32
 80108d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80108d4:	2300      	movs	r3, #0
 80108d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108d8:	2300      	movs	r3, #0
 80108da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80108dc:	f107 031c 	add.w	r3, r7, #28
 80108e0:	4619      	mov	r1, r3
 80108e2:	480d      	ldr	r0, [pc, #52]	@ (8010918 <MX_GPIO_Init+0x1f0>)
 80108e4:	f000 fb7e 	bl	8010fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80108e8:	2302      	movs	r3, #2
 80108ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80108ec:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80108f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108f2:	2300      	movs	r3, #0
 80108f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80108f6:	f107 031c 	add.w	r3, r7, #28
 80108fa:	4619      	mov	r1, r3
 80108fc:	4804      	ldr	r0, [pc, #16]	@ (8010910 <MX_GPIO_Init+0x1e8>)
 80108fe:	f000 fb71 	bl	8010fe4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8010902:	bf00      	nop
 8010904:	3730      	adds	r7, #48	@ 0x30
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	40023800 	.word	0x40023800
 8010910:	40021000 	.word	0x40021000
 8010914:	40020800 	.word	0x40020800
 8010918:	40020c00 	.word	0x40020c00
 801091c:	40020000 	.word	0x40020000
 8010920:	40020400 	.word	0x40020400

08010924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010924:	b480      	push	{r7}
 8010926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010928:	b672      	cpsid	i
}
 801092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801092c:	bf00      	nop
 801092e:	e7fd      	b.n	801092c <Error_Handler+0x8>

08010930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010936:	2300      	movs	r3, #0
 8010938:	607b      	str	r3, [r7, #4]
 801093a:	4b10      	ldr	r3, [pc, #64]	@ (801097c <HAL_MspInit+0x4c>)
 801093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801093e:	4a0f      	ldr	r2, [pc, #60]	@ (801097c <HAL_MspInit+0x4c>)
 8010940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010944:	6453      	str	r3, [r2, #68]	@ 0x44
 8010946:	4b0d      	ldr	r3, [pc, #52]	@ (801097c <HAL_MspInit+0x4c>)
 8010948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801094e:	607b      	str	r3, [r7, #4]
 8010950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010952:	2300      	movs	r3, #0
 8010954:	603b      	str	r3, [r7, #0]
 8010956:	4b09      	ldr	r3, [pc, #36]	@ (801097c <HAL_MspInit+0x4c>)
 8010958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801095a:	4a08      	ldr	r2, [pc, #32]	@ (801097c <HAL_MspInit+0x4c>)
 801095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010960:	6413      	str	r3, [r2, #64]	@ 0x40
 8010962:	4b06      	ldr	r3, [pc, #24]	@ (801097c <HAL_MspInit+0x4c>)
 8010964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801096a:	603b      	str	r3, [r7, #0]
 801096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 801096e:	2007      	movs	r0, #7
 8010970:	f000 faf6 	bl	8010f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010974:	bf00      	nop
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	40023800 	.word	0x40023800

08010980 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b08a      	sub	sp, #40	@ 0x28
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010988:	f107 0314 	add.w	r3, r7, #20
 801098c:	2200      	movs	r2, #0
 801098e:	601a      	str	r2, [r3, #0]
 8010990:	605a      	str	r2, [r3, #4]
 8010992:	609a      	str	r2, [r3, #8]
 8010994:	60da      	str	r2, [r3, #12]
 8010996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4a19      	ldr	r2, [pc, #100]	@ (8010a04 <HAL_I2C_MspInit+0x84>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d12c      	bne.n	80109fc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80109a2:	2300      	movs	r3, #0
 80109a4:	613b      	str	r3, [r7, #16]
 80109a6:	4b18      	ldr	r3, [pc, #96]	@ (8010a08 <HAL_I2C_MspInit+0x88>)
 80109a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109aa:	4a17      	ldr	r2, [pc, #92]	@ (8010a08 <HAL_I2C_MspInit+0x88>)
 80109ac:	f043 0302 	orr.w	r3, r3, #2
 80109b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80109b2:	4b15      	ldr	r3, [pc, #84]	@ (8010a08 <HAL_I2C_MspInit+0x88>)
 80109b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109b6:	f003 0302 	and.w	r3, r3, #2
 80109ba:	613b      	str	r3, [r7, #16]
 80109bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80109be:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80109c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80109c4:	2312      	movs	r3, #18
 80109c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80109c8:	2301      	movs	r3, #1
 80109ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109cc:	2300      	movs	r3, #0
 80109ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80109d0:	2304      	movs	r3, #4
 80109d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80109d4:	f107 0314 	add.w	r3, r7, #20
 80109d8:	4619      	mov	r1, r3
 80109da:	480c      	ldr	r0, [pc, #48]	@ (8010a0c <HAL_I2C_MspInit+0x8c>)
 80109dc:	f000 fb02 	bl	8010fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80109e0:	2300      	movs	r3, #0
 80109e2:	60fb      	str	r3, [r7, #12]
 80109e4:	4b08      	ldr	r3, [pc, #32]	@ (8010a08 <HAL_I2C_MspInit+0x88>)
 80109e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109e8:	4a07      	ldr	r2, [pc, #28]	@ (8010a08 <HAL_I2C_MspInit+0x88>)
 80109ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80109ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80109f0:	4b05      	ldr	r3, [pc, #20]	@ (8010a08 <HAL_I2C_MspInit+0x88>)
 80109f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80109f8:	60fb      	str	r3, [r7, #12]
 80109fa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80109fc:	bf00      	nop
 80109fe:	3728      	adds	r7, #40	@ 0x28
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	40005400 	.word	0x40005400
 8010a08:	40023800 	.word	0x40023800
 8010a0c:	40020400 	.word	0x40020400

08010a10 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b08e      	sub	sp, #56	@ 0x38
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	601a      	str	r2, [r3, #0]
 8010a20:	605a      	str	r2, [r3, #4]
 8010a22:	609a      	str	r2, [r3, #8]
 8010a24:	60da      	str	r2, [r3, #12]
 8010a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010a28:	f107 0314 	add.w	r3, r7, #20
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	601a      	str	r2, [r3, #0]
 8010a30:	605a      	str	r2, [r3, #4]
 8010a32:	609a      	str	r2, [r3, #8]
 8010a34:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4a31      	ldr	r2, [pc, #196]	@ (8010b00 <HAL_I2S_MspInit+0xf0>)
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d15a      	bne.n	8010af6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8010a40:	2301      	movs	r3, #1
 8010a42:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8010a44:	23c0      	movs	r3, #192	@ 0xc0
 8010a46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8010a48:	2302      	movs	r3, #2
 8010a4a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010a4c:	f107 0314 	add.w	r3, r7, #20
 8010a50:	4618      	mov	r0, r3
 8010a52:	f003 f951 	bl	8013cf8 <HAL_RCCEx_PeriphCLKConfig>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d001      	beq.n	8010a60 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8010a5c:	f7ff ff62 	bl	8010924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010a60:	2300      	movs	r3, #0
 8010a62:	613b      	str	r3, [r7, #16]
 8010a64:	4b27      	ldr	r3, [pc, #156]	@ (8010b04 <HAL_I2S_MspInit+0xf4>)
 8010a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a68:	4a26      	ldr	r2, [pc, #152]	@ (8010b04 <HAL_I2S_MspInit+0xf4>)
 8010a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8010a70:	4b24      	ldr	r3, [pc, #144]	@ (8010b04 <HAL_I2S_MspInit+0xf4>)
 8010a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010a78:	613b      	str	r3, [r7, #16]
 8010a7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	60fb      	str	r3, [r7, #12]
 8010a80:	4b20      	ldr	r3, [pc, #128]	@ (8010b04 <HAL_I2S_MspInit+0xf4>)
 8010a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a84:	4a1f      	ldr	r2, [pc, #124]	@ (8010b04 <HAL_I2S_MspInit+0xf4>)
 8010a86:	f043 0301 	orr.w	r3, r3, #1
 8010a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8010a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8010b04 <HAL_I2S_MspInit+0xf4>)
 8010a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a90:	f003 0301 	and.w	r3, r3, #1
 8010a94:	60fb      	str	r3, [r7, #12]
 8010a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010a98:	2300      	movs	r3, #0
 8010a9a:	60bb      	str	r3, [r7, #8]
 8010a9c:	4b19      	ldr	r3, [pc, #100]	@ (8010b04 <HAL_I2S_MspInit+0xf4>)
 8010a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aa0:	4a18      	ldr	r2, [pc, #96]	@ (8010b04 <HAL_I2S_MspInit+0xf4>)
 8010aa2:	f043 0304 	orr.w	r3, r3, #4
 8010aa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8010aa8:	4b16      	ldr	r3, [pc, #88]	@ (8010b04 <HAL_I2S_MspInit+0xf4>)
 8010aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aac:	f003 0304 	and.w	r3, r3, #4
 8010ab0:	60bb      	str	r3, [r7, #8]
 8010ab2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8010ab4:	2310      	movs	r3, #16
 8010ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ab8:	2302      	movs	r3, #2
 8010aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010abc:	2300      	movs	r3, #0
 8010abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010ac4:	2306      	movs	r3, #6
 8010ac6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8010ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010acc:	4619      	mov	r1, r3
 8010ace:	480e      	ldr	r0, [pc, #56]	@ (8010b08 <HAL_I2S_MspInit+0xf8>)
 8010ad0:	f000 fa88 	bl	8010fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8010ad4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8010ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ada:	2302      	movs	r3, #2
 8010adc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010ae6:	2306      	movs	r3, #6
 8010ae8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010aee:	4619      	mov	r1, r3
 8010af0:	4806      	ldr	r0, [pc, #24]	@ (8010b0c <HAL_I2S_MspInit+0xfc>)
 8010af2:	f000 fa77 	bl	8010fe4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8010af6:	bf00      	nop
 8010af8:	3738      	adds	r7, #56	@ 0x38
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	40003c00 	.word	0x40003c00
 8010b04:	40023800 	.word	0x40023800
 8010b08:	40020000 	.word	0x40020000
 8010b0c:	40020800 	.word	0x40020800

08010b10 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b08a      	sub	sp, #40	@ 0x28
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b18:	f107 0314 	add.w	r3, r7, #20
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	601a      	str	r2, [r3, #0]
 8010b20:	605a      	str	r2, [r3, #4]
 8010b22:	609a      	str	r2, [r3, #8]
 8010b24:	60da      	str	r2, [r3, #12]
 8010b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4a19      	ldr	r2, [pc, #100]	@ (8010b94 <HAL_SPI_MspInit+0x84>)
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d12b      	bne.n	8010b8a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8010b32:	2300      	movs	r3, #0
 8010b34:	613b      	str	r3, [r7, #16]
 8010b36:	4b18      	ldr	r3, [pc, #96]	@ (8010b98 <HAL_SPI_MspInit+0x88>)
 8010b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b3a:	4a17      	ldr	r2, [pc, #92]	@ (8010b98 <HAL_SPI_MspInit+0x88>)
 8010b3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8010b42:	4b15      	ldr	r3, [pc, #84]	@ (8010b98 <HAL_SPI_MspInit+0x88>)
 8010b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b4a:	613b      	str	r3, [r7, #16]
 8010b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b4e:	2300      	movs	r3, #0
 8010b50:	60fb      	str	r3, [r7, #12]
 8010b52:	4b11      	ldr	r3, [pc, #68]	@ (8010b98 <HAL_SPI_MspInit+0x88>)
 8010b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b56:	4a10      	ldr	r2, [pc, #64]	@ (8010b98 <HAL_SPI_MspInit+0x88>)
 8010b58:	f043 0301 	orr.w	r3, r3, #1
 8010b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8010b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8010b98 <HAL_SPI_MspInit+0x88>)
 8010b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b62:	f003 0301 	and.w	r3, r3, #1
 8010b66:	60fb      	str	r3, [r7, #12]
 8010b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8010b6a:	23e0      	movs	r3, #224	@ 0xe0
 8010b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b6e:	2302      	movs	r3, #2
 8010b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b72:	2300      	movs	r3, #0
 8010b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b76:	2300      	movs	r3, #0
 8010b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010b7a:	2305      	movs	r3, #5
 8010b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b7e:	f107 0314 	add.w	r3, r7, #20
 8010b82:	4619      	mov	r1, r3
 8010b84:	4805      	ldr	r0, [pc, #20]	@ (8010b9c <HAL_SPI_MspInit+0x8c>)
 8010b86:	f000 fa2d 	bl	8010fe4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8010b8a:	bf00      	nop
 8010b8c:	3728      	adds	r7, #40	@ 0x28
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	40013000 	.word	0x40013000
 8010b98:	40023800 	.word	0x40023800
 8010b9c:	40020000 	.word	0x40020000

08010ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010ba4:	bf00      	nop
 8010ba6:	e7fd      	b.n	8010ba4 <NMI_Handler+0x4>

08010ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010bac:	bf00      	nop
 8010bae:	e7fd      	b.n	8010bac <HardFault_Handler+0x4>

08010bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010bb4:	bf00      	nop
 8010bb6:	e7fd      	b.n	8010bb4 <MemManage_Handler+0x4>

08010bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010bbc:	bf00      	nop
 8010bbe:	e7fd      	b.n	8010bbc <BusFault_Handler+0x4>

08010bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010bc4:	bf00      	nop
 8010bc6:	e7fd      	b.n	8010bc4 <UsageFault_Handler+0x4>

08010bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010bcc:	bf00      	nop
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr

08010bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010bd6:	b480      	push	{r7}
 8010bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010bda:	bf00      	nop
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010be4:	b480      	push	{r7}
 8010be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010be8:	bf00      	nop
 8010bea:	46bd      	mov	sp, r7
 8010bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf0:	4770      	bx	lr

08010bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010bf2:	b580      	push	{r7, lr}
 8010bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010bf6:	f000 f89f 	bl	8010d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010bfa:	bf00      	nop
 8010bfc:	bd80      	pop	{r7, pc}
	...

08010c00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8010c04:	4802      	ldr	r0, [pc, #8]	@ (8010c10 <OTG_FS_IRQHandler+0x10>)
 8010c06:	f001 fae5 	bl	80121d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8010c0a:	bf00      	nop
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	200016f0 	.word	0x200016f0

08010c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010c14:	b480      	push	{r7}
 8010c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010c18:	4b07      	ldr	r3, [pc, #28]	@ (8010c38 <SystemInit+0x24>)
 8010c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c1e:	4a06      	ldr	r2, [pc, #24]	@ (8010c38 <SystemInit+0x24>)
 8010c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8010c28:	4b03      	ldr	r3, [pc, #12]	@ (8010c38 <SystemInit+0x24>)
 8010c2a:	4a04      	ldr	r2, [pc, #16]	@ (8010c3c <SystemInit+0x28>)
 8010c2c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010c2e:	bf00      	nop
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr
 8010c38:	e000ed00 	.word	0xe000ed00
 8010c3c:	08010000 	.word	0x08010000

08010c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8010c78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8010c44:	f7ff ffe6 	bl	8010c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010c48:	480c      	ldr	r0, [pc, #48]	@ (8010c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8010c4a:	490d      	ldr	r1, [pc, #52]	@ (8010c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8010c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8010c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8010c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010c50:	e002      	b.n	8010c58 <LoopCopyDataInit>

08010c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010c56:	3304      	adds	r3, #4

08010c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010c5c:	d3f9      	bcc.n	8010c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8010c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8010c60:	4c0a      	ldr	r4, [pc, #40]	@ (8010c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8010c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010c64:	e001      	b.n	8010c6a <LoopFillZerobss>

08010c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010c68:	3204      	adds	r2, #4

08010c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010c6c:	d3fb      	bcc.n	8010c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010c6e:	f007 fa17 	bl	80180a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010c72:	f7ff fc3f 	bl	80104f4 <main>
  bx  lr    
 8010c76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010c78:	2001fffc 	.word	0x2001fffc
  ldr r0, =_sdata
 8010c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010c80:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8010c84:	08018170 	.word	0x08018170
  ldr r2, =_sbss
 8010c88:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8010c8c:	20001df4 	.word	0x20001df4

08010c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010c90:	e7fe      	b.n	8010c90 <ADC_IRQHandler>
	...

08010c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010c98:	4b0e      	ldr	r3, [pc, #56]	@ (8010cd4 <HAL_Init+0x40>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8010cd4 <HAL_Init+0x40>)
 8010c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8010cd4 <HAL_Init+0x40>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8010cd4 <HAL_Init+0x40>)
 8010caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010cb0:	4b08      	ldr	r3, [pc, #32]	@ (8010cd4 <HAL_Init+0x40>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	4a07      	ldr	r2, [pc, #28]	@ (8010cd4 <HAL_Init+0x40>)
 8010cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010cbc:	2003      	movs	r0, #3
 8010cbe:	f000 f94f 	bl	8010f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	f000 f808 	bl	8010cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010cc8:	f7ff fe32 	bl	8010930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	40023c00 	.word	0x40023c00

08010cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010ce0:	4b12      	ldr	r3, [pc, #72]	@ (8010d2c <HAL_InitTick+0x54>)
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	4b12      	ldr	r3, [pc, #72]	@ (8010d30 <HAL_InitTick+0x58>)
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	4619      	mov	r1, r3
 8010cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f000 f967 	bl	8010fca <HAL_SYSTICK_Config>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d001      	beq.n	8010d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	e00e      	b.n	8010d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2b0f      	cmp	r3, #15
 8010d0a:	d80a      	bhi.n	8010d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	6879      	ldr	r1, [r7, #4]
 8010d10:	f04f 30ff 	mov.w	r0, #4294967295
 8010d14:	f000 f92f 	bl	8010f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010d18:	4a06      	ldr	r2, [pc, #24]	@ (8010d34 <HAL_InitTick+0x5c>)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	e000      	b.n	8010d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010d22:	2301      	movs	r3, #1
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	20000000 	.word	0x20000000
 8010d30:	20000008 	.word	0x20000008
 8010d34:	20000004 	.word	0x20000004

08010d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010d3c:	4b06      	ldr	r3, [pc, #24]	@ (8010d58 <HAL_IncTick+0x20>)
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	461a      	mov	r2, r3
 8010d42:	4b06      	ldr	r3, [pc, #24]	@ (8010d5c <HAL_IncTick+0x24>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	4413      	add	r3, r2
 8010d48:	4a04      	ldr	r2, [pc, #16]	@ (8010d5c <HAL_IncTick+0x24>)
 8010d4a:	6013      	str	r3, [r2, #0]
}
 8010d4c:	bf00      	nop
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	20000008 	.word	0x20000008
 8010d5c:	2000020c 	.word	0x2000020c

08010d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010d60:	b480      	push	{r7}
 8010d62:	af00      	add	r7, sp, #0
  return uwTick;
 8010d64:	4b03      	ldr	r3, [pc, #12]	@ (8010d74 <HAL_GetTick+0x14>)
 8010d66:	681b      	ldr	r3, [r3, #0]
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr
 8010d72:	bf00      	nop
 8010d74:	2000020c 	.word	0x2000020c

08010d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b084      	sub	sp, #16
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010d80:	f7ff ffee 	bl	8010d60 <HAL_GetTick>
 8010d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d90:	d005      	beq.n	8010d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010d92:	4b0a      	ldr	r3, [pc, #40]	@ (8010dbc <HAL_Delay+0x44>)
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	461a      	mov	r2, r3
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	4413      	add	r3, r2
 8010d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010d9e:	bf00      	nop
 8010da0:	f7ff ffde 	bl	8010d60 <HAL_GetTick>
 8010da4:	4602      	mov	r2, r0
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	68fa      	ldr	r2, [r7, #12]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d8f7      	bhi.n	8010da0 <HAL_Delay+0x28>
  {
  }
}
 8010db0:	bf00      	nop
 8010db2:	bf00      	nop
 8010db4:	3710      	adds	r7, #16
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	20000008 	.word	0x20000008

08010dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b085      	sub	sp, #20
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f003 0307 	and.w	r3, r3, #7
 8010dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8010e04 <__NVIC_SetPriorityGrouping+0x44>)
 8010dd2:	68db      	ldr	r3, [r3, #12]
 8010dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010dd6:	68ba      	ldr	r2, [r7, #8]
 8010dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010ddc:	4013      	ands	r3, r2
 8010dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010df2:	4a04      	ldr	r2, [pc, #16]	@ (8010e04 <__NVIC_SetPriorityGrouping+0x44>)
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	60d3      	str	r3, [r2, #12]
}
 8010df8:	bf00      	nop
 8010dfa:	3714      	adds	r7, #20
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr
 8010e04:	e000ed00 	.word	0xe000ed00

08010e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010e0c:	4b04      	ldr	r3, [pc, #16]	@ (8010e20 <__NVIC_GetPriorityGrouping+0x18>)
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	0a1b      	lsrs	r3, r3, #8
 8010e12:	f003 0307 	and.w	r3, r3, #7
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr
 8010e20:	e000ed00 	.word	0xe000ed00

08010e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010e24:	b480      	push	{r7}
 8010e26:	b083      	sub	sp, #12
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	db0b      	blt.n	8010e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e36:	79fb      	ldrb	r3, [r7, #7]
 8010e38:	f003 021f 	and.w	r2, r3, #31
 8010e3c:	4907      	ldr	r1, [pc, #28]	@ (8010e5c <__NVIC_EnableIRQ+0x38>)
 8010e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e42:	095b      	lsrs	r3, r3, #5
 8010e44:	2001      	movs	r0, #1
 8010e46:	fa00 f202 	lsl.w	r2, r0, r2
 8010e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8010e4e:	bf00      	nop
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	e000e100 	.word	0xe000e100

08010e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	4603      	mov	r3, r0
 8010e68:	6039      	str	r1, [r7, #0]
 8010e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	db0a      	blt.n	8010e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	b2da      	uxtb	r2, r3
 8010e78:	490c      	ldr	r1, [pc, #48]	@ (8010eac <__NVIC_SetPriority+0x4c>)
 8010e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e7e:	0112      	lsls	r2, r2, #4
 8010e80:	b2d2      	uxtb	r2, r2
 8010e82:	440b      	add	r3, r1
 8010e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010e88:	e00a      	b.n	8010ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	4908      	ldr	r1, [pc, #32]	@ (8010eb0 <__NVIC_SetPriority+0x50>)
 8010e90:	79fb      	ldrb	r3, [r7, #7]
 8010e92:	f003 030f 	and.w	r3, r3, #15
 8010e96:	3b04      	subs	r3, #4
 8010e98:	0112      	lsls	r2, r2, #4
 8010e9a:	b2d2      	uxtb	r2, r2
 8010e9c:	440b      	add	r3, r1
 8010e9e:	761a      	strb	r2, [r3, #24]
}
 8010ea0:	bf00      	nop
 8010ea2:	370c      	adds	r7, #12
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr
 8010eac:	e000e100 	.word	0xe000e100
 8010eb0:	e000ed00 	.word	0xe000ed00

08010eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b089      	sub	sp, #36	@ 0x24
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f003 0307 	and.w	r3, r3, #7
 8010ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	f1c3 0307 	rsb	r3, r3, #7
 8010ece:	2b04      	cmp	r3, #4
 8010ed0:	bf28      	it	cs
 8010ed2:	2304      	movcs	r3, #4
 8010ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010ed6:	69fb      	ldr	r3, [r7, #28]
 8010ed8:	3304      	adds	r3, #4
 8010eda:	2b06      	cmp	r3, #6
 8010edc:	d902      	bls.n	8010ee4 <NVIC_EncodePriority+0x30>
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	3b03      	subs	r3, #3
 8010ee2:	e000      	b.n	8010ee6 <NVIC_EncodePriority+0x32>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	fa02 f303 	lsl.w	r3, r2, r3
 8010ef2:	43da      	mvns	r2, r3
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	401a      	ands	r2, r3
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010efc:	f04f 31ff 	mov.w	r1, #4294967295
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	fa01 f303 	lsl.w	r3, r1, r3
 8010f06:	43d9      	mvns	r1, r3
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f0c:	4313      	orrs	r3, r2
         );
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3724      	adds	r7, #36	@ 0x24
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr
	...

08010f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	3b01      	subs	r3, #1
 8010f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f2c:	d301      	bcc.n	8010f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010f2e:	2301      	movs	r3, #1
 8010f30:	e00f      	b.n	8010f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010f32:	4a0a      	ldr	r2, [pc, #40]	@ (8010f5c <SysTick_Config+0x40>)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	3b01      	subs	r3, #1
 8010f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010f3a:	210f      	movs	r1, #15
 8010f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f40:	f7ff ff8e 	bl	8010e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010f44:	4b05      	ldr	r3, [pc, #20]	@ (8010f5c <SysTick_Config+0x40>)
 8010f46:	2200      	movs	r2, #0
 8010f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010f4a:	4b04      	ldr	r3, [pc, #16]	@ (8010f5c <SysTick_Config+0x40>)
 8010f4c:	2207      	movs	r2, #7
 8010f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010f50:	2300      	movs	r3, #0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3708      	adds	r7, #8
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	e000e010 	.word	0xe000e010

08010f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7ff ff29 	bl	8010dc0 <__NVIC_SetPriorityGrouping>
}
 8010f6e:	bf00      	nop
 8010f70:	3708      	adds	r7, #8
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b086      	sub	sp, #24
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	60b9      	str	r1, [r7, #8]
 8010f80:	607a      	str	r2, [r7, #4]
 8010f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010f84:	2300      	movs	r3, #0
 8010f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010f88:	f7ff ff3e 	bl	8010e08 <__NVIC_GetPriorityGrouping>
 8010f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	68b9      	ldr	r1, [r7, #8]
 8010f92:	6978      	ldr	r0, [r7, #20]
 8010f94:	f7ff ff8e 	bl	8010eb4 <NVIC_EncodePriority>
 8010f98:	4602      	mov	r2, r0
 8010f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f9e:	4611      	mov	r1, r2
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7ff ff5d 	bl	8010e60 <__NVIC_SetPriority>
}
 8010fa6:	bf00      	nop
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b082      	sub	sp, #8
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7ff ff31 	bl	8010e24 <__NVIC_EnableIRQ>
}
 8010fc2:	bf00      	nop
 8010fc4:	3708      	adds	r7, #8
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b082      	sub	sp, #8
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7ff ffa2 	bl	8010f1c <SysTick_Config>
 8010fd8:	4603      	mov	r3, r0
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3708      	adds	r7, #8
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
	...

08010fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b089      	sub	sp, #36	@ 0x24
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	61fb      	str	r3, [r7, #28]
 8010ffe:	e16b      	b.n	80112d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011000:	2201      	movs	r2, #1
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	fa02 f303 	lsl.w	r3, r2, r3
 8011008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	697a      	ldr	r2, [r7, #20]
 8011010:	4013      	ands	r3, r2
 8011012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011014:	693a      	ldr	r2, [r7, #16]
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	429a      	cmp	r2, r3
 801101a:	f040 815a 	bne.w	80112d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	f003 0303 	and.w	r3, r3, #3
 8011026:	2b01      	cmp	r3, #1
 8011028:	d005      	beq.n	8011036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011032:	2b02      	cmp	r3, #2
 8011034:	d130      	bne.n	8011098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801103c:	69fb      	ldr	r3, [r7, #28]
 801103e:	005b      	lsls	r3, r3, #1
 8011040:	2203      	movs	r2, #3
 8011042:	fa02 f303 	lsl.w	r3, r2, r3
 8011046:	43db      	mvns	r3, r3
 8011048:	69ba      	ldr	r2, [r7, #24]
 801104a:	4013      	ands	r3, r2
 801104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	68da      	ldr	r2, [r3, #12]
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	005b      	lsls	r3, r3, #1
 8011056:	fa02 f303 	lsl.w	r3, r2, r3
 801105a:	69ba      	ldr	r2, [r7, #24]
 801105c:	4313      	orrs	r3, r2
 801105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	69ba      	ldr	r2, [r7, #24]
 8011064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801106c:	2201      	movs	r2, #1
 801106e:	69fb      	ldr	r3, [r7, #28]
 8011070:	fa02 f303 	lsl.w	r3, r2, r3
 8011074:	43db      	mvns	r3, r3
 8011076:	69ba      	ldr	r2, [r7, #24]
 8011078:	4013      	ands	r3, r2
 801107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	091b      	lsrs	r3, r3, #4
 8011082:	f003 0201 	and.w	r2, r3, #1
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	fa02 f303 	lsl.w	r3, r2, r3
 801108c:	69ba      	ldr	r2, [r7, #24]
 801108e:	4313      	orrs	r3, r2
 8011090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	69ba      	ldr	r2, [r7, #24]
 8011096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	f003 0303 	and.w	r3, r3, #3
 80110a0:	2b03      	cmp	r3, #3
 80110a2:	d017      	beq.n	80110d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	68db      	ldr	r3, [r3, #12]
 80110a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	005b      	lsls	r3, r3, #1
 80110ae:	2203      	movs	r2, #3
 80110b0:	fa02 f303 	lsl.w	r3, r2, r3
 80110b4:	43db      	mvns	r3, r3
 80110b6:	69ba      	ldr	r2, [r7, #24]
 80110b8:	4013      	ands	r3, r2
 80110ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	689a      	ldr	r2, [r3, #8]
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	005b      	lsls	r3, r3, #1
 80110c4:	fa02 f303 	lsl.w	r3, r2, r3
 80110c8:	69ba      	ldr	r2, [r7, #24]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	69ba      	ldr	r2, [r7, #24]
 80110d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	685b      	ldr	r3, [r3, #4]
 80110d8:	f003 0303 	and.w	r3, r3, #3
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d123      	bne.n	8011128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	08da      	lsrs	r2, r3, #3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	3208      	adds	r2, #8
 80110e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80110ee:	69fb      	ldr	r3, [r7, #28]
 80110f0:	f003 0307 	and.w	r3, r3, #7
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	220f      	movs	r2, #15
 80110f8:	fa02 f303 	lsl.w	r3, r2, r3
 80110fc:	43db      	mvns	r3, r3
 80110fe:	69ba      	ldr	r2, [r7, #24]
 8011100:	4013      	ands	r3, r2
 8011102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	691a      	ldr	r2, [r3, #16]
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	f003 0307 	and.w	r3, r3, #7
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	fa02 f303 	lsl.w	r3, r2, r3
 8011114:	69ba      	ldr	r2, [r7, #24]
 8011116:	4313      	orrs	r3, r2
 8011118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	08da      	lsrs	r2, r3, #3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	3208      	adds	r2, #8
 8011122:	69b9      	ldr	r1, [r7, #24]
 8011124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	005b      	lsls	r3, r3, #1
 8011132:	2203      	movs	r2, #3
 8011134:	fa02 f303 	lsl.w	r3, r2, r3
 8011138:	43db      	mvns	r3, r3
 801113a:	69ba      	ldr	r2, [r7, #24]
 801113c:	4013      	ands	r3, r2
 801113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	685b      	ldr	r3, [r3, #4]
 8011144:	f003 0203 	and.w	r2, r3, #3
 8011148:	69fb      	ldr	r3, [r7, #28]
 801114a:	005b      	lsls	r3, r3, #1
 801114c:	fa02 f303 	lsl.w	r3, r2, r3
 8011150:	69ba      	ldr	r2, [r7, #24]
 8011152:	4313      	orrs	r3, r2
 8011154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	69ba      	ldr	r2, [r7, #24]
 801115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011164:	2b00      	cmp	r3, #0
 8011166:	f000 80b4 	beq.w	80112d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801116a:	2300      	movs	r3, #0
 801116c:	60fb      	str	r3, [r7, #12]
 801116e:	4b60      	ldr	r3, [pc, #384]	@ (80112f0 <HAL_GPIO_Init+0x30c>)
 8011170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011172:	4a5f      	ldr	r2, [pc, #380]	@ (80112f0 <HAL_GPIO_Init+0x30c>)
 8011174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011178:	6453      	str	r3, [r2, #68]	@ 0x44
 801117a:	4b5d      	ldr	r3, [pc, #372]	@ (80112f0 <HAL_GPIO_Init+0x30c>)
 801117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801117e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011182:	60fb      	str	r3, [r7, #12]
 8011184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011186:	4a5b      	ldr	r2, [pc, #364]	@ (80112f4 <HAL_GPIO_Init+0x310>)
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	089b      	lsrs	r3, r3, #2
 801118c:	3302      	adds	r3, #2
 801118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	f003 0303 	and.w	r3, r3, #3
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	220f      	movs	r2, #15
 801119e:	fa02 f303 	lsl.w	r3, r2, r3
 80111a2:	43db      	mvns	r3, r3
 80111a4:	69ba      	ldr	r2, [r7, #24]
 80111a6:	4013      	ands	r3, r2
 80111a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4a52      	ldr	r2, [pc, #328]	@ (80112f8 <HAL_GPIO_Init+0x314>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d02b      	beq.n	801120a <HAL_GPIO_Init+0x226>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	4a51      	ldr	r2, [pc, #324]	@ (80112fc <HAL_GPIO_Init+0x318>)
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d025      	beq.n	8011206 <HAL_GPIO_Init+0x222>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4a50      	ldr	r2, [pc, #320]	@ (8011300 <HAL_GPIO_Init+0x31c>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d01f      	beq.n	8011202 <HAL_GPIO_Init+0x21e>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	4a4f      	ldr	r2, [pc, #316]	@ (8011304 <HAL_GPIO_Init+0x320>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d019      	beq.n	80111fe <HAL_GPIO_Init+0x21a>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4a4e      	ldr	r2, [pc, #312]	@ (8011308 <HAL_GPIO_Init+0x324>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d013      	beq.n	80111fa <HAL_GPIO_Init+0x216>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4a4d      	ldr	r2, [pc, #308]	@ (801130c <HAL_GPIO_Init+0x328>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d00d      	beq.n	80111f6 <HAL_GPIO_Init+0x212>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4a4c      	ldr	r2, [pc, #304]	@ (8011310 <HAL_GPIO_Init+0x32c>)
 80111de:	4293      	cmp	r3, r2
 80111e0:	d007      	beq.n	80111f2 <HAL_GPIO_Init+0x20e>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	4a4b      	ldr	r2, [pc, #300]	@ (8011314 <HAL_GPIO_Init+0x330>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d101      	bne.n	80111ee <HAL_GPIO_Init+0x20a>
 80111ea:	2307      	movs	r3, #7
 80111ec:	e00e      	b.n	801120c <HAL_GPIO_Init+0x228>
 80111ee:	2308      	movs	r3, #8
 80111f0:	e00c      	b.n	801120c <HAL_GPIO_Init+0x228>
 80111f2:	2306      	movs	r3, #6
 80111f4:	e00a      	b.n	801120c <HAL_GPIO_Init+0x228>
 80111f6:	2305      	movs	r3, #5
 80111f8:	e008      	b.n	801120c <HAL_GPIO_Init+0x228>
 80111fa:	2304      	movs	r3, #4
 80111fc:	e006      	b.n	801120c <HAL_GPIO_Init+0x228>
 80111fe:	2303      	movs	r3, #3
 8011200:	e004      	b.n	801120c <HAL_GPIO_Init+0x228>
 8011202:	2302      	movs	r3, #2
 8011204:	e002      	b.n	801120c <HAL_GPIO_Init+0x228>
 8011206:	2301      	movs	r3, #1
 8011208:	e000      	b.n	801120c <HAL_GPIO_Init+0x228>
 801120a:	2300      	movs	r3, #0
 801120c:	69fa      	ldr	r2, [r7, #28]
 801120e:	f002 0203 	and.w	r2, r2, #3
 8011212:	0092      	lsls	r2, r2, #2
 8011214:	4093      	lsls	r3, r2
 8011216:	69ba      	ldr	r2, [r7, #24]
 8011218:	4313      	orrs	r3, r2
 801121a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801121c:	4935      	ldr	r1, [pc, #212]	@ (80112f4 <HAL_GPIO_Init+0x310>)
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	089b      	lsrs	r3, r3, #2
 8011222:	3302      	adds	r3, #2
 8011224:	69ba      	ldr	r2, [r7, #24]
 8011226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801122a:	4b3b      	ldr	r3, [pc, #236]	@ (8011318 <HAL_GPIO_Init+0x334>)
 801122c:	689b      	ldr	r3, [r3, #8]
 801122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	43db      	mvns	r3, r3
 8011234:	69ba      	ldr	r2, [r7, #24]
 8011236:	4013      	ands	r3, r2
 8011238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011242:	2b00      	cmp	r3, #0
 8011244:	d003      	beq.n	801124e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8011246:	69ba      	ldr	r2, [r7, #24]
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	4313      	orrs	r3, r2
 801124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801124e:	4a32      	ldr	r2, [pc, #200]	@ (8011318 <HAL_GPIO_Init+0x334>)
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011254:	4b30      	ldr	r3, [pc, #192]	@ (8011318 <HAL_GPIO_Init+0x334>)
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	43db      	mvns	r3, r3
 801125e:	69ba      	ldr	r2, [r7, #24]
 8011260:	4013      	ands	r3, r2
 8011262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801126c:	2b00      	cmp	r3, #0
 801126e:	d003      	beq.n	8011278 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8011270:	69ba      	ldr	r2, [r7, #24]
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	4313      	orrs	r3, r2
 8011276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011278:	4a27      	ldr	r2, [pc, #156]	@ (8011318 <HAL_GPIO_Init+0x334>)
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801127e:	4b26      	ldr	r3, [pc, #152]	@ (8011318 <HAL_GPIO_Init+0x334>)
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	43db      	mvns	r3, r3
 8011288:	69ba      	ldr	r2, [r7, #24]
 801128a:	4013      	ands	r3, r2
 801128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011296:	2b00      	cmp	r3, #0
 8011298:	d003      	beq.n	80112a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801129a:	69ba      	ldr	r2, [r7, #24]
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	4313      	orrs	r3, r2
 80112a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80112a2:	4a1d      	ldr	r2, [pc, #116]	@ (8011318 <HAL_GPIO_Init+0x334>)
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80112a8:	4b1b      	ldr	r3, [pc, #108]	@ (8011318 <HAL_GPIO_Init+0x334>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	43db      	mvns	r3, r3
 80112b2:	69ba      	ldr	r2, [r7, #24]
 80112b4:	4013      	ands	r3, r2
 80112b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d003      	beq.n	80112cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80112c4:	69ba      	ldr	r2, [r7, #24]
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	4313      	orrs	r3, r2
 80112ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80112cc:	4a12      	ldr	r2, [pc, #72]	@ (8011318 <HAL_GPIO_Init+0x334>)
 80112ce:	69bb      	ldr	r3, [r7, #24]
 80112d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	3301      	adds	r3, #1
 80112d6:	61fb      	str	r3, [r7, #28]
 80112d8:	69fb      	ldr	r3, [r7, #28]
 80112da:	2b0f      	cmp	r3, #15
 80112dc:	f67f ae90 	bls.w	8011000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80112e0:	bf00      	nop
 80112e2:	bf00      	nop
 80112e4:	3724      	adds	r7, #36	@ 0x24
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop
 80112f0:	40023800 	.word	0x40023800
 80112f4:	40013800 	.word	0x40013800
 80112f8:	40020000 	.word	0x40020000
 80112fc:	40020400 	.word	0x40020400
 8011300:	40020800 	.word	0x40020800
 8011304:	40020c00 	.word	0x40020c00
 8011308:	40021000 	.word	0x40021000
 801130c:	40021400 	.word	0x40021400
 8011310:	40021800 	.word	0x40021800
 8011314:	40021c00 	.word	0x40021c00
 8011318:	40013c00 	.word	0x40013c00

0801131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	460b      	mov	r3, r1
 8011326:	807b      	strh	r3, [r7, #2]
 8011328:	4613      	mov	r3, r2
 801132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801132c:	787b      	ldrb	r3, [r7, #1]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d003      	beq.n	801133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011332:	887a      	ldrh	r2, [r7, #2]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011338:	e003      	b.n	8011342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801133a:	887b      	ldrh	r3, [r7, #2]
 801133c:	041a      	lsls	r2, r3, #16
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	619a      	str	r2, [r3, #24]
}
 8011342:	bf00      	nop
 8011344:	370c      	adds	r7, #12
 8011346:	46bd      	mov	sp, r7
 8011348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134c:	4770      	bx	lr

0801134e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801134e:	b480      	push	{r7}
 8011350:	b085      	sub	sp, #20
 8011352:	af00      	add	r7, sp, #0
 8011354:	6078      	str	r0, [r7, #4]
 8011356:	460b      	mov	r3, r1
 8011358:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	695b      	ldr	r3, [r3, #20]
 801135e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011360:	887a      	ldrh	r2, [r7, #2]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	4013      	ands	r3, r2
 8011366:	041a      	lsls	r2, r3, #16
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	43d9      	mvns	r1, r3
 801136c:	887b      	ldrh	r3, [r7, #2]
 801136e:	400b      	ands	r3, r1
 8011370:	431a      	orrs	r2, r3
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	619a      	str	r2, [r3, #24]
}
 8011376:	bf00      	nop
 8011378:	3714      	adds	r7, #20
 801137a:	46bd      	mov	sp, r7
 801137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011380:	4770      	bx	lr
	...

08011384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d101      	bne.n	8011396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011392:	2301      	movs	r3, #1
 8011394:	e12b      	b.n	80115ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801139c:	b2db      	uxtb	r3, r3
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d106      	bne.n	80113b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2200      	movs	r2, #0
 80113a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f7ff fae8 	bl	8010980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2224      	movs	r2, #36	@ 0x24
 80113b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	f022 0201 	bic.w	r2, r2, #1
 80113c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80113d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80113e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80113e8:	f002 fc72 	bl	8013cd0 <HAL_RCC_GetPCLK1Freq>
 80113ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	4a81      	ldr	r2, [pc, #516]	@ (80115f8 <HAL_I2C_Init+0x274>)
 80113f4:	4293      	cmp	r3, r2
 80113f6:	d807      	bhi.n	8011408 <HAL_I2C_Init+0x84>
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	4a80      	ldr	r2, [pc, #512]	@ (80115fc <HAL_I2C_Init+0x278>)
 80113fc:	4293      	cmp	r3, r2
 80113fe:	bf94      	ite	ls
 8011400:	2301      	movls	r3, #1
 8011402:	2300      	movhi	r3, #0
 8011404:	b2db      	uxtb	r3, r3
 8011406:	e006      	b.n	8011416 <HAL_I2C_Init+0x92>
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	4a7d      	ldr	r2, [pc, #500]	@ (8011600 <HAL_I2C_Init+0x27c>)
 801140c:	4293      	cmp	r3, r2
 801140e:	bf94      	ite	ls
 8011410:	2301      	movls	r3, #1
 8011412:	2300      	movhi	r3, #0
 8011414:	b2db      	uxtb	r3, r3
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801141a:	2301      	movs	r3, #1
 801141c:	e0e7      	b.n	80115ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	4a78      	ldr	r2, [pc, #480]	@ (8011604 <HAL_I2C_Init+0x280>)
 8011422:	fba2 2303 	umull	r2, r3, r2, r3
 8011426:	0c9b      	lsrs	r3, r3, #18
 8011428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	68ba      	ldr	r2, [r7, #8]
 801143a:	430a      	orrs	r2, r1
 801143c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	6a1b      	ldr	r3, [r3, #32]
 8011444:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	4a6a      	ldr	r2, [pc, #424]	@ (80115f8 <HAL_I2C_Init+0x274>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d802      	bhi.n	8011458 <HAL_I2C_Init+0xd4>
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	3301      	adds	r3, #1
 8011456:	e009      	b.n	801146c <HAL_I2C_Init+0xe8>
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801145e:	fb02 f303 	mul.w	r3, r2, r3
 8011462:	4a69      	ldr	r2, [pc, #420]	@ (8011608 <HAL_I2C_Init+0x284>)
 8011464:	fba2 2303 	umull	r2, r3, r2, r3
 8011468:	099b      	lsrs	r3, r3, #6
 801146a:	3301      	adds	r3, #1
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	6812      	ldr	r2, [r2, #0]
 8011470:	430b      	orrs	r3, r1
 8011472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	69db      	ldr	r3, [r3, #28]
 801147a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 801147e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	495c      	ldr	r1, [pc, #368]	@ (80115f8 <HAL_I2C_Init+0x274>)
 8011488:	428b      	cmp	r3, r1
 801148a:	d819      	bhi.n	80114c0 <HAL_I2C_Init+0x13c>
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	1e59      	subs	r1, r3, #1
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	005b      	lsls	r3, r3, #1
 8011496:	fbb1 f3f3 	udiv	r3, r1, r3
 801149a:	1c59      	adds	r1, r3, #1
 801149c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80114a0:	400b      	ands	r3, r1
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d00a      	beq.n	80114bc <HAL_I2C_Init+0x138>
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	1e59      	subs	r1, r3, #1
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	005b      	lsls	r3, r3, #1
 80114b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80114b4:	3301      	adds	r3, #1
 80114b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114ba:	e051      	b.n	8011560 <HAL_I2C_Init+0x1dc>
 80114bc:	2304      	movs	r3, #4
 80114be:	e04f      	b.n	8011560 <HAL_I2C_Init+0x1dc>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	689b      	ldr	r3, [r3, #8]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d111      	bne.n	80114ec <HAL_I2C_Init+0x168>
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	1e58      	subs	r0, r3, #1
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6859      	ldr	r1, [r3, #4]
 80114d0:	460b      	mov	r3, r1
 80114d2:	005b      	lsls	r3, r3, #1
 80114d4:	440b      	add	r3, r1
 80114d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80114da:	3301      	adds	r3, #1
 80114dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	bf0c      	ite	eq
 80114e4:	2301      	moveq	r3, #1
 80114e6:	2300      	movne	r3, #0
 80114e8:	b2db      	uxtb	r3, r3
 80114ea:	e012      	b.n	8011512 <HAL_I2C_Init+0x18e>
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	1e58      	subs	r0, r3, #1
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6859      	ldr	r1, [r3, #4]
 80114f4:	460b      	mov	r3, r1
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	440b      	add	r3, r1
 80114fa:	0099      	lsls	r1, r3, #2
 80114fc:	440b      	add	r3, r1
 80114fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8011502:	3301      	adds	r3, #1
 8011504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011508:	2b00      	cmp	r3, #0
 801150a:	bf0c      	ite	eq
 801150c:	2301      	moveq	r3, #1
 801150e:	2300      	movne	r3, #0
 8011510:	b2db      	uxtb	r3, r3
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <HAL_I2C_Init+0x196>
 8011516:	2301      	movs	r3, #1
 8011518:	e022      	b.n	8011560 <HAL_I2C_Init+0x1dc>
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	689b      	ldr	r3, [r3, #8]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d10e      	bne.n	8011540 <HAL_I2C_Init+0x1bc>
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	1e58      	subs	r0, r3, #1
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6859      	ldr	r1, [r3, #4]
 801152a:	460b      	mov	r3, r1
 801152c:	005b      	lsls	r3, r3, #1
 801152e:	440b      	add	r3, r1
 8011530:	fbb0 f3f3 	udiv	r3, r0, r3
 8011534:	3301      	adds	r3, #1
 8011536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801153a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801153e:	e00f      	b.n	8011560 <HAL_I2C_Init+0x1dc>
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	1e58      	subs	r0, r3, #1
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6859      	ldr	r1, [r3, #4]
 8011548:	460b      	mov	r3, r1
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	440b      	add	r3, r1
 801154e:	0099      	lsls	r1, r3, #2
 8011550:	440b      	add	r3, r1
 8011552:	fbb0 f3f3 	udiv	r3, r0, r3
 8011556:	3301      	adds	r3, #1
 8011558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801155c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011560:	6879      	ldr	r1, [r7, #4]
 8011562:	6809      	ldr	r1, [r1, #0]
 8011564:	4313      	orrs	r3, r2
 8011566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	69da      	ldr	r2, [r3, #28]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a1b      	ldr	r3, [r3, #32]
 801157a:	431a      	orrs	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	430a      	orrs	r2, r1
 8011582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	689b      	ldr	r3, [r3, #8]
 801158a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 801158e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011592:	687a      	ldr	r2, [r7, #4]
 8011594:	6911      	ldr	r1, [r2, #16]
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	68d2      	ldr	r2, [r2, #12]
 801159a:	4311      	orrs	r1, r2
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	6812      	ldr	r2, [r2, #0]
 80115a0:	430b      	orrs	r3, r1
 80115a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	695a      	ldr	r2, [r3, #20]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	699b      	ldr	r3, [r3, #24]
 80115b6:	431a      	orrs	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	430a      	orrs	r2, r1
 80115be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f042 0201 	orr.w	r2, r2, #1
 80115ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2200      	movs	r2, #0
 80115d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2220      	movs	r2, #32
 80115da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2200      	movs	r2, #0
 80115e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2200      	movs	r2, #0
 80115e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80115ec:	2300      	movs	r3, #0
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3710      	adds	r7, #16
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	000186a0 	.word	0x000186a0
 80115fc:	001e847f 	.word	0x001e847f
 8011600:	003d08ff 	.word	0x003d08ff
 8011604:	431bde83 	.word	0x431bde83
 8011608:	10624dd3 	.word	0x10624dd3

0801160c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b088      	sub	sp, #32
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d101      	bne.n	801161e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801161a:	2301      	movs	r3, #1
 801161c:	e128      	b.n	8011870 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011624:	b2db      	uxtb	r3, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d109      	bne.n	801163e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	4a90      	ldr	r2, [pc, #576]	@ (8011878 <HAL_I2S_Init+0x26c>)
 8011636:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f7ff f9e9 	bl	8010a10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2202      	movs	r2, #2
 8011642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	69db      	ldr	r3, [r3, #28]
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	6812      	ldr	r2, [r2, #0]
 8011650:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8011654:	f023 030f 	bic.w	r3, r3, #15
 8011658:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2202      	movs	r2, #2
 8011660:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	695b      	ldr	r3, [r3, #20]
 8011666:	2b02      	cmp	r3, #2
 8011668:	d060      	beq.n	801172c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d102      	bne.n	8011678 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8011672:	2310      	movs	r3, #16
 8011674:	617b      	str	r3, [r7, #20]
 8011676:	e001      	b.n	801167c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8011678:	2320      	movs	r3, #32
 801167a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	2b20      	cmp	r3, #32
 8011682:	d802      	bhi.n	801168a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	005b      	lsls	r3, r3, #1
 8011688:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 801168a:	2001      	movs	r0, #1
 801168c:	f002 fc16 	bl	8013ebc <HAL_RCCEx_GetPeriphCLKFreq>
 8011690:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	691b      	ldr	r3, [r3, #16]
 8011696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801169a:	d125      	bne.n	80116e8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d010      	beq.n	80116c6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	68fa      	ldr	r2, [r7, #12]
 80116aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80116ae:	4613      	mov	r3, r2
 80116b0:	009b      	lsls	r3, r3, #2
 80116b2:	4413      	add	r3, r2
 80116b4:	005b      	lsls	r3, r3, #1
 80116b6:	461a      	mov	r2, r3
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	695b      	ldr	r3, [r3, #20]
 80116bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80116c0:	3305      	adds	r3, #5
 80116c2:	613b      	str	r3, [r7, #16]
 80116c4:	e01f      	b.n	8011706 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	00db      	lsls	r3, r3, #3
 80116ca:	68fa      	ldr	r2, [r7, #12]
 80116cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80116d0:	4613      	mov	r3, r2
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	4413      	add	r3, r2
 80116d6:	005b      	lsls	r3, r3, #1
 80116d8:	461a      	mov	r2, r3
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	695b      	ldr	r3, [r3, #20]
 80116de:	fbb2 f3f3 	udiv	r3, r2, r3
 80116e2:	3305      	adds	r3, #5
 80116e4:	613b      	str	r3, [r7, #16]
 80116e6:	e00e      	b.n	8011706 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80116f0:	4613      	mov	r3, r2
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4413      	add	r3, r2
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	461a      	mov	r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	695b      	ldr	r3, [r3, #20]
 80116fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8011702:	3305      	adds	r3, #5
 8011704:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	4a5c      	ldr	r2, [pc, #368]	@ (801187c <HAL_I2S_Init+0x270>)
 801170a:	fba2 2303 	umull	r2, r3, r2, r3
 801170e:	08db      	lsrs	r3, r3, #3
 8011710:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	f003 0301 	and.w	r3, r3, #1
 8011718:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 801171a:	693a      	ldr	r2, [r7, #16]
 801171c:	69bb      	ldr	r3, [r7, #24]
 801171e:	1ad3      	subs	r3, r2, r3
 8011720:	085b      	lsrs	r3, r3, #1
 8011722:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	021b      	lsls	r3, r3, #8
 8011728:	61bb      	str	r3, [r7, #24]
 801172a:	e003      	b.n	8011734 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801172c:	2302      	movs	r3, #2
 801172e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8011730:	2300      	movs	r3, #0
 8011732:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	2b01      	cmp	r3, #1
 8011738:	d902      	bls.n	8011740 <HAL_I2S_Init+0x134>
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	2bff      	cmp	r3, #255	@ 0xff
 801173e:	d907      	bls.n	8011750 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011744:	f043 0210 	orr.w	r2, r3, #16
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 801174c:	2301      	movs	r3, #1
 801174e:	e08f      	b.n	8011870 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	691a      	ldr	r2, [r3, #16]
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	ea42 0103 	orr.w	r1, r2, r3
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	69fa      	ldr	r2, [r7, #28]
 8011760:	430a      	orrs	r2, r1
 8011762:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	69db      	ldr	r3, [r3, #28]
 801176a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 801176e:	f023 030f 	bic.w	r3, r3, #15
 8011772:	687a      	ldr	r2, [r7, #4]
 8011774:	6851      	ldr	r1, [r2, #4]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	6892      	ldr	r2, [r2, #8]
 801177a:	4311      	orrs	r1, r2
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	68d2      	ldr	r2, [r2, #12]
 8011780:	4311      	orrs	r1, r2
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	6992      	ldr	r2, [r2, #24]
 8011786:	430a      	orrs	r2, r1
 8011788:	431a      	orrs	r2, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011792:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6a1b      	ldr	r3, [r3, #32]
 8011798:	2b01      	cmp	r3, #1
 801179a:	d161      	bne.n	8011860 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4a38      	ldr	r2, [pc, #224]	@ (8011880 <HAL_I2S_Init+0x274>)
 80117a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	4a37      	ldr	r2, [pc, #220]	@ (8011884 <HAL_I2S_Init+0x278>)
 80117a8:	4293      	cmp	r3, r2
 80117aa:	d101      	bne.n	80117b0 <HAL_I2S_Init+0x1a4>
 80117ac:	4b36      	ldr	r3, [pc, #216]	@ (8011888 <HAL_I2S_Init+0x27c>)
 80117ae:	e001      	b.n	80117b4 <HAL_I2S_Init+0x1a8>
 80117b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80117b4:	69db      	ldr	r3, [r3, #28]
 80117b6:	687a      	ldr	r2, [r7, #4]
 80117b8:	6812      	ldr	r2, [r2, #0]
 80117ba:	4932      	ldr	r1, [pc, #200]	@ (8011884 <HAL_I2S_Init+0x278>)
 80117bc:	428a      	cmp	r2, r1
 80117be:	d101      	bne.n	80117c4 <HAL_I2S_Init+0x1b8>
 80117c0:	4a31      	ldr	r2, [pc, #196]	@ (8011888 <HAL_I2S_Init+0x27c>)
 80117c2:	e001      	b.n	80117c8 <HAL_I2S_Init+0x1bc>
 80117c4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80117c8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80117cc:	f023 030f 	bic.w	r3, r3, #15
 80117d0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	4a2b      	ldr	r2, [pc, #172]	@ (8011884 <HAL_I2S_Init+0x278>)
 80117d8:	4293      	cmp	r3, r2
 80117da:	d101      	bne.n	80117e0 <HAL_I2S_Init+0x1d4>
 80117dc:	4b2a      	ldr	r3, [pc, #168]	@ (8011888 <HAL_I2S_Init+0x27c>)
 80117de:	e001      	b.n	80117e4 <HAL_I2S_Init+0x1d8>
 80117e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80117e4:	2202      	movs	r2, #2
 80117e6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4a25      	ldr	r2, [pc, #148]	@ (8011884 <HAL_I2S_Init+0x278>)
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d101      	bne.n	80117f6 <HAL_I2S_Init+0x1ea>
 80117f2:	4b25      	ldr	r3, [pc, #148]	@ (8011888 <HAL_I2S_Init+0x27c>)
 80117f4:	e001      	b.n	80117fa <HAL_I2S_Init+0x1ee>
 80117f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80117fa:	69db      	ldr	r3, [r3, #28]
 80117fc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011806:	d003      	beq.n	8011810 <HAL_I2S_Init+0x204>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d103      	bne.n	8011818 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8011810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011814:	613b      	str	r3, [r7, #16]
 8011816:	e001      	b.n	801181c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8011818:	2300      	movs	r3, #0
 801181a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	689b      	ldr	r3, [r3, #8]
 8011824:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8011826:	4313      	orrs	r3, r2
 8011828:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	68db      	ldr	r3, [r3, #12]
 801182e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8011830:	4313      	orrs	r3, r2
 8011832:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	699b      	ldr	r3, [r3, #24]
 8011838:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 801183a:	4313      	orrs	r3, r2
 801183c:	b29a      	uxth	r2, r3
 801183e:	897b      	ldrh	r3, [r7, #10]
 8011840:	4313      	orrs	r3, r2
 8011842:	b29b      	uxth	r3, r3
 8011844:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8011848:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	4a0d      	ldr	r2, [pc, #52]	@ (8011884 <HAL_I2S_Init+0x278>)
 8011850:	4293      	cmp	r3, r2
 8011852:	d101      	bne.n	8011858 <HAL_I2S_Init+0x24c>
 8011854:	4b0c      	ldr	r3, [pc, #48]	@ (8011888 <HAL_I2S_Init+0x27c>)
 8011856:	e001      	b.n	801185c <HAL_I2S_Init+0x250>
 8011858:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 801185c:	897a      	ldrh	r2, [r7, #10]
 801185e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2200      	movs	r2, #0
 8011864:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2201      	movs	r2, #1
 801186a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 801186e:	2300      	movs	r3, #0
}
 8011870:	4618      	mov	r0, r3
 8011872:	3720      	adds	r7, #32
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	08011983 	.word	0x08011983
 801187c:	cccccccd 	.word	0xcccccccd
 8011880:	08011a99 	.word	0x08011a99
 8011884:	40003800 	.word	0x40003800
 8011888:	40003400 	.word	0x40003400

0801188c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8011894:	bf00      	nop
 8011896:	370c      	adds	r7, #12
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr

080118a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80118a8:	bf00      	nop
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr

080118b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80118bc:	bf00      	nop
 80118be:	370c      	adds	r7, #12
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr

080118c8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118d4:	881a      	ldrh	r2, [r3, #0]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118e0:	1c9a      	adds	r2, r3, #2
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	3b01      	subs	r3, #1
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d10e      	bne.n	801191c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	685a      	ldr	r2, [r3, #4]
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 801190c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2201      	movs	r2, #1
 8011912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7ff ffb8 	bl	801188c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 801191c:	bf00      	nop
 801191e:	3708      	adds	r7, #8
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	68da      	ldr	r2, [r3, #12]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011936:	b292      	uxth	r2, r2
 8011938:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801193e:	1c9a      	adds	r2, r3, #2
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011948:	b29b      	uxth	r3, r3
 801194a:	3b01      	subs	r3, #1
 801194c:	b29a      	uxth	r2, r3
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011956:	b29b      	uxth	r3, r3
 8011958:	2b00      	cmp	r3, #0
 801195a:	d10e      	bne.n	801197a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	685a      	ldr	r2, [r3, #4]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801196a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2201      	movs	r2, #1
 8011970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7ff ff93 	bl	80118a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 801197a:	bf00      	nop
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8011982:	b580      	push	{r7, lr}
 8011984:	b086      	sub	sp, #24
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	689b      	ldr	r3, [r3, #8]
 8011990:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b04      	cmp	r3, #4
 801199c:	d13a      	bne.n	8011a14 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	f003 0301 	and.w	r3, r3, #1
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d109      	bne.n	80119bc <I2S_IRQHandler+0x3a>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119b2:	2b40      	cmp	r3, #64	@ 0x40
 80119b4:	d102      	bne.n	80119bc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7ff ffb4 	bl	8011924 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119c2:	2b40      	cmp	r3, #64	@ 0x40
 80119c4:	d126      	bne.n	8011a14 <I2S_IRQHandler+0x92>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	f003 0320 	and.w	r3, r3, #32
 80119d0:	2b20      	cmp	r3, #32
 80119d2:	d11f      	bne.n	8011a14 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	685a      	ldr	r2, [r3, #4]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80119e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80119e4:	2300      	movs	r3, #0
 80119e6:	613b      	str	r3, [r7, #16]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	613b      	str	r3, [r7, #16]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	689b      	ldr	r3, [r3, #8]
 80119f6:	613b      	str	r3, [r7, #16]
 80119f8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2201      	movs	r2, #1
 80119fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a06:	f043 0202 	orr.w	r2, r3, #2
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7ff ff50 	bl	80118b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	2b03      	cmp	r3, #3
 8011a1e:	d136      	bne.n	8011a8e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	f003 0302 	and.w	r3, r3, #2
 8011a26:	2b02      	cmp	r3, #2
 8011a28:	d109      	bne.n	8011a3e <I2S_IRQHandler+0xbc>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a34:	2b80      	cmp	r3, #128	@ 0x80
 8011a36:	d102      	bne.n	8011a3e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7ff ff45 	bl	80118c8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	f003 0308 	and.w	r3, r3, #8
 8011a44:	2b08      	cmp	r3, #8
 8011a46:	d122      	bne.n	8011a8e <I2S_IRQHandler+0x10c>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	f003 0320 	and.w	r3, r3, #32
 8011a52:	2b20      	cmp	r3, #32
 8011a54:	d11b      	bne.n	8011a8e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	685a      	ldr	r2, [r3, #4]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011a64:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8011a66:	2300      	movs	r3, #0
 8011a68:	60fb      	str	r3, [r7, #12]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	689b      	ldr	r3, [r3, #8]
 8011a70:	60fb      	str	r3, [r7, #12]
 8011a72:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2201      	movs	r2, #1
 8011a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a80:	f043 0204 	orr.w	r2, r3, #4
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7ff ff13 	bl	80118b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011a8e:	bf00      	nop
 8011a90:	3718      	adds	r7, #24
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
	...

08011a98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b088      	sub	sp, #32
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	689b      	ldr	r3, [r3, #8]
 8011aa6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4a92      	ldr	r2, [pc, #584]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d101      	bne.n	8011ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8011ab2:	4b92      	ldr	r3, [pc, #584]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011ab4:	e001      	b.n	8011aba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8011ab6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011aba:	689b      	ldr	r3, [r3, #8]
 8011abc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	4a8b      	ldr	r2, [pc, #556]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d101      	bne.n	8011ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8011ad0:	4b8a      	ldr	r3, [pc, #552]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011ad2:	e001      	b.n	8011ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8011ad4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ae4:	d004      	beq.n	8011af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	f040 8099 	bne.w	8011c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	f003 0302 	and.w	r3, r3, #2
 8011af6:	2b02      	cmp	r3, #2
 8011af8:	d107      	bne.n	8011b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d002      	beq.n	8011b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f000 f925 	bl	8011d54 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	f003 0301 	and.w	r3, r3, #1
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d107      	bne.n	8011b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d002      	beq.n	8011b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f000 f9c8 	bl	8011eb4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b2a:	2b40      	cmp	r3, #64	@ 0x40
 8011b2c:	d13a      	bne.n	8011ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	f003 0320 	and.w	r3, r3, #32
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d035      	beq.n	8011ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d101      	bne.n	8011b46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8011b42:	4b6e      	ldr	r3, [pc, #440]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011b44:	e001      	b.n	8011b4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8011b46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011b4a:	685a      	ldr	r2, [r3, #4]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4969      	ldr	r1, [pc, #420]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011b52:	428b      	cmp	r3, r1
 8011b54:	d101      	bne.n	8011b5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8011b56:	4b69      	ldr	r3, [pc, #420]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011b58:	e001      	b.n	8011b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8011b5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011b5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011b62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	685a      	ldr	r2, [r3, #4]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011b72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011b74:	2300      	movs	r3, #0
 8011b76:	60fb      	str	r3, [r7, #12]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	68db      	ldr	r3, [r3, #12]
 8011b7e:	60fb      	str	r3, [r7, #12]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	60fb      	str	r3, [r7, #12]
 8011b88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2201      	movs	r2, #1
 8011b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b96:	f043 0202 	orr.w	r2, r3, #2
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f7ff fe88 	bl	80118b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	f003 0308 	and.w	r3, r3, #8
 8011baa:	2b08      	cmp	r3, #8
 8011bac:	f040 80c3 	bne.w	8011d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	f003 0320 	and.w	r3, r3, #32
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f000 80bd 	beq.w	8011d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	685a      	ldr	r2, [r3, #4]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011bca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	4a49      	ldr	r2, [pc, #292]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d101      	bne.n	8011bda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8011bd6:	4b49      	ldr	r3, [pc, #292]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011bd8:	e001      	b.n	8011bde <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8011bda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011bde:	685a      	ldr	r2, [r3, #4]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4944      	ldr	r1, [pc, #272]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011be6:	428b      	cmp	r3, r1
 8011be8:	d101      	bne.n	8011bee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8011bea:	4b44      	ldr	r3, [pc, #272]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011bec:	e001      	b.n	8011bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8011bee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011bf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011bf6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	60bb      	str	r3, [r7, #8]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	689b      	ldr	r3, [r3, #8]
 8011c02:	60bb      	str	r3, [r7, #8]
 8011c04:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2201      	movs	r2, #1
 8011c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c12:	f043 0204 	orr.w	r2, r3, #4
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f7ff fe4a 	bl	80118b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011c20:	e089      	b.n	8011d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	f003 0302 	and.w	r3, r3, #2
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	d107      	bne.n	8011c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d002      	beq.n	8011c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 f8be 	bl	8011db8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	f003 0301 	and.w	r3, r3, #1
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d107      	bne.n	8011c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d002      	beq.n	8011c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f000 f8fd 	bl	8011e50 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011c56:	69fb      	ldr	r3, [r7, #28]
 8011c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c5c:	2b40      	cmp	r3, #64	@ 0x40
 8011c5e:	d12f      	bne.n	8011cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	f003 0320 	and.w	r3, r3, #32
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d02a      	beq.n	8011cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	685a      	ldr	r2, [r3, #4]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011c78:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d101      	bne.n	8011c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8011c84:	4b1d      	ldr	r3, [pc, #116]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011c86:	e001      	b.n	8011c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8011c88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011c8c:	685a      	ldr	r2, [r3, #4]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	4919      	ldr	r1, [pc, #100]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011c94:	428b      	cmp	r3, r1
 8011c96:	d101      	bne.n	8011c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8011c98:	4b18      	ldr	r3, [pc, #96]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011c9a:	e001      	b.n	8011ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8011c9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011ca0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011ca4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2201      	movs	r2, #1
 8011caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cb2:	f043 0202 	orr.w	r2, r3, #2
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f7ff fdfa 	bl	80118b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	f003 0308 	and.w	r3, r3, #8
 8011cc6:	2b08      	cmp	r3, #8
 8011cc8:	d136      	bne.n	8011d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	f003 0320 	and.w	r3, r3, #32
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d031      	beq.n	8011d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	4a07      	ldr	r2, [pc, #28]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	d101      	bne.n	8011ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8011cde:	4b07      	ldr	r3, [pc, #28]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011ce0:	e001      	b.n	8011ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8011ce2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011ce6:	685a      	ldr	r2, [r3, #4]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4902      	ldr	r1, [pc, #8]	@ (8011cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011cee:	428b      	cmp	r3, r1
 8011cf0:	d106      	bne.n	8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8011cf2:	4b02      	ldr	r3, [pc, #8]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011cf4:	e006      	b.n	8011d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8011cf6:	bf00      	nop
 8011cf8:	40003800 	.word	0x40003800
 8011cfc:	40003400 	.word	0x40003400
 8011d00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011d04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011d08:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	685a      	ldr	r2, [r3, #4]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011d18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d26:	f043 0204 	orr.w	r2, r3, #4
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f7ff fdc0 	bl	80118b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011d34:	e000      	b.n	8011d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011d36:	bf00      	nop
}
 8011d38:	bf00      	nop
 8011d3a:	3720      	adds	r7, #32
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8011d48:	bf00      	nop
 8011d4a:	370c      	adds	r7, #12
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr

08011d54 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b082      	sub	sp, #8
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d60:	1c99      	adds	r1, r3, #2
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	6251      	str	r1, [r2, #36]	@ 0x24
 8011d66:	881a      	ldrh	r2, [r3, #0]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	3b01      	subs	r3, #1
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d113      	bne.n	8011dae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	685a      	ldr	r2, [r3, #4]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011d94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d106      	bne.n	8011dae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2201      	movs	r2, #1
 8011da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7ff ffc9 	bl	8011d40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011dae:	bf00      	nop
 8011db0:	3708      	adds	r7, #8
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
	...

08011db8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dc4:	1c99      	adds	r1, r3, #2
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	6251      	str	r1, [r2, #36]	@ 0x24
 8011dca:	8819      	ldrh	r1, [r3, #0]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8011e48 <I2SEx_TxISR_I2SExt+0x90>)
 8011dd2:	4293      	cmp	r3, r2
 8011dd4:	d101      	bne.n	8011dda <I2SEx_TxISR_I2SExt+0x22>
 8011dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8011e4c <I2SEx_TxISR_I2SExt+0x94>)
 8011dd8:	e001      	b.n	8011dde <I2SEx_TxISR_I2SExt+0x26>
 8011dda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011dde:	460a      	mov	r2, r1
 8011de0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	3b01      	subs	r3, #1
 8011dea:	b29a      	uxth	r2, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011df4:	b29b      	uxth	r3, r3
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d121      	bne.n	8011e3e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	4a12      	ldr	r2, [pc, #72]	@ (8011e48 <I2SEx_TxISR_I2SExt+0x90>)
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d101      	bne.n	8011e08 <I2SEx_TxISR_I2SExt+0x50>
 8011e04:	4b11      	ldr	r3, [pc, #68]	@ (8011e4c <I2SEx_TxISR_I2SExt+0x94>)
 8011e06:	e001      	b.n	8011e0c <I2SEx_TxISR_I2SExt+0x54>
 8011e08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011e0c:	685a      	ldr	r2, [r3, #4]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	490d      	ldr	r1, [pc, #52]	@ (8011e48 <I2SEx_TxISR_I2SExt+0x90>)
 8011e14:	428b      	cmp	r3, r1
 8011e16:	d101      	bne.n	8011e1c <I2SEx_TxISR_I2SExt+0x64>
 8011e18:	4b0c      	ldr	r3, [pc, #48]	@ (8011e4c <I2SEx_TxISR_I2SExt+0x94>)
 8011e1a:	e001      	b.n	8011e20 <I2SEx_TxISR_I2SExt+0x68>
 8011e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011e20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011e24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d106      	bne.n	8011e3e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2201      	movs	r2, #1
 8011e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f7ff ff81 	bl	8011d40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011e3e:	bf00      	nop
 8011e40:	3708      	adds	r7, #8
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	40003800 	.word	0x40003800
 8011e4c:	40003400 	.word	0x40003400

08011e50 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	68d8      	ldr	r0, [r3, #12]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e62:	1c99      	adds	r1, r3, #2
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8011e68:	b282      	uxth	r2, r0
 8011e6a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	3b01      	subs	r3, #1
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d113      	bne.n	8011eac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	685a      	ldr	r2, [r3, #4]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011e92:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d106      	bne.n	8011eac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f7ff ff4a 	bl	8011d40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011eac:	bf00      	nop
 8011eae:	3708      	adds	r7, #8
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4a20      	ldr	r2, [pc, #128]	@ (8011f44 <I2SEx_RxISR_I2SExt+0x90>)
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	d101      	bne.n	8011eca <I2SEx_RxISR_I2SExt+0x16>
 8011ec6:	4b20      	ldr	r3, [pc, #128]	@ (8011f48 <I2SEx_RxISR_I2SExt+0x94>)
 8011ec8:	e001      	b.n	8011ece <I2SEx_RxISR_I2SExt+0x1a>
 8011eca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011ece:	68d8      	ldr	r0, [r3, #12]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ed4:	1c99      	adds	r1, r3, #2
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8011eda:	b282      	uxth	r2, r0
 8011edc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ee2:	b29b      	uxth	r3, r3
 8011ee4:	3b01      	subs	r3, #1
 8011ee6:	b29a      	uxth	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d121      	bne.n	8011f3a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4a12      	ldr	r2, [pc, #72]	@ (8011f44 <I2SEx_RxISR_I2SExt+0x90>)
 8011efc:	4293      	cmp	r3, r2
 8011efe:	d101      	bne.n	8011f04 <I2SEx_RxISR_I2SExt+0x50>
 8011f00:	4b11      	ldr	r3, [pc, #68]	@ (8011f48 <I2SEx_RxISR_I2SExt+0x94>)
 8011f02:	e001      	b.n	8011f08 <I2SEx_RxISR_I2SExt+0x54>
 8011f04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011f08:	685a      	ldr	r2, [r3, #4]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	490d      	ldr	r1, [pc, #52]	@ (8011f44 <I2SEx_RxISR_I2SExt+0x90>)
 8011f10:	428b      	cmp	r3, r1
 8011f12:	d101      	bne.n	8011f18 <I2SEx_RxISR_I2SExt+0x64>
 8011f14:	4b0c      	ldr	r3, [pc, #48]	@ (8011f48 <I2SEx_RxISR_I2SExt+0x94>)
 8011f16:	e001      	b.n	8011f1c <I2SEx_RxISR_I2SExt+0x68>
 8011f18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011f1c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011f20:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d106      	bne.n	8011f3a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2201      	movs	r2, #1
 8011f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7ff ff03 	bl	8011d40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011f3a:	bf00      	nop
 8011f3c:	3708      	adds	r7, #8
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	40003800 	.word	0x40003800
 8011f48:	40003400 	.word	0x40003400

08011f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b086      	sub	sp, #24
 8011f50:	af02      	add	r7, sp, #8
 8011f52:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d101      	bne.n	8011f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e101      	b.n	8012162 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d106      	bne.n	8011f7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2200      	movs	r2, #0
 8011f74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f005 fd67 	bl	8017a4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2203      	movs	r2, #3
 8011f82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011f8c:	d102      	bne.n	8011f94 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2200      	movs	r2, #0
 8011f92:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f002 f990 	bl	80142be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6818      	ldr	r0, [r3, #0]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	7c1a      	ldrb	r2, [r3, #16]
 8011fa6:	f88d 2000 	strb.w	r2, [sp]
 8011faa:	3304      	adds	r3, #4
 8011fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fae:	f002 f86e 	bl	801408e <USB_CoreInit>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d005      	beq.n	8011fc4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2202      	movs	r2, #2
 8011fbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	e0ce      	b.n	8012162 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	2100      	movs	r1, #0
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f002 f988 	bl	80142e0 <USB_SetCurrentMode>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d005      	beq.n	8011fe2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2202      	movs	r2, #2
 8011fda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e0bf      	b.n	8012162 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	73fb      	strb	r3, [r7, #15]
 8011fe6:	e04a      	b.n	801207e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011fe8:	7bfa      	ldrb	r2, [r7, #15]
 8011fea:	6879      	ldr	r1, [r7, #4]
 8011fec:	4613      	mov	r3, r2
 8011fee:	00db      	lsls	r3, r3, #3
 8011ff0:	4413      	add	r3, r2
 8011ff2:	009b      	lsls	r3, r3, #2
 8011ff4:	440b      	add	r3, r1
 8011ff6:	3315      	adds	r3, #21
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8011ffc:	7bfa      	ldrb	r2, [r7, #15]
 8011ffe:	6879      	ldr	r1, [r7, #4]
 8012000:	4613      	mov	r3, r2
 8012002:	00db      	lsls	r3, r3, #3
 8012004:	4413      	add	r3, r2
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	440b      	add	r3, r1
 801200a:	3314      	adds	r3, #20
 801200c:	7bfa      	ldrb	r2, [r7, #15]
 801200e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8012010:	7bfa      	ldrb	r2, [r7, #15]
 8012012:	7bfb      	ldrb	r3, [r7, #15]
 8012014:	b298      	uxth	r0, r3
 8012016:	6879      	ldr	r1, [r7, #4]
 8012018:	4613      	mov	r3, r2
 801201a:	00db      	lsls	r3, r3, #3
 801201c:	4413      	add	r3, r2
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	440b      	add	r3, r1
 8012022:	332e      	adds	r3, #46	@ 0x2e
 8012024:	4602      	mov	r2, r0
 8012026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8012028:	7bfa      	ldrb	r2, [r7, #15]
 801202a:	6879      	ldr	r1, [r7, #4]
 801202c:	4613      	mov	r3, r2
 801202e:	00db      	lsls	r3, r3, #3
 8012030:	4413      	add	r3, r2
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	440b      	add	r3, r1
 8012036:	3318      	adds	r3, #24
 8012038:	2200      	movs	r2, #0
 801203a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801203c:	7bfa      	ldrb	r2, [r7, #15]
 801203e:	6879      	ldr	r1, [r7, #4]
 8012040:	4613      	mov	r3, r2
 8012042:	00db      	lsls	r3, r3, #3
 8012044:	4413      	add	r3, r2
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	440b      	add	r3, r1
 801204a:	331c      	adds	r3, #28
 801204c:	2200      	movs	r2, #0
 801204e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8012050:	7bfa      	ldrb	r2, [r7, #15]
 8012052:	6879      	ldr	r1, [r7, #4]
 8012054:	4613      	mov	r3, r2
 8012056:	00db      	lsls	r3, r3, #3
 8012058:	4413      	add	r3, r2
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	440b      	add	r3, r1
 801205e:	3320      	adds	r3, #32
 8012060:	2200      	movs	r2, #0
 8012062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8012064:	7bfa      	ldrb	r2, [r7, #15]
 8012066:	6879      	ldr	r1, [r7, #4]
 8012068:	4613      	mov	r3, r2
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	4413      	add	r3, r2
 801206e:	009b      	lsls	r3, r3, #2
 8012070:	440b      	add	r3, r1
 8012072:	3324      	adds	r3, #36	@ 0x24
 8012074:	2200      	movs	r2, #0
 8012076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012078:	7bfb      	ldrb	r3, [r7, #15]
 801207a:	3301      	adds	r3, #1
 801207c:	73fb      	strb	r3, [r7, #15]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	791b      	ldrb	r3, [r3, #4]
 8012082:	7bfa      	ldrb	r2, [r7, #15]
 8012084:	429a      	cmp	r2, r3
 8012086:	d3af      	bcc.n	8011fe8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012088:	2300      	movs	r3, #0
 801208a:	73fb      	strb	r3, [r7, #15]
 801208c:	e044      	b.n	8012118 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801208e:	7bfa      	ldrb	r2, [r7, #15]
 8012090:	6879      	ldr	r1, [r7, #4]
 8012092:	4613      	mov	r3, r2
 8012094:	00db      	lsls	r3, r3, #3
 8012096:	4413      	add	r3, r2
 8012098:	009b      	lsls	r3, r3, #2
 801209a:	440b      	add	r3, r1
 801209c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80120a0:	2200      	movs	r2, #0
 80120a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80120a4:	7bfa      	ldrb	r2, [r7, #15]
 80120a6:	6879      	ldr	r1, [r7, #4]
 80120a8:	4613      	mov	r3, r2
 80120aa:	00db      	lsls	r3, r3, #3
 80120ac:	4413      	add	r3, r2
 80120ae:	009b      	lsls	r3, r3, #2
 80120b0:	440b      	add	r3, r1
 80120b2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80120b6:	7bfa      	ldrb	r2, [r7, #15]
 80120b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80120ba:	7bfa      	ldrb	r2, [r7, #15]
 80120bc:	6879      	ldr	r1, [r7, #4]
 80120be:	4613      	mov	r3, r2
 80120c0:	00db      	lsls	r3, r3, #3
 80120c2:	4413      	add	r3, r2
 80120c4:	009b      	lsls	r3, r3, #2
 80120c6:	440b      	add	r3, r1
 80120c8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80120cc:	2200      	movs	r2, #0
 80120ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80120d0:	7bfa      	ldrb	r2, [r7, #15]
 80120d2:	6879      	ldr	r1, [r7, #4]
 80120d4:	4613      	mov	r3, r2
 80120d6:	00db      	lsls	r3, r3, #3
 80120d8:	4413      	add	r3, r2
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	440b      	add	r3, r1
 80120de:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80120e2:	2200      	movs	r2, #0
 80120e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80120e6:	7bfa      	ldrb	r2, [r7, #15]
 80120e8:	6879      	ldr	r1, [r7, #4]
 80120ea:	4613      	mov	r3, r2
 80120ec:	00db      	lsls	r3, r3, #3
 80120ee:	4413      	add	r3, r2
 80120f0:	009b      	lsls	r3, r3, #2
 80120f2:	440b      	add	r3, r1
 80120f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80120f8:	2200      	movs	r2, #0
 80120fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80120fc:	7bfa      	ldrb	r2, [r7, #15]
 80120fe:	6879      	ldr	r1, [r7, #4]
 8012100:	4613      	mov	r3, r2
 8012102:	00db      	lsls	r3, r3, #3
 8012104:	4413      	add	r3, r2
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	440b      	add	r3, r1
 801210a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 801210e:	2200      	movs	r2, #0
 8012110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012112:	7bfb      	ldrb	r3, [r7, #15]
 8012114:	3301      	adds	r3, #1
 8012116:	73fb      	strb	r3, [r7, #15]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	791b      	ldrb	r3, [r3, #4]
 801211c:	7bfa      	ldrb	r2, [r7, #15]
 801211e:	429a      	cmp	r2, r3
 8012120:	d3b5      	bcc.n	801208e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6818      	ldr	r0, [r3, #0]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	7c1a      	ldrb	r2, [r3, #16]
 801212a:	f88d 2000 	strb.w	r2, [sp]
 801212e:	3304      	adds	r3, #4
 8012130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012132:	f002 f921 	bl	8014378 <USB_DevInit>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d005      	beq.n	8012148 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2202      	movs	r2, #2
 8012140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8012144:	2301      	movs	r3, #1
 8012146:	e00c      	b.n	8012162 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2200      	movs	r2, #0
 801214c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2201      	movs	r2, #1
 8012152:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	4618      	mov	r0, r3
 801215c:	f003 f96b 	bl	8015436 <USB_DevDisconnect>

  return HAL_OK;
 8012160:	2300      	movs	r3, #0
}
 8012162:	4618      	mov	r0, r3
 8012164:	3710      	adds	r7, #16
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}

0801216a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801216a:	b580      	push	{r7, lr}
 801216c:	b084      	sub	sp, #16
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 801217e:	2b01      	cmp	r3, #1
 8012180:	d101      	bne.n	8012186 <HAL_PCD_Start+0x1c>
 8012182:	2302      	movs	r3, #2
 8012184:	e022      	b.n	80121cc <HAL_PCD_Start+0x62>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2201      	movs	r2, #1
 801218a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012196:	2b00      	cmp	r3, #0
 8012198:	d009      	beq.n	80121ae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d105      	bne.n	80121ae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	4618      	mov	r0, r3
 80121b4:	f002 f872 	bl	801429c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	4618      	mov	r0, r3
 80121be:	f003 f919 	bl	80153f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2200      	movs	r2, #0
 80121c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80121ca:	2300      	movs	r3, #0
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3710      	adds	r7, #16
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80121d4:	b590      	push	{r4, r7, lr}
 80121d6:	b08d      	sub	sp, #52	@ 0x34
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121e2:	6a3b      	ldr	r3, [r7, #32]
 80121e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	4618      	mov	r0, r3
 80121ec:	f003 f9d7 	bl	801559e <USB_GetMode>
 80121f0:	4603      	mov	r3, r0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	f040 848c 	bne.w	8012b10 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	4618      	mov	r0, r3
 80121fe:	f003 f93b 	bl	8015478 <USB_ReadInterrupts>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	f000 8482 	beq.w	8012b0e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 801220a:	69fb      	ldr	r3, [r7, #28]
 801220c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012210:	689b      	ldr	r3, [r3, #8]
 8012212:	0a1b      	lsrs	r3, r3, #8
 8012214:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	4618      	mov	r0, r3
 8012224:	f003 f928 	bl	8015478 <USB_ReadInterrupts>
 8012228:	4603      	mov	r3, r0
 801222a:	f003 0302 	and.w	r3, r3, #2
 801222e:	2b02      	cmp	r3, #2
 8012230:	d107      	bne.n	8012242 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	695a      	ldr	r2, [r3, #20]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	f002 0202 	and.w	r2, r2, #2
 8012240:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	4618      	mov	r0, r3
 8012248:	f003 f916 	bl	8015478 <USB_ReadInterrupts>
 801224c:	4603      	mov	r3, r0
 801224e:	f003 0310 	and.w	r3, r3, #16
 8012252:	2b10      	cmp	r3, #16
 8012254:	d161      	bne.n	801231a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	699a      	ldr	r2, [r3, #24]
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f022 0210 	bic.w	r2, r2, #16
 8012264:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8012266:	6a3b      	ldr	r3, [r7, #32]
 8012268:	6a1b      	ldr	r3, [r3, #32]
 801226a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	f003 020f 	and.w	r2, r3, #15
 8012272:	4613      	mov	r3, r2
 8012274:	00db      	lsls	r3, r3, #3
 8012276:	4413      	add	r3, r2
 8012278:	009b      	lsls	r3, r3, #2
 801227a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	4413      	add	r3, r2
 8012282:	3304      	adds	r3, #4
 8012284:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8012286:	69bb      	ldr	r3, [r7, #24]
 8012288:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 801228c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012290:	d124      	bne.n	80122dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8012292:	69ba      	ldr	r2, [r7, #24]
 8012294:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8012298:	4013      	ands	r3, r2
 801229a:	2b00      	cmp	r3, #0
 801229c:	d035      	beq.n	801230a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	091b      	lsrs	r3, r3, #4
 80122a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80122a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	461a      	mov	r2, r3
 80122b0:	6a38      	ldr	r0, [r7, #32]
 80122b2:	f002 ff4d 	bl	8015150 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	68da      	ldr	r2, [r3, #12]
 80122ba:	69bb      	ldr	r3, [r7, #24]
 80122bc:	091b      	lsrs	r3, r3, #4
 80122be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122c2:	441a      	add	r2, r3
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	695a      	ldr	r2, [r3, #20]
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	091b      	lsrs	r3, r3, #4
 80122d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122d4:	441a      	add	r2, r3
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	615a      	str	r2, [r3, #20]
 80122da:	e016      	b.n	801230a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80122e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80122e6:	d110      	bne.n	801230a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80122ee:	2208      	movs	r2, #8
 80122f0:	4619      	mov	r1, r3
 80122f2:	6a38      	ldr	r0, [r7, #32]
 80122f4:	f002 ff2c 	bl	8015150 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	695a      	ldr	r2, [r3, #20]
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	091b      	lsrs	r3, r3, #4
 8012300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012304:	441a      	add	r2, r3
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	699a      	ldr	r2, [r3, #24]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	f042 0210 	orr.w	r2, r2, #16
 8012318:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	4618      	mov	r0, r3
 8012320:	f003 f8aa 	bl	8015478 <USB_ReadInterrupts>
 8012324:	4603      	mov	r3, r0
 8012326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801232a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801232e:	f040 80a7 	bne.w	8012480 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8012332:	2300      	movs	r3, #0
 8012334:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	4618      	mov	r0, r3
 801233c:	f003 f8af 	bl	801549e <USB_ReadDevAllOutEpInterrupt>
 8012340:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8012342:	e099      	b.n	8012478 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8012344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012346:	f003 0301 	and.w	r3, r3, #1
 801234a:	2b00      	cmp	r3, #0
 801234c:	f000 808e 	beq.w	801246c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012356:	b2d2      	uxtb	r2, r2
 8012358:	4611      	mov	r1, r2
 801235a:	4618      	mov	r0, r3
 801235c:	f003 f8d3 	bl	8015506 <USB_ReadDevOutEPInterrupt>
 8012360:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	f003 0301 	and.w	r3, r3, #1
 8012368:	2b00      	cmp	r3, #0
 801236a:	d00c      	beq.n	8012386 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801236e:	015a      	lsls	r2, r3, #5
 8012370:	69fb      	ldr	r3, [r7, #28]
 8012372:	4413      	add	r3, r2
 8012374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012378:	461a      	mov	r2, r3
 801237a:	2301      	movs	r3, #1
 801237c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801237e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f000 fea3 	bl	80130cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	f003 0308 	and.w	r3, r3, #8
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00c      	beq.n	80123aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8012390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012392:	015a      	lsls	r2, r3, #5
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	4413      	add	r3, r2
 8012398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801239c:	461a      	mov	r2, r3
 801239e:	2308      	movs	r3, #8
 80123a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80123a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 ff79 	bl	801329c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	f003 0310 	and.w	r3, r3, #16
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d008      	beq.n	80123c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80123b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123b6:	015a      	lsls	r2, r3, #5
 80123b8:	69fb      	ldr	r3, [r7, #28]
 80123ba:	4413      	add	r3, r2
 80123bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123c0:	461a      	mov	r2, r3
 80123c2:	2310      	movs	r3, #16
 80123c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	f003 0302 	and.w	r3, r3, #2
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d030      	beq.n	8012432 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80123d0:	6a3b      	ldr	r3, [r7, #32]
 80123d2:	695b      	ldr	r3, [r3, #20]
 80123d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123d8:	2b80      	cmp	r3, #128	@ 0x80
 80123da:	d109      	bne.n	80123f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	69fa      	ldr	r2, [r7, #28]
 80123e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80123ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80123ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80123f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123f2:	4613      	mov	r3, r2
 80123f4:	00db      	lsls	r3, r3, #3
 80123f6:	4413      	add	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	4413      	add	r3, r2
 8012402:	3304      	adds	r3, #4
 8012404:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	78db      	ldrb	r3, [r3, #3]
 801240a:	2b01      	cmp	r3, #1
 801240c:	d108      	bne.n	8012420 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	2200      	movs	r2, #0
 8012412:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8012414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012416:	b2db      	uxtb	r3, r3
 8012418:	4619      	mov	r1, r3
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f005 fc2a 	bl	8017c74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8012420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012422:	015a      	lsls	r2, r3, #5
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	4413      	add	r3, r2
 8012428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801242c:	461a      	mov	r2, r3
 801242e:	2302      	movs	r3, #2
 8012430:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	f003 0320 	and.w	r3, r3, #32
 8012438:	2b00      	cmp	r3, #0
 801243a:	d008      	beq.n	801244e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801243e:	015a      	lsls	r2, r3, #5
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	4413      	add	r3, r2
 8012444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012448:	461a      	mov	r2, r3
 801244a:	2320      	movs	r3, #32
 801244c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012454:	2b00      	cmp	r3, #0
 8012456:	d009      	beq.n	801246c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8012458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801245a:	015a      	lsls	r2, r3, #5
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	4413      	add	r3, r2
 8012460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012464:	461a      	mov	r2, r3
 8012466:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801246a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801246e:	3301      	adds	r3, #1
 8012470:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8012472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012474:	085b      	lsrs	r3, r3, #1
 8012476:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8012478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801247a:	2b00      	cmp	r3, #0
 801247c:	f47f af62 	bne.w	8012344 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	4618      	mov	r0, r3
 8012486:	f002 fff7 	bl	8015478 <USB_ReadInterrupts>
 801248a:	4603      	mov	r3, r0
 801248c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012490:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012494:	f040 80db 	bne.w	801264e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	4618      	mov	r0, r3
 801249e:	f003 f818 	bl	80154d2 <USB_ReadDevAllInEpInterrupt>
 80124a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80124a4:	2300      	movs	r3, #0
 80124a6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80124a8:	e0cd      	b.n	8012646 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80124aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ac:	f003 0301 	and.w	r3, r3, #1
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	f000 80c2 	beq.w	801263a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124bc:	b2d2      	uxtb	r2, r2
 80124be:	4611      	mov	r1, r2
 80124c0:	4618      	mov	r0, r3
 80124c2:	f003 f83e 	bl	8015542 <USB_ReadDevInEPInterrupt>
 80124c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	f003 0301 	and.w	r3, r3, #1
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d057      	beq.n	8012582 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80124d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124d4:	f003 030f 	and.w	r3, r3, #15
 80124d8:	2201      	movs	r2, #1
 80124da:	fa02 f303 	lsl.w	r3, r2, r3
 80124de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80124e0:	69fb      	ldr	r3, [r7, #28]
 80124e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	43db      	mvns	r3, r3
 80124ec:	69f9      	ldr	r1, [r7, #28]
 80124ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80124f2:	4013      	ands	r3, r2
 80124f4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80124f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124f8:	015a      	lsls	r2, r3, #5
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	4413      	add	r3, r2
 80124fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012502:	461a      	mov	r2, r3
 8012504:	2301      	movs	r3, #1
 8012506:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	799b      	ldrb	r3, [r3, #6]
 801250c:	2b01      	cmp	r3, #1
 801250e:	d132      	bne.n	8012576 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8012510:	6879      	ldr	r1, [r7, #4]
 8012512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012514:	4613      	mov	r3, r2
 8012516:	00db      	lsls	r3, r3, #3
 8012518:	4413      	add	r3, r2
 801251a:	009b      	lsls	r3, r3, #2
 801251c:	440b      	add	r3, r1
 801251e:	3320      	adds	r3, #32
 8012520:	6819      	ldr	r1, [r3, #0]
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012526:	4613      	mov	r3, r2
 8012528:	00db      	lsls	r3, r3, #3
 801252a:	4413      	add	r3, r2
 801252c:	009b      	lsls	r3, r3, #2
 801252e:	4403      	add	r3, r0
 8012530:	331c      	adds	r3, #28
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	4419      	add	r1, r3
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801253a:	4613      	mov	r3, r2
 801253c:	00db      	lsls	r3, r3, #3
 801253e:	4413      	add	r3, r2
 8012540:	009b      	lsls	r3, r3, #2
 8012542:	4403      	add	r3, r0
 8012544:	3320      	adds	r3, #32
 8012546:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8012548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254a:	2b00      	cmp	r3, #0
 801254c:	d113      	bne.n	8012576 <HAL_PCD_IRQHandler+0x3a2>
 801254e:	6879      	ldr	r1, [r7, #4]
 8012550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012552:	4613      	mov	r3, r2
 8012554:	00db      	lsls	r3, r3, #3
 8012556:	4413      	add	r3, r2
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	440b      	add	r3, r1
 801255c:	3324      	adds	r3, #36	@ 0x24
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d108      	bne.n	8012576 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6818      	ldr	r0, [r3, #0]
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801256e:	461a      	mov	r2, r3
 8012570:	2101      	movs	r1, #1
 8012572:	f003 f845 	bl	8015600 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8012576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012578:	b2db      	uxtb	r3, r3
 801257a:	4619      	mov	r1, r3
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f005 faf4 	bl	8017b6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	f003 0308 	and.w	r3, r3, #8
 8012588:	2b00      	cmp	r3, #0
 801258a:	d008      	beq.n	801259e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801258e:	015a      	lsls	r2, r3, #5
 8012590:	69fb      	ldr	r3, [r7, #28]
 8012592:	4413      	add	r3, r2
 8012594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012598:	461a      	mov	r2, r3
 801259a:	2308      	movs	r3, #8
 801259c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	f003 0310 	and.w	r3, r3, #16
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d008      	beq.n	80125ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80125a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125aa:	015a      	lsls	r2, r3, #5
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	4413      	add	r3, r2
 80125b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125b4:	461a      	mov	r2, r3
 80125b6:	2310      	movs	r3, #16
 80125b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d008      	beq.n	80125d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80125c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c6:	015a      	lsls	r2, r3, #5
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	4413      	add	r3, r2
 80125cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125d0:	461a      	mov	r2, r3
 80125d2:	2340      	movs	r3, #64	@ 0x40
 80125d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	f003 0302 	and.w	r3, r3, #2
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d023      	beq.n	8012628 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80125e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80125e2:	6a38      	ldr	r0, [r7, #32]
 80125e4:	f002 f82c 	bl	8014640 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80125e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125ea:	4613      	mov	r3, r2
 80125ec:	00db      	lsls	r3, r3, #3
 80125ee:	4413      	add	r3, r2
 80125f0:	009b      	lsls	r3, r3, #2
 80125f2:	3310      	adds	r3, #16
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	4413      	add	r3, r2
 80125f8:	3304      	adds	r3, #4
 80125fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	78db      	ldrb	r3, [r3, #3]
 8012600:	2b01      	cmp	r3, #1
 8012602:	d108      	bne.n	8012616 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	2200      	movs	r2, #0
 8012608:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801260c:	b2db      	uxtb	r3, r3
 801260e:	4619      	mov	r1, r3
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f005 fb41 	bl	8017c98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8012616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012618:	015a      	lsls	r2, r3, #5
 801261a:	69fb      	ldr	r3, [r7, #28]
 801261c:	4413      	add	r3, r2
 801261e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012622:	461a      	mov	r2, r3
 8012624:	2302      	movs	r3, #2
 8012626:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801262e:	2b00      	cmp	r3, #0
 8012630:	d003      	beq.n	801263a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8012632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f000 fcbd 	bl	8012fb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263c:	3301      	adds	r3, #1
 801263e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8012640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012642:	085b      	lsrs	r3, r3, #1
 8012644:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8012646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012648:	2b00      	cmp	r3, #0
 801264a:	f47f af2e 	bne.w	80124aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4618      	mov	r0, r3
 8012654:	f002 ff10 	bl	8015478 <USB_ReadInterrupts>
 8012658:	4603      	mov	r3, r0
 801265a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801265e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012662:	d122      	bne.n	80126aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	69fa      	ldr	r2, [r7, #28]
 801266e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012672:	f023 0301 	bic.w	r3, r3, #1
 8012676:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 801267e:	2b01      	cmp	r3, #1
 8012680:	d108      	bne.n	8012694 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2200      	movs	r2, #0
 8012686:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801268a:	2100      	movs	r1, #0
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f000 fea3 	bl	80133d8 <HAL_PCDEx_LPM_Callback>
 8012692:	e002      	b.n	801269a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f005 fadf 	bl	8017c58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	695a      	ldr	r2, [r3, #20]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80126a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	4618      	mov	r0, r3
 80126b0:	f002 fee2 	bl	8015478 <USB_ReadInterrupts>
 80126b4:	4603      	mov	r3, r0
 80126b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80126ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80126be:	d112      	bne.n	80126e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80126c0:	69fb      	ldr	r3, [r7, #28]
 80126c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126c6:	689b      	ldr	r3, [r3, #8]
 80126c8:	f003 0301 	and.w	r3, r3, #1
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d102      	bne.n	80126d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f005 fa9b 	bl	8017c0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	695a      	ldr	r2, [r3, #20]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80126e4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	4618      	mov	r0, r3
 80126ec:	f002 fec4 	bl	8015478 <USB_ReadInterrupts>
 80126f0:	4603      	mov	r3, r0
 80126f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80126f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80126fa:	f040 80b7 	bne.w	801286c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	69fa      	ldr	r2, [r7, #28]
 8012708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801270c:	f023 0301 	bic.w	r3, r3, #1
 8012710:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	2110      	movs	r1, #16
 8012718:	4618      	mov	r0, r3
 801271a:	f001 ff91 	bl	8014640 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801271e:	2300      	movs	r3, #0
 8012720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012722:	e046      	b.n	80127b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8012724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012726:	015a      	lsls	r2, r3, #5
 8012728:	69fb      	ldr	r3, [r7, #28]
 801272a:	4413      	add	r3, r2
 801272c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012730:	461a      	mov	r2, r3
 8012732:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012736:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801273a:	015a      	lsls	r2, r3, #5
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	4413      	add	r3, r2
 8012740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012748:	0151      	lsls	r1, r2, #5
 801274a:	69fa      	ldr	r2, [r7, #28]
 801274c:	440a      	add	r2, r1
 801274e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012752:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012756:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8012758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801275a:	015a      	lsls	r2, r3, #5
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	4413      	add	r3, r2
 8012760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012764:	461a      	mov	r2, r3
 8012766:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801276a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801276e:	015a      	lsls	r2, r3, #5
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	4413      	add	r3, r2
 8012774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801277c:	0151      	lsls	r1, r2, #5
 801277e:	69fa      	ldr	r2, [r7, #28]
 8012780:	440a      	add	r2, r1
 8012782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012786:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801278a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801278c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801278e:	015a      	lsls	r2, r3, #5
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	4413      	add	r3, r2
 8012794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801279c:	0151      	lsls	r1, r2, #5
 801279e:	69fa      	ldr	r2, [r7, #28]
 80127a0:	440a      	add	r2, r1
 80127a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80127a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80127aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80127ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ae:	3301      	adds	r3, #1
 80127b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	791b      	ldrb	r3, [r3, #4]
 80127b6:	461a      	mov	r2, r3
 80127b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d3b2      	bcc.n	8012724 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127c4:	69db      	ldr	r3, [r3, #28]
 80127c6:	69fa      	ldr	r2, [r7, #28]
 80127c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80127cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80127d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	7bdb      	ldrb	r3, [r3, #15]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d016      	beq.n	8012808 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80127e4:	69fa      	ldr	r2, [r7, #28]
 80127e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80127ea:	f043 030b 	orr.w	r3, r3, #11
 80127ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80127f2:	69fb      	ldr	r3, [r7, #28]
 80127f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127fa:	69fa      	ldr	r2, [r7, #28]
 80127fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012800:	f043 030b 	orr.w	r3, r3, #11
 8012804:	6453      	str	r3, [r2, #68]	@ 0x44
 8012806:	e015      	b.n	8012834 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801280e:	695b      	ldr	r3, [r3, #20]
 8012810:	69fa      	ldr	r2, [r7, #28]
 8012812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012816:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801281a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 801281e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012826:	691b      	ldr	r3, [r3, #16]
 8012828:	69fa      	ldr	r2, [r7, #28]
 801282a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801282e:	f043 030b 	orr.w	r3, r3, #11
 8012832:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	69fa      	ldr	r2, [r7, #28]
 801283e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012842:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012846:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6818      	ldr	r0, [r3, #0]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8012856:	461a      	mov	r2, r3
 8012858:	f002 fed2 	bl	8015600 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	695a      	ldr	r2, [r3, #20]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 801286a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	4618      	mov	r0, r3
 8012872:	f002 fe01 	bl	8015478 <USB_ReadInterrupts>
 8012876:	4603      	mov	r3, r0
 8012878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801287c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012880:	d123      	bne.n	80128ca <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	4618      	mov	r0, r3
 8012888:	f002 fe97 	bl	80155ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4618      	mov	r0, r3
 8012892:	f001 ff4e 	bl	8014732 <USB_GetDevSpeed>
 8012896:	4603      	mov	r3, r0
 8012898:	461a      	mov	r2, r3
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681c      	ldr	r4, [r3, #0]
 80128a2:	f001 fa09 	bl	8013cb8 <HAL_RCC_GetHCLKFreq>
 80128a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80128ac:	461a      	mov	r2, r3
 80128ae:	4620      	mov	r0, r4
 80128b0:	f001 fc52 	bl	8014158 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f005 f980 	bl	8017bba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	695a      	ldr	r2, [r3, #20]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80128c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4618      	mov	r0, r3
 80128d0:	f002 fdd2 	bl	8015478 <USB_ReadInterrupts>
 80128d4:	4603      	mov	r3, r0
 80128d6:	f003 0308 	and.w	r3, r3, #8
 80128da:	2b08      	cmp	r3, #8
 80128dc:	d10a      	bne.n	80128f4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f005 f95d 	bl	8017b9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	695a      	ldr	r2, [r3, #20]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f002 0208 	and.w	r2, r2, #8
 80128f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f002 fdbd 	bl	8015478 <USB_ReadInterrupts>
 80128fe:	4603      	mov	r3, r0
 8012900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012904:	2b80      	cmp	r3, #128	@ 0x80
 8012906:	d123      	bne.n	8012950 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8012908:	6a3b      	ldr	r3, [r7, #32]
 801290a:	699b      	ldr	r3, [r3, #24]
 801290c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012910:	6a3b      	ldr	r3, [r7, #32]
 8012912:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012914:	2301      	movs	r3, #1
 8012916:	627b      	str	r3, [r7, #36]	@ 0x24
 8012918:	e014      	b.n	8012944 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801291a:	6879      	ldr	r1, [r7, #4]
 801291c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801291e:	4613      	mov	r3, r2
 8012920:	00db      	lsls	r3, r3, #3
 8012922:	4413      	add	r3, r2
 8012924:	009b      	lsls	r3, r3, #2
 8012926:	440b      	add	r3, r1
 8012928:	f203 2357 	addw	r3, r3, #599	@ 0x257
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	2b01      	cmp	r3, #1
 8012930:	d105      	bne.n	801293e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8012932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012934:	b2db      	uxtb	r3, r3
 8012936:	4619      	mov	r1, r3
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f000 fb0a 	bl	8012f52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012940:	3301      	adds	r3, #1
 8012942:	627b      	str	r3, [r7, #36]	@ 0x24
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	791b      	ldrb	r3, [r3, #4]
 8012948:	461a      	mov	r2, r3
 801294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801294c:	4293      	cmp	r3, r2
 801294e:	d3e4      	bcc.n	801291a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	4618      	mov	r0, r3
 8012956:	f002 fd8f 	bl	8015478 <USB_ReadInterrupts>
 801295a:	4603      	mov	r3, r0
 801295c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012964:	d13c      	bne.n	80129e0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012966:	2301      	movs	r3, #1
 8012968:	627b      	str	r3, [r7, #36]	@ 0x24
 801296a:	e02b      	b.n	80129c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 801296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801296e:	015a      	lsls	r2, r3, #5
 8012970:	69fb      	ldr	r3, [r7, #28]
 8012972:	4413      	add	r3, r2
 8012974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801297c:	6879      	ldr	r1, [r7, #4]
 801297e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012980:	4613      	mov	r3, r2
 8012982:	00db      	lsls	r3, r3, #3
 8012984:	4413      	add	r3, r2
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	440b      	add	r3, r1
 801298a:	3318      	adds	r3, #24
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	2b01      	cmp	r3, #1
 8012990:	d115      	bne.n	80129be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8012992:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8012994:	2b00      	cmp	r3, #0
 8012996:	da12      	bge.n	80129be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8012998:	6879      	ldr	r1, [r7, #4]
 801299a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801299c:	4613      	mov	r3, r2
 801299e:	00db      	lsls	r3, r3, #3
 80129a0:	4413      	add	r3, r2
 80129a2:	009b      	lsls	r3, r3, #2
 80129a4:	440b      	add	r3, r1
 80129a6:	3317      	adds	r3, #23
 80129a8:	2201      	movs	r2, #1
 80129aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80129ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	4619      	mov	r1, r3
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f000 faca 	bl	8012f52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80129be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129c0:	3301      	adds	r3, #1
 80129c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	791b      	ldrb	r3, [r3, #4]
 80129c8:	461a      	mov	r2, r3
 80129ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d3cd      	bcc.n	801296c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	695a      	ldr	r2, [r3, #20]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80129de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	4618      	mov	r0, r3
 80129e6:	f002 fd47 	bl	8015478 <USB_ReadInterrupts>
 80129ea:	4603      	mov	r3, r0
 80129ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80129f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80129f4:	d156      	bne.n	8012aa4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80129f6:	2301      	movs	r3, #1
 80129f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80129fa:	e045      	b.n	8012a88 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80129fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129fe:	015a      	lsls	r2, r3, #5
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	4413      	add	r3, r2
 8012a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8012a0c:	6879      	ldr	r1, [r7, #4]
 8012a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a10:	4613      	mov	r3, r2
 8012a12:	00db      	lsls	r3, r3, #3
 8012a14:	4413      	add	r3, r2
 8012a16:	009b      	lsls	r3, r3, #2
 8012a18:	440b      	add	r3, r1
 8012a1a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d12e      	bne.n	8012a82 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8012a24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	da2b      	bge.n	8012a82 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8012a2a:	69bb      	ldr	r3, [r7, #24]
 8012a2c:	0c1a      	lsrs	r2, r3, #16
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8012a34:	4053      	eors	r3, r2
 8012a36:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d121      	bne.n	8012a82 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8012a3e:	6879      	ldr	r1, [r7, #4]
 8012a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a42:	4613      	mov	r3, r2
 8012a44:	00db      	lsls	r3, r3, #3
 8012a46:	4413      	add	r3, r2
 8012a48:	009b      	lsls	r3, r3, #2
 8012a4a:	440b      	add	r3, r1
 8012a4c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8012a50:	2201      	movs	r2, #1
 8012a52:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8012a54:	6a3b      	ldr	r3, [r7, #32]
 8012a56:	699b      	ldr	r3, [r3, #24]
 8012a58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012a5c:	6a3b      	ldr	r3, [r7, #32]
 8012a5e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8012a60:	6a3b      	ldr	r3, [r7, #32]
 8012a62:	695b      	ldr	r3, [r3, #20]
 8012a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d10a      	bne.n	8012a82 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8012a6c:	69fb      	ldr	r3, [r7, #28]
 8012a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	69fa      	ldr	r2, [r7, #28]
 8012a76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012a7e:	6053      	str	r3, [r2, #4]
            break;
 8012a80:	e008      	b.n	8012a94 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a84:	3301      	adds	r3, #1
 8012a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	791b      	ldrb	r3, [r3, #4]
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d3b3      	bcc.n	80129fc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	695a      	ldr	r2, [r3, #20]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8012aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f002 fce5 	bl	8015478 <USB_ReadInterrupts>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ab8:	d10a      	bne.n	8012ad0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f005 f8fe 	bl	8017cbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	695a      	ldr	r2, [r3, #20]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8012ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f002 fccf 	bl	8015478 <USB_ReadInterrupts>
 8012ada:	4603      	mov	r3, r0
 8012adc:	f003 0304 	and.w	r3, r3, #4
 8012ae0:	2b04      	cmp	r3, #4
 8012ae2:	d115      	bne.n	8012b10 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	f003 0304 	and.w	r3, r3, #4
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d002      	beq.n	8012afc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f005 f8ee 	bl	8017cd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	6859      	ldr	r1, [r3, #4]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	69ba      	ldr	r2, [r7, #24]
 8012b08:	430a      	orrs	r2, r1
 8012b0a:	605a      	str	r2, [r3, #4]
 8012b0c:	e000      	b.n	8012b10 <HAL_PCD_IRQHandler+0x93c>
      return;
 8012b0e:	bf00      	nop
    }
  }
}
 8012b10:	3734      	adds	r7, #52	@ 0x34
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd90      	pop	{r4, r7, pc}

08012b16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012b16:	b580      	push	{r7, lr}
 8012b18:	b082      	sub	sp, #8
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	6078      	str	r0, [r7, #4]
 8012b1e:	460b      	mov	r3, r1
 8012b20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d101      	bne.n	8012b30 <HAL_PCD_SetAddress+0x1a>
 8012b2c:	2302      	movs	r3, #2
 8012b2e:	e012      	b.n	8012b56 <HAL_PCD_SetAddress+0x40>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2201      	movs	r2, #1
 8012b34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	78fa      	ldrb	r2, [r7, #3]
 8012b3c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	78fa      	ldrb	r2, [r7, #3]
 8012b44:	4611      	mov	r1, r2
 8012b46:	4618      	mov	r0, r3
 8012b48:	f002 fc2e 	bl	80153a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3708      	adds	r7, #8
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012b5e:	b580      	push	{r7, lr}
 8012b60:	b084      	sub	sp, #16
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
 8012b66:	4608      	mov	r0, r1
 8012b68:	4611      	mov	r1, r2
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	70fb      	strb	r3, [r7, #3]
 8012b70:	460b      	mov	r3, r1
 8012b72:	803b      	strh	r3, [r7, #0]
 8012b74:	4613      	mov	r3, r2
 8012b76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012b7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	da0f      	bge.n	8012ba4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012b84:	78fb      	ldrb	r3, [r7, #3]
 8012b86:	f003 020f 	and.w	r2, r3, #15
 8012b8a:	4613      	mov	r3, r2
 8012b8c:	00db      	lsls	r3, r3, #3
 8012b8e:	4413      	add	r3, r2
 8012b90:	009b      	lsls	r3, r3, #2
 8012b92:	3310      	adds	r3, #16
 8012b94:	687a      	ldr	r2, [r7, #4]
 8012b96:	4413      	add	r3, r2
 8012b98:	3304      	adds	r3, #4
 8012b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	705a      	strb	r2, [r3, #1]
 8012ba2:	e00f      	b.n	8012bc4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012ba4:	78fb      	ldrb	r3, [r7, #3]
 8012ba6:	f003 020f 	and.w	r2, r3, #15
 8012baa:	4613      	mov	r3, r2
 8012bac:	00db      	lsls	r3, r3, #3
 8012bae:	4413      	add	r3, r2
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012bb6:	687a      	ldr	r2, [r7, #4]
 8012bb8:	4413      	add	r3, r2
 8012bba:	3304      	adds	r3, #4
 8012bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012bc4:	78fb      	ldrb	r3, [r7, #3]
 8012bc6:	f003 030f 	and.w	r3, r3, #15
 8012bca:	b2da      	uxtb	r2, r3
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8012bd0:	883b      	ldrh	r3, [r7, #0]
 8012bd2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	78ba      	ldrb	r2, [r7, #2]
 8012bde:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	785b      	ldrb	r3, [r3, #1]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d004      	beq.n	8012bf2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	461a      	mov	r2, r3
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8012bf2:	78bb      	ldrb	r3, [r7, #2]
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d102      	bne.n	8012bfe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d101      	bne.n	8012c0c <HAL_PCD_EP_Open+0xae>
 8012c08:	2302      	movs	r3, #2
 8012c0a:	e00e      	b.n	8012c2a <HAL_PCD_EP_Open+0xcc>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2201      	movs	r2, #1
 8012c10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	68f9      	ldr	r1, [r7, #12]
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f001 fdae 	bl	801477c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2200      	movs	r2, #0
 8012c24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8012c28:	7afb      	ldrb	r3, [r7, #11]
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3710      	adds	r7, #16
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd80      	pop	{r7, pc}

08012c32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012c32:	b580      	push	{r7, lr}
 8012c34:	b084      	sub	sp, #16
 8012c36:	af00      	add	r7, sp, #0
 8012c38:	6078      	str	r0, [r7, #4]
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	da0f      	bge.n	8012c66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012c46:	78fb      	ldrb	r3, [r7, #3]
 8012c48:	f003 020f 	and.w	r2, r3, #15
 8012c4c:	4613      	mov	r3, r2
 8012c4e:	00db      	lsls	r3, r3, #3
 8012c50:	4413      	add	r3, r2
 8012c52:	009b      	lsls	r3, r3, #2
 8012c54:	3310      	adds	r3, #16
 8012c56:	687a      	ldr	r2, [r7, #4]
 8012c58:	4413      	add	r3, r2
 8012c5a:	3304      	adds	r3, #4
 8012c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2201      	movs	r2, #1
 8012c62:	705a      	strb	r2, [r3, #1]
 8012c64:	e00f      	b.n	8012c86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012c66:	78fb      	ldrb	r3, [r7, #3]
 8012c68:	f003 020f 	and.w	r2, r3, #15
 8012c6c:	4613      	mov	r3, r2
 8012c6e:	00db      	lsls	r3, r3, #3
 8012c70:	4413      	add	r3, r2
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	3304      	adds	r3, #4
 8012c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2200      	movs	r2, #0
 8012c84:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012c86:	78fb      	ldrb	r3, [r7, #3]
 8012c88:	f003 030f 	and.w	r3, r3, #15
 8012c8c:	b2da      	uxtb	r2, r3
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012c98:	2b01      	cmp	r3, #1
 8012c9a:	d101      	bne.n	8012ca0 <HAL_PCD_EP_Close+0x6e>
 8012c9c:	2302      	movs	r3, #2
 8012c9e:	e00e      	b.n	8012cbe <HAL_PCD_EP_Close+0x8c>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	68f9      	ldr	r1, [r7, #12]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f001 fdec 	bl	801488c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8012cbc:	2300      	movs	r3, #0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3710      	adds	r7, #16
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}

08012cc6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012cc6:	b580      	push	{r7, lr}
 8012cc8:	b086      	sub	sp, #24
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	60f8      	str	r0, [r7, #12]
 8012cce:	607a      	str	r2, [r7, #4]
 8012cd0:	603b      	str	r3, [r7, #0]
 8012cd2:	460b      	mov	r3, r1
 8012cd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012cd6:	7afb      	ldrb	r3, [r7, #11]
 8012cd8:	f003 020f 	and.w	r2, r3, #15
 8012cdc:	4613      	mov	r3, r2
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	4413      	add	r3, r2
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012ce8:	68fa      	ldr	r2, [r7, #12]
 8012cea:	4413      	add	r3, r2
 8012cec:	3304      	adds	r3, #4
 8012cee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	687a      	ldr	r2, [r7, #4]
 8012cf4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	683a      	ldr	r2, [r7, #0]
 8012cfa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	2200      	movs	r2, #0
 8012d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012d08:	7afb      	ldrb	r3, [r7, #11]
 8012d0a:	f003 030f 	and.w	r3, r3, #15
 8012d0e:	b2da      	uxtb	r2, r3
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	799b      	ldrb	r3, [r3, #6]
 8012d18:	2b01      	cmp	r3, #1
 8012d1a:	d102      	bne.n	8012d22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	6818      	ldr	r0, [r3, #0]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	799b      	ldrb	r3, [r3, #6]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	6979      	ldr	r1, [r7, #20]
 8012d2e:	f001 fe89 	bl	8014a44 <USB_EPStartXfer>

  return HAL_OK;
 8012d32:	2300      	movs	r3, #0
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3718      	adds	r7, #24
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	460b      	mov	r3, r1
 8012d46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012d48:	78fb      	ldrb	r3, [r7, #3]
 8012d4a:	f003 020f 	and.w	r2, r3, #15
 8012d4e:	6879      	ldr	r1, [r7, #4]
 8012d50:	4613      	mov	r3, r2
 8012d52:	00db      	lsls	r3, r3, #3
 8012d54:	4413      	add	r3, r2
 8012d56:	009b      	lsls	r3, r3, #2
 8012d58:	440b      	add	r3, r1
 8012d5a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8012d5e:	681b      	ldr	r3, [r3, #0]
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	370c      	adds	r7, #12
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr

08012d6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b086      	sub	sp, #24
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	607a      	str	r2, [r7, #4]
 8012d76:	603b      	str	r3, [r7, #0]
 8012d78:	460b      	mov	r3, r1
 8012d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012d7c:	7afb      	ldrb	r3, [r7, #11]
 8012d7e:	f003 020f 	and.w	r2, r3, #15
 8012d82:	4613      	mov	r3, r2
 8012d84:	00db      	lsls	r3, r3, #3
 8012d86:	4413      	add	r3, r2
 8012d88:	009b      	lsls	r3, r3, #2
 8012d8a:	3310      	adds	r3, #16
 8012d8c:	68fa      	ldr	r2, [r7, #12]
 8012d8e:	4413      	add	r3, r2
 8012d90:	3304      	adds	r3, #4
 8012d92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	683a      	ldr	r2, [r7, #0]
 8012d9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	2200      	movs	r2, #0
 8012da4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8012da6:	697b      	ldr	r3, [r7, #20]
 8012da8:	2201      	movs	r2, #1
 8012daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012dac:	7afb      	ldrb	r3, [r7, #11]
 8012dae:	f003 030f 	and.w	r3, r3, #15
 8012db2:	b2da      	uxtb	r2, r3
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	799b      	ldrb	r3, [r3, #6]
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	d102      	bne.n	8012dc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	6818      	ldr	r0, [r3, #0]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	799b      	ldrb	r3, [r3, #6]
 8012dce:	461a      	mov	r2, r3
 8012dd0:	6979      	ldr	r1, [r7, #20]
 8012dd2:	f001 fe37 	bl	8014a44 <USB_EPStartXfer>

  return HAL_OK;
 8012dd6:	2300      	movs	r3, #0
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3718      	adds	r7, #24
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	460b      	mov	r3, r1
 8012dea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012dec:	78fb      	ldrb	r3, [r7, #3]
 8012dee:	f003 030f 	and.w	r3, r3, #15
 8012df2:	687a      	ldr	r2, [r7, #4]
 8012df4:	7912      	ldrb	r2, [r2, #4]
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d901      	bls.n	8012dfe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	e04f      	b.n	8012e9e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	da0f      	bge.n	8012e26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012e06:	78fb      	ldrb	r3, [r7, #3]
 8012e08:	f003 020f 	and.w	r2, r3, #15
 8012e0c:	4613      	mov	r3, r2
 8012e0e:	00db      	lsls	r3, r3, #3
 8012e10:	4413      	add	r3, r2
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	3310      	adds	r3, #16
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	4413      	add	r3, r2
 8012e1a:	3304      	adds	r3, #4
 8012e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	2201      	movs	r2, #1
 8012e22:	705a      	strb	r2, [r3, #1]
 8012e24:	e00d      	b.n	8012e42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012e26:	78fa      	ldrb	r2, [r7, #3]
 8012e28:	4613      	mov	r3, r2
 8012e2a:	00db      	lsls	r3, r3, #3
 8012e2c:	4413      	add	r3, r2
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	4413      	add	r3, r2
 8012e38:	3304      	adds	r3, #4
 8012e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	2201      	movs	r2, #1
 8012e46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012e48:	78fb      	ldrb	r3, [r7, #3]
 8012e4a:	f003 030f 	and.w	r3, r3, #15
 8012e4e:	b2da      	uxtb	r2, r3
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012e5a:	2b01      	cmp	r3, #1
 8012e5c:	d101      	bne.n	8012e62 <HAL_PCD_EP_SetStall+0x82>
 8012e5e:	2302      	movs	r3, #2
 8012e60:	e01d      	b.n	8012e9e <HAL_PCD_EP_SetStall+0xbe>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2201      	movs	r2, #1
 8012e66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	68f9      	ldr	r1, [r7, #12]
 8012e70:	4618      	mov	r0, r3
 8012e72:	f002 f9c5 	bl	8015200 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8012e76:	78fb      	ldrb	r3, [r7, #3]
 8012e78:	f003 030f 	and.w	r3, r3, #15
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d109      	bne.n	8012e94 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6818      	ldr	r0, [r3, #0]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	7999      	ldrb	r1, [r3, #6]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012e8e:	461a      	mov	r2, r3
 8012e90:	f002 fbb6 	bl	8015600 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2200      	movs	r2, #0
 8012e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8012e9c:	2300      	movs	r3, #0
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3710      	adds	r7, #16
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}

08012ea6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012ea6:	b580      	push	{r7, lr}
 8012ea8:	b084      	sub	sp, #16
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	6078      	str	r0, [r7, #4]
 8012eae:	460b      	mov	r3, r1
 8012eb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8012eb2:	78fb      	ldrb	r3, [r7, #3]
 8012eb4:	f003 030f 	and.w	r3, r3, #15
 8012eb8:	687a      	ldr	r2, [r7, #4]
 8012eba:	7912      	ldrb	r2, [r2, #4]
 8012ebc:	4293      	cmp	r3, r2
 8012ebe:	d901      	bls.n	8012ec4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e042      	b.n	8012f4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	da0f      	bge.n	8012eec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012ecc:	78fb      	ldrb	r3, [r7, #3]
 8012ece:	f003 020f 	and.w	r2, r3, #15
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	00db      	lsls	r3, r3, #3
 8012ed6:	4413      	add	r3, r2
 8012ed8:	009b      	lsls	r3, r3, #2
 8012eda:	3310      	adds	r3, #16
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	4413      	add	r3, r2
 8012ee0:	3304      	adds	r3, #4
 8012ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	705a      	strb	r2, [r3, #1]
 8012eea:	e00f      	b.n	8012f0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012eec:	78fb      	ldrb	r3, [r7, #3]
 8012eee:	f003 020f 	and.w	r2, r3, #15
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	00db      	lsls	r3, r3, #3
 8012ef6:	4413      	add	r3, r2
 8012ef8:	009b      	lsls	r3, r3, #2
 8012efa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	4413      	add	r3, r2
 8012f02:	3304      	adds	r3, #4
 8012f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012f12:	78fb      	ldrb	r3, [r7, #3]
 8012f14:	f003 030f 	and.w	r3, r3, #15
 8012f18:	b2da      	uxtb	r2, r3
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d101      	bne.n	8012f2c <HAL_PCD_EP_ClrStall+0x86>
 8012f28:	2302      	movs	r3, #2
 8012f2a:	e00e      	b.n	8012f4a <HAL_PCD_EP_ClrStall+0xa4>
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2201      	movs	r2, #1
 8012f30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	68f9      	ldr	r1, [r7, #12]
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f002 f9ce 	bl	80152dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2200      	movs	r2, #0
 8012f44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8012f48:	2300      	movs	r3, #0
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3710      	adds	r7, #16
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}

08012f52 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012f52:	b580      	push	{r7, lr}
 8012f54:	b084      	sub	sp, #16
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	6078      	str	r0, [r7, #4]
 8012f5a:	460b      	mov	r3, r1
 8012f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8012f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	da0c      	bge.n	8012f80 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012f66:	78fb      	ldrb	r3, [r7, #3]
 8012f68:	f003 020f 	and.w	r2, r3, #15
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	00db      	lsls	r3, r3, #3
 8012f70:	4413      	add	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	3310      	adds	r3, #16
 8012f76:	687a      	ldr	r2, [r7, #4]
 8012f78:	4413      	add	r3, r2
 8012f7a:	3304      	adds	r3, #4
 8012f7c:	60fb      	str	r3, [r7, #12]
 8012f7e:	e00c      	b.n	8012f9a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012f80:	78fb      	ldrb	r3, [r7, #3]
 8012f82:	f003 020f 	and.w	r2, r3, #15
 8012f86:	4613      	mov	r3, r2
 8012f88:	00db      	lsls	r3, r3, #3
 8012f8a:	4413      	add	r3, r2
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	4413      	add	r3, r2
 8012f96:	3304      	adds	r3, #4
 8012f98:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	68f9      	ldr	r1, [r7, #12]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f001 ffed 	bl	8014f80 <USB_EPStopXfer>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8012faa:	7afb      	ldrb	r3, [r7, #11]
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	3710      	adds	r7, #16
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b08a      	sub	sp, #40	@ 0x28
 8012fb8:	af02      	add	r7, sp, #8
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8012fc8:	683a      	ldr	r2, [r7, #0]
 8012fca:	4613      	mov	r3, r2
 8012fcc:	00db      	lsls	r3, r3, #3
 8012fce:	4413      	add	r3, r2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	3310      	adds	r3, #16
 8012fd4:	687a      	ldr	r2, [r7, #4]
 8012fd6:	4413      	add	r3, r2
 8012fd8:	3304      	adds	r3, #4
 8012fda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	695a      	ldr	r2, [r3, #20]
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	691b      	ldr	r3, [r3, #16]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d901      	bls.n	8012fec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8012fe8:	2301      	movs	r3, #1
 8012fea:	e06b      	b.n	80130c4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	691a      	ldr	r2, [r3, #16]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	695b      	ldr	r3, [r3, #20]
 8012ff4:	1ad3      	subs	r3, r2, r3
 8012ff6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	689b      	ldr	r3, [r3, #8]
 8012ffc:	69fa      	ldr	r2, [r7, #28]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d902      	bls.n	8013008 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	689b      	ldr	r3, [r3, #8]
 8013006:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	3303      	adds	r3, #3
 801300c:	089b      	lsrs	r3, r3, #2
 801300e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8013010:	e02a      	b.n	8013068 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	691a      	ldr	r2, [r3, #16]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	695b      	ldr	r3, [r3, #20]
 801301a:	1ad3      	subs	r3, r2, r3
 801301c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	689b      	ldr	r3, [r3, #8]
 8013022:	69fa      	ldr	r2, [r7, #28]
 8013024:	429a      	cmp	r2, r3
 8013026:	d902      	bls.n	801302e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	689b      	ldr	r3, [r3, #8]
 801302c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	3303      	adds	r3, #3
 8013032:	089b      	lsrs	r3, r3, #2
 8013034:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	68d9      	ldr	r1, [r3, #12]
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	b2da      	uxtb	r2, r3
 801303e:	69fb      	ldr	r3, [r7, #28]
 8013040:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8013046:	9300      	str	r3, [sp, #0]
 8013048:	4603      	mov	r3, r0
 801304a:	6978      	ldr	r0, [r7, #20]
 801304c:	f002 f842 	bl	80150d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	68da      	ldr	r2, [r3, #12]
 8013054:	69fb      	ldr	r3, [r7, #28]
 8013056:	441a      	add	r2, r3
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	695a      	ldr	r2, [r3, #20]
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	441a      	add	r2, r3
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	015a      	lsls	r2, r3, #5
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	4413      	add	r3, r2
 8013070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013074:	699b      	ldr	r3, [r3, #24]
 8013076:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8013078:	69ba      	ldr	r2, [r7, #24]
 801307a:	429a      	cmp	r2, r3
 801307c:	d809      	bhi.n	8013092 <PCD_WriteEmptyTxFifo+0xde>
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	695a      	ldr	r2, [r3, #20]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8013086:	429a      	cmp	r2, r3
 8013088:	d203      	bcs.n	8013092 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	691b      	ldr	r3, [r3, #16]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d1bf      	bne.n	8013012 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	691a      	ldr	r2, [r3, #16]
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	695b      	ldr	r3, [r3, #20]
 801309a:	429a      	cmp	r2, r3
 801309c:	d811      	bhi.n	80130c2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	f003 030f 	and.w	r3, r3, #15
 80130a4:	2201      	movs	r2, #1
 80130a6:	fa02 f303 	lsl.w	r3, r2, r3
 80130aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	43db      	mvns	r3, r3
 80130b8:	6939      	ldr	r1, [r7, #16]
 80130ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80130be:	4013      	ands	r3, r2
 80130c0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80130c2:	2300      	movs	r3, #0
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3720      	adds	r7, #32
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b088      	sub	sp, #32
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	333c      	adds	r3, #60	@ 0x3c
 80130e4:	3304      	adds	r3, #4
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	015a      	lsls	r2, r3, #5
 80130ee:	69bb      	ldr	r3, [r7, #24]
 80130f0:	4413      	add	r3, r2
 80130f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130f6:	689b      	ldr	r3, [r3, #8]
 80130f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	799b      	ldrb	r3, [r3, #6]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d17b      	bne.n	80131fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	f003 0308 	and.w	r3, r3, #8
 8013108:	2b00      	cmp	r3, #0
 801310a:	d015      	beq.n	8013138 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	4a61      	ldr	r2, [pc, #388]	@ (8013294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8013110:	4293      	cmp	r3, r2
 8013112:	f240 80b9 	bls.w	8013288 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801311c:	2b00      	cmp	r3, #0
 801311e:	f000 80b3 	beq.w	8013288 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	015a      	lsls	r2, r3, #5
 8013126:	69bb      	ldr	r3, [r7, #24]
 8013128:	4413      	add	r3, r2
 801312a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801312e:	461a      	mov	r2, r3
 8013130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013134:	6093      	str	r3, [r2, #8]
 8013136:	e0a7      	b.n	8013288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	f003 0320 	and.w	r3, r3, #32
 801313e:	2b00      	cmp	r3, #0
 8013140:	d009      	beq.n	8013156 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	015a      	lsls	r2, r3, #5
 8013146:	69bb      	ldr	r3, [r7, #24]
 8013148:	4413      	add	r3, r2
 801314a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801314e:	461a      	mov	r2, r3
 8013150:	2320      	movs	r3, #32
 8013152:	6093      	str	r3, [r2, #8]
 8013154:	e098      	b.n	8013288 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 801315c:	2b00      	cmp	r3, #0
 801315e:	f040 8093 	bne.w	8013288 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	4a4b      	ldr	r2, [pc, #300]	@ (8013294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8013166:	4293      	cmp	r3, r2
 8013168:	d90f      	bls.n	801318a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013170:	2b00      	cmp	r3, #0
 8013172:	d00a      	beq.n	801318a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	015a      	lsls	r2, r3, #5
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	4413      	add	r3, r2
 801317c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013180:	461a      	mov	r2, r3
 8013182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013186:	6093      	str	r3, [r2, #8]
 8013188:	e07e      	b.n	8013288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 801318a:	683a      	ldr	r2, [r7, #0]
 801318c:	4613      	mov	r3, r2
 801318e:	00db      	lsls	r3, r3, #3
 8013190:	4413      	add	r3, r2
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	4413      	add	r3, r2
 801319c:	3304      	adds	r3, #4
 801319e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	6a1a      	ldr	r2, [r3, #32]
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	0159      	lsls	r1, r3, #5
 80131a8:	69bb      	ldr	r3, [r7, #24]
 80131aa:	440b      	add	r3, r1
 80131ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131b0:	691b      	ldr	r3, [r3, #16]
 80131b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80131b6:	1ad2      	subs	r2, r2, r3
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d114      	bne.n	80131ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	691b      	ldr	r3, [r3, #16]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d109      	bne.n	80131de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6818      	ldr	r0, [r3, #0]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80131d4:	461a      	mov	r2, r3
 80131d6:	2101      	movs	r1, #1
 80131d8:	f002 fa12 	bl	8015600 <USB_EP0_OutStart>
 80131dc:	e006      	b.n	80131ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	68da      	ldr	r2, [r3, #12]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	695b      	ldr	r3, [r3, #20]
 80131e6:	441a      	add	r2, r3
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	b2db      	uxtb	r3, r3
 80131f0:	4619      	mov	r1, r3
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f004 fc9e 	bl	8017b34 <HAL_PCD_DataOutStageCallback>
 80131f8:	e046      	b.n	8013288 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	4a26      	ldr	r2, [pc, #152]	@ (8013298 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d124      	bne.n	801324c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00a      	beq.n	8013222 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	015a      	lsls	r2, r3, #5
 8013210:	69bb      	ldr	r3, [r7, #24]
 8013212:	4413      	add	r3, r2
 8013214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013218:	461a      	mov	r2, r3
 801321a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801321e:	6093      	str	r3, [r2, #8]
 8013220:	e032      	b.n	8013288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	f003 0320 	and.w	r3, r3, #32
 8013228:	2b00      	cmp	r3, #0
 801322a:	d008      	beq.n	801323e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	015a      	lsls	r2, r3, #5
 8013230:	69bb      	ldr	r3, [r7, #24]
 8013232:	4413      	add	r3, r2
 8013234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013238:	461a      	mov	r2, r3
 801323a:	2320      	movs	r3, #32
 801323c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	b2db      	uxtb	r3, r3
 8013242:	4619      	mov	r1, r3
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f004 fc75 	bl	8017b34 <HAL_PCD_DataOutStageCallback>
 801324a:	e01d      	b.n	8013288 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d114      	bne.n	801327c <PCD_EP_OutXfrComplete_int+0x1b0>
 8013252:	6879      	ldr	r1, [r7, #4]
 8013254:	683a      	ldr	r2, [r7, #0]
 8013256:	4613      	mov	r3, r2
 8013258:	00db      	lsls	r3, r3, #3
 801325a:	4413      	add	r3, r2
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	440b      	add	r3, r1
 8013260:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d108      	bne.n	801327c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6818      	ldr	r0, [r3, #0]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013274:	461a      	mov	r2, r3
 8013276:	2100      	movs	r1, #0
 8013278:	f002 f9c2 	bl	8015600 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	b2db      	uxtb	r3, r3
 8013280:	4619      	mov	r1, r3
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f004 fc56 	bl	8017b34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8013288:	2300      	movs	r3, #0
}
 801328a:	4618      	mov	r0, r3
 801328c:	3720      	adds	r7, #32
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	4f54300a 	.word	0x4f54300a
 8013298:	4f54310a 	.word	0x4f54310a

0801329c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b086      	sub	sp, #24
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	333c      	adds	r3, #60	@ 0x3c
 80132b4:	3304      	adds	r3, #4
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	015a      	lsls	r2, r3, #5
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	4413      	add	r3, r2
 80132c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132c6:	689b      	ldr	r3, [r3, #8]
 80132c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	4a15      	ldr	r2, [pc, #84]	@ (8013324 <PCD_EP_OutSetupPacket_int+0x88>)
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d90e      	bls.n	80132f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d009      	beq.n	80132f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	015a      	lsls	r2, r3, #5
 80132e0:	693b      	ldr	r3, [r7, #16]
 80132e2:	4413      	add	r3, r2
 80132e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132e8:	461a      	mov	r2, r3
 80132ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80132ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f004 fc0d 	bl	8017b10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	4a0a      	ldr	r2, [pc, #40]	@ (8013324 <PCD_EP_OutSetupPacket_int+0x88>)
 80132fa:	4293      	cmp	r3, r2
 80132fc:	d90c      	bls.n	8013318 <PCD_EP_OutSetupPacket_int+0x7c>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	799b      	ldrb	r3, [r3, #6]
 8013302:	2b01      	cmp	r3, #1
 8013304:	d108      	bne.n	8013318 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	6818      	ldr	r0, [r3, #0]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013310:	461a      	mov	r2, r3
 8013312:	2101      	movs	r1, #1
 8013314:	f002 f974 	bl	8015600 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8013318:	2300      	movs	r3, #0
}
 801331a:	4618      	mov	r0, r3
 801331c:	3718      	adds	r7, #24
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	4f54300a 	.word	0x4f54300a

08013328 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8013328:	b480      	push	{r7}
 801332a:	b085      	sub	sp, #20
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	460b      	mov	r3, r1
 8013332:	70fb      	strb	r3, [r7, #3]
 8013334:	4613      	mov	r3, r2
 8013336:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801333e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8013340:	78fb      	ldrb	r3, [r7, #3]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d107      	bne.n	8013356 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8013346:	883b      	ldrh	r3, [r7, #0]
 8013348:	0419      	lsls	r1, r3, #16
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	68ba      	ldr	r2, [r7, #8]
 8013350:	430a      	orrs	r2, r1
 8013352:	629a      	str	r2, [r3, #40]	@ 0x28
 8013354:	e028      	b.n	80133a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801335c:	0c1b      	lsrs	r3, r3, #16
 801335e:	68ba      	ldr	r2, [r7, #8]
 8013360:	4413      	add	r3, r2
 8013362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8013364:	2300      	movs	r3, #0
 8013366:	73fb      	strb	r3, [r7, #15]
 8013368:	e00d      	b.n	8013386 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681a      	ldr	r2, [r3, #0]
 801336e:	7bfb      	ldrb	r3, [r7, #15]
 8013370:	3340      	adds	r3, #64	@ 0x40
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	4413      	add	r3, r2
 8013376:	685b      	ldr	r3, [r3, #4]
 8013378:	0c1b      	lsrs	r3, r3, #16
 801337a:	68ba      	ldr	r2, [r7, #8]
 801337c:	4413      	add	r3, r2
 801337e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8013380:	7bfb      	ldrb	r3, [r7, #15]
 8013382:	3301      	adds	r3, #1
 8013384:	73fb      	strb	r3, [r7, #15]
 8013386:	7bfa      	ldrb	r2, [r7, #15]
 8013388:	78fb      	ldrb	r3, [r7, #3]
 801338a:	3b01      	subs	r3, #1
 801338c:	429a      	cmp	r2, r3
 801338e:	d3ec      	bcc.n	801336a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8013390:	883b      	ldrh	r3, [r7, #0]
 8013392:	0418      	lsls	r0, r3, #16
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6819      	ldr	r1, [r3, #0]
 8013398:	78fb      	ldrb	r3, [r7, #3]
 801339a:	3b01      	subs	r3, #1
 801339c:	68ba      	ldr	r2, [r7, #8]
 801339e:	4302      	orrs	r2, r0
 80133a0:	3340      	adds	r3, #64	@ 0x40
 80133a2:	009b      	lsls	r3, r3, #2
 80133a4:	440b      	add	r3, r1
 80133a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80133a8:	2300      	movs	r3, #0
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3714      	adds	r7, #20
 80133ae:	46bd      	mov	sp, r7
 80133b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b4:	4770      	bx	lr

080133b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80133b6:	b480      	push	{r7}
 80133b8:	b083      	sub	sp, #12
 80133ba:	af00      	add	r7, sp, #0
 80133bc:	6078      	str	r0, [r7, #4]
 80133be:	460b      	mov	r3, r1
 80133c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	887a      	ldrh	r2, [r7, #2]
 80133c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80133ca:	2300      	movs	r3, #0
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	370c      	adds	r7, #12
 80133d0:	46bd      	mov	sp, r7
 80133d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d6:	4770      	bx	lr

080133d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	460b      	mov	r3, r1
 80133e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80133e4:	bf00      	nop
 80133e6:	370c      	adds	r7, #12
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr

080133f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b086      	sub	sp, #24
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d101      	bne.n	8013402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80133fe:	2301      	movs	r3, #1
 8013400:	e267      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	f003 0301 	and.w	r3, r3, #1
 801340a:	2b00      	cmp	r3, #0
 801340c:	d075      	beq.n	80134fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801340e:	4b88      	ldr	r3, [pc, #544]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013410:	689b      	ldr	r3, [r3, #8]
 8013412:	f003 030c 	and.w	r3, r3, #12
 8013416:	2b04      	cmp	r3, #4
 8013418:	d00c      	beq.n	8013434 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801341a:	4b85      	ldr	r3, [pc, #532]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 801341c:	689b      	ldr	r3, [r3, #8]
 801341e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8013422:	2b08      	cmp	r3, #8
 8013424:	d112      	bne.n	801344c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013426:	4b82      	ldr	r3, [pc, #520]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801342e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013432:	d10b      	bne.n	801344c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013434:	4b7e      	ldr	r3, [pc, #504]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801343c:	2b00      	cmp	r3, #0
 801343e:	d05b      	beq.n	80134f8 <HAL_RCC_OscConfig+0x108>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d157      	bne.n	80134f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013448:	2301      	movs	r3, #1
 801344a:	e242      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013454:	d106      	bne.n	8013464 <HAL_RCC_OscConfig+0x74>
 8013456:	4b76      	ldr	r3, [pc, #472]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	4a75      	ldr	r2, [pc, #468]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 801345c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013460:	6013      	str	r3, [r2, #0]
 8013462:	e01d      	b.n	80134a0 <HAL_RCC_OscConfig+0xb0>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	685b      	ldr	r3, [r3, #4]
 8013468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801346c:	d10c      	bne.n	8013488 <HAL_RCC_OscConfig+0x98>
 801346e:	4b70      	ldr	r3, [pc, #448]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	4a6f      	ldr	r2, [pc, #444]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013478:	6013      	str	r3, [r2, #0]
 801347a:	4b6d      	ldr	r3, [pc, #436]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	4a6c      	ldr	r2, [pc, #432]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013484:	6013      	str	r3, [r2, #0]
 8013486:	e00b      	b.n	80134a0 <HAL_RCC_OscConfig+0xb0>
 8013488:	4b69      	ldr	r3, [pc, #420]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	4a68      	ldr	r2, [pc, #416]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 801348e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013492:	6013      	str	r3, [r2, #0]
 8013494:	4b66      	ldr	r3, [pc, #408]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	4a65      	ldr	r2, [pc, #404]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 801349a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801349e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	685b      	ldr	r3, [r3, #4]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d013      	beq.n	80134d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134a8:	f7fd fc5a 	bl	8010d60 <HAL_GetTick>
 80134ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80134ae:	e008      	b.n	80134c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80134b0:	f7fd fc56 	bl	8010d60 <HAL_GetTick>
 80134b4:	4602      	mov	r2, r0
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	1ad3      	subs	r3, r2, r3
 80134ba:	2b64      	cmp	r3, #100	@ 0x64
 80134bc:	d901      	bls.n	80134c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80134be:	2303      	movs	r3, #3
 80134c0:	e207      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80134c2:	4b5b      	ldr	r3, [pc, #364]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d0f0      	beq.n	80134b0 <HAL_RCC_OscConfig+0xc0>
 80134ce:	e014      	b.n	80134fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134d0:	f7fd fc46 	bl	8010d60 <HAL_GetTick>
 80134d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80134d6:	e008      	b.n	80134ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80134d8:	f7fd fc42 	bl	8010d60 <HAL_GetTick>
 80134dc:	4602      	mov	r2, r0
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	1ad3      	subs	r3, r2, r3
 80134e2:	2b64      	cmp	r3, #100	@ 0x64
 80134e4:	d901      	bls.n	80134ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80134e6:	2303      	movs	r3, #3
 80134e8:	e1f3      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80134ea:	4b51      	ldr	r3, [pc, #324]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d1f0      	bne.n	80134d8 <HAL_RCC_OscConfig+0xe8>
 80134f6:	e000      	b.n	80134fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80134f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	f003 0302 	and.w	r3, r3, #2
 8013502:	2b00      	cmp	r3, #0
 8013504:	d063      	beq.n	80135ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8013506:	4b4a      	ldr	r3, [pc, #296]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013508:	689b      	ldr	r3, [r3, #8]
 801350a:	f003 030c 	and.w	r3, r3, #12
 801350e:	2b00      	cmp	r3, #0
 8013510:	d00b      	beq.n	801352a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013512:	4b47      	ldr	r3, [pc, #284]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013514:	689b      	ldr	r3, [r3, #8]
 8013516:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801351a:	2b08      	cmp	r3, #8
 801351c:	d11c      	bne.n	8013558 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801351e:	4b44      	ldr	r3, [pc, #272]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013526:	2b00      	cmp	r3, #0
 8013528:	d116      	bne.n	8013558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801352a:	4b41      	ldr	r3, [pc, #260]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	f003 0302 	and.w	r3, r3, #2
 8013532:	2b00      	cmp	r3, #0
 8013534:	d005      	beq.n	8013542 <HAL_RCC_OscConfig+0x152>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	68db      	ldr	r3, [r3, #12]
 801353a:	2b01      	cmp	r3, #1
 801353c:	d001      	beq.n	8013542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801353e:	2301      	movs	r3, #1
 8013540:	e1c7      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013542:	4b3b      	ldr	r3, [pc, #236]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	691b      	ldr	r3, [r3, #16]
 801354e:	00db      	lsls	r3, r3, #3
 8013550:	4937      	ldr	r1, [pc, #220]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013552:	4313      	orrs	r3, r2
 8013554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013556:	e03a      	b.n	80135ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	68db      	ldr	r3, [r3, #12]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d020      	beq.n	80135a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013560:	4b34      	ldr	r3, [pc, #208]	@ (8013634 <HAL_RCC_OscConfig+0x244>)
 8013562:	2201      	movs	r2, #1
 8013564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013566:	f7fd fbfb 	bl	8010d60 <HAL_GetTick>
 801356a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801356c:	e008      	b.n	8013580 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801356e:	f7fd fbf7 	bl	8010d60 <HAL_GetTick>
 8013572:	4602      	mov	r2, r0
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	2b02      	cmp	r3, #2
 801357a:	d901      	bls.n	8013580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801357c:	2303      	movs	r3, #3
 801357e:	e1a8      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013580:	4b2b      	ldr	r3, [pc, #172]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f003 0302 	and.w	r3, r3, #2
 8013588:	2b00      	cmp	r3, #0
 801358a:	d0f0      	beq.n	801356e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801358c:	4b28      	ldr	r3, [pc, #160]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	691b      	ldr	r3, [r3, #16]
 8013598:	00db      	lsls	r3, r3, #3
 801359a:	4925      	ldr	r1, [pc, #148]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 801359c:	4313      	orrs	r3, r2
 801359e:	600b      	str	r3, [r1, #0]
 80135a0:	e015      	b.n	80135ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80135a2:	4b24      	ldr	r3, [pc, #144]	@ (8013634 <HAL_RCC_OscConfig+0x244>)
 80135a4:	2200      	movs	r2, #0
 80135a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135a8:	f7fd fbda 	bl	8010d60 <HAL_GetTick>
 80135ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80135ae:	e008      	b.n	80135c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80135b0:	f7fd fbd6 	bl	8010d60 <HAL_GetTick>
 80135b4:	4602      	mov	r2, r0
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	1ad3      	subs	r3, r2, r3
 80135ba:	2b02      	cmp	r3, #2
 80135bc:	d901      	bls.n	80135c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80135be:	2303      	movs	r3, #3
 80135c0:	e187      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80135c2:	4b1b      	ldr	r3, [pc, #108]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	f003 0302 	and.w	r3, r3, #2
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d1f0      	bne.n	80135b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	f003 0308 	and.w	r3, r3, #8
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d036      	beq.n	8013648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	695b      	ldr	r3, [r3, #20]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d016      	beq.n	8013610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80135e2:	4b15      	ldr	r3, [pc, #84]	@ (8013638 <HAL_RCC_OscConfig+0x248>)
 80135e4:	2201      	movs	r2, #1
 80135e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80135e8:	f7fd fbba 	bl	8010d60 <HAL_GetTick>
 80135ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80135ee:	e008      	b.n	8013602 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80135f0:	f7fd fbb6 	bl	8010d60 <HAL_GetTick>
 80135f4:	4602      	mov	r2, r0
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	1ad3      	subs	r3, r2, r3
 80135fa:	2b02      	cmp	r3, #2
 80135fc:	d901      	bls.n	8013602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80135fe:	2303      	movs	r3, #3
 8013600:	e167      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013602:	4b0b      	ldr	r3, [pc, #44]	@ (8013630 <HAL_RCC_OscConfig+0x240>)
 8013604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013606:	f003 0302 	and.w	r3, r3, #2
 801360a:	2b00      	cmp	r3, #0
 801360c:	d0f0      	beq.n	80135f0 <HAL_RCC_OscConfig+0x200>
 801360e:	e01b      	b.n	8013648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013610:	4b09      	ldr	r3, [pc, #36]	@ (8013638 <HAL_RCC_OscConfig+0x248>)
 8013612:	2200      	movs	r2, #0
 8013614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013616:	f7fd fba3 	bl	8010d60 <HAL_GetTick>
 801361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801361c:	e00e      	b.n	801363c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801361e:	f7fd fb9f 	bl	8010d60 <HAL_GetTick>
 8013622:	4602      	mov	r2, r0
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	1ad3      	subs	r3, r2, r3
 8013628:	2b02      	cmp	r3, #2
 801362a:	d907      	bls.n	801363c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801362c:	2303      	movs	r3, #3
 801362e:	e150      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
 8013630:	40023800 	.word	0x40023800
 8013634:	42470000 	.word	0x42470000
 8013638:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801363c:	4b88      	ldr	r3, [pc, #544]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 801363e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013640:	f003 0302 	and.w	r3, r3, #2
 8013644:	2b00      	cmp	r3, #0
 8013646:	d1ea      	bne.n	801361e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	f003 0304 	and.w	r3, r3, #4
 8013650:	2b00      	cmp	r3, #0
 8013652:	f000 8097 	beq.w	8013784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013656:	2300      	movs	r3, #0
 8013658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801365a:	4b81      	ldr	r3, [pc, #516]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 801365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801365e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013662:	2b00      	cmp	r3, #0
 8013664:	d10f      	bne.n	8013686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013666:	2300      	movs	r3, #0
 8013668:	60bb      	str	r3, [r7, #8]
 801366a:	4b7d      	ldr	r3, [pc, #500]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 801366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801366e:	4a7c      	ldr	r2, [pc, #496]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 8013670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013674:	6413      	str	r3, [r2, #64]	@ 0x40
 8013676:	4b7a      	ldr	r3, [pc, #488]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 8013678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801367a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801367e:	60bb      	str	r3, [r7, #8]
 8013680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013682:	2301      	movs	r3, #1
 8013684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013686:	4b77      	ldr	r3, [pc, #476]	@ (8013864 <HAL_RCC_OscConfig+0x474>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801368e:	2b00      	cmp	r3, #0
 8013690:	d118      	bne.n	80136c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013692:	4b74      	ldr	r3, [pc, #464]	@ (8013864 <HAL_RCC_OscConfig+0x474>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	4a73      	ldr	r2, [pc, #460]	@ (8013864 <HAL_RCC_OscConfig+0x474>)
 8013698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801369c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801369e:	f7fd fb5f 	bl	8010d60 <HAL_GetTick>
 80136a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80136a4:	e008      	b.n	80136b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80136a6:	f7fd fb5b 	bl	8010d60 <HAL_GetTick>
 80136aa:	4602      	mov	r2, r0
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	1ad3      	subs	r3, r2, r3
 80136b0:	2b02      	cmp	r3, #2
 80136b2:	d901      	bls.n	80136b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80136b4:	2303      	movs	r3, #3
 80136b6:	e10c      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80136b8:	4b6a      	ldr	r3, [pc, #424]	@ (8013864 <HAL_RCC_OscConfig+0x474>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d0f0      	beq.n	80136a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	689b      	ldr	r3, [r3, #8]
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	d106      	bne.n	80136da <HAL_RCC_OscConfig+0x2ea>
 80136cc:	4b64      	ldr	r3, [pc, #400]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 80136ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80136d0:	4a63      	ldr	r2, [pc, #396]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 80136d2:	f043 0301 	orr.w	r3, r3, #1
 80136d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80136d8:	e01c      	b.n	8013714 <HAL_RCC_OscConfig+0x324>
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	689b      	ldr	r3, [r3, #8]
 80136de:	2b05      	cmp	r3, #5
 80136e0:	d10c      	bne.n	80136fc <HAL_RCC_OscConfig+0x30c>
 80136e2:	4b5f      	ldr	r3, [pc, #380]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 80136e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80136e6:	4a5e      	ldr	r2, [pc, #376]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 80136e8:	f043 0304 	orr.w	r3, r3, #4
 80136ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80136ee:	4b5c      	ldr	r3, [pc, #368]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 80136f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80136f2:	4a5b      	ldr	r2, [pc, #364]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 80136f4:	f043 0301 	orr.w	r3, r3, #1
 80136f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80136fa:	e00b      	b.n	8013714 <HAL_RCC_OscConfig+0x324>
 80136fc:	4b58      	ldr	r3, [pc, #352]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 80136fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013700:	4a57      	ldr	r2, [pc, #348]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 8013702:	f023 0301 	bic.w	r3, r3, #1
 8013706:	6713      	str	r3, [r2, #112]	@ 0x70
 8013708:	4b55      	ldr	r3, [pc, #340]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 801370a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801370c:	4a54      	ldr	r2, [pc, #336]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 801370e:	f023 0304 	bic.w	r3, r3, #4
 8013712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d015      	beq.n	8013748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801371c:	f7fd fb20 	bl	8010d60 <HAL_GetTick>
 8013720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013722:	e00a      	b.n	801373a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013724:	f7fd fb1c 	bl	8010d60 <HAL_GetTick>
 8013728:	4602      	mov	r2, r0
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	1ad3      	subs	r3, r2, r3
 801372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013732:	4293      	cmp	r3, r2
 8013734:	d901      	bls.n	801373a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8013736:	2303      	movs	r3, #3
 8013738:	e0cb      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801373a:	4b49      	ldr	r3, [pc, #292]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 801373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801373e:	f003 0302 	and.w	r3, r3, #2
 8013742:	2b00      	cmp	r3, #0
 8013744:	d0ee      	beq.n	8013724 <HAL_RCC_OscConfig+0x334>
 8013746:	e014      	b.n	8013772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013748:	f7fd fb0a 	bl	8010d60 <HAL_GetTick>
 801374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801374e:	e00a      	b.n	8013766 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013750:	f7fd fb06 	bl	8010d60 <HAL_GetTick>
 8013754:	4602      	mov	r2, r0
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	1ad3      	subs	r3, r2, r3
 801375a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801375e:	4293      	cmp	r3, r2
 8013760:	d901      	bls.n	8013766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8013762:	2303      	movs	r3, #3
 8013764:	e0b5      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013766:	4b3e      	ldr	r3, [pc, #248]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 8013768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801376a:	f003 0302 	and.w	r3, r3, #2
 801376e:	2b00      	cmp	r3, #0
 8013770:	d1ee      	bne.n	8013750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8013772:	7dfb      	ldrb	r3, [r7, #23]
 8013774:	2b01      	cmp	r3, #1
 8013776:	d105      	bne.n	8013784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013778:	4b39      	ldr	r3, [pc, #228]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 801377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801377c:	4a38      	ldr	r2, [pc, #224]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 801377e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013782:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	699b      	ldr	r3, [r3, #24]
 8013788:	2b00      	cmp	r3, #0
 801378a:	f000 80a1 	beq.w	80138d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801378e:	4b34      	ldr	r3, [pc, #208]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 8013790:	689b      	ldr	r3, [r3, #8]
 8013792:	f003 030c 	and.w	r3, r3, #12
 8013796:	2b08      	cmp	r3, #8
 8013798:	d05c      	beq.n	8013854 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	699b      	ldr	r3, [r3, #24]
 801379e:	2b02      	cmp	r3, #2
 80137a0:	d141      	bne.n	8013826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80137a2:	4b31      	ldr	r3, [pc, #196]	@ (8013868 <HAL_RCC_OscConfig+0x478>)
 80137a4:	2200      	movs	r2, #0
 80137a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80137a8:	f7fd fada 	bl	8010d60 <HAL_GetTick>
 80137ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80137ae:	e008      	b.n	80137c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80137b0:	f7fd fad6 	bl	8010d60 <HAL_GetTick>
 80137b4:	4602      	mov	r2, r0
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	1ad3      	subs	r3, r2, r3
 80137ba:	2b02      	cmp	r3, #2
 80137bc:	d901      	bls.n	80137c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80137be:	2303      	movs	r3, #3
 80137c0:	e087      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80137c2:	4b27      	ldr	r3, [pc, #156]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d1f0      	bne.n	80137b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	69da      	ldr	r2, [r3, #28]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6a1b      	ldr	r3, [r3, #32]
 80137d6:	431a      	orrs	r2, r3
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137dc:	019b      	lsls	r3, r3, #6
 80137de:	431a      	orrs	r2, r3
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137e4:	085b      	lsrs	r3, r3, #1
 80137e6:	3b01      	subs	r3, #1
 80137e8:	041b      	lsls	r3, r3, #16
 80137ea:	431a      	orrs	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137f0:	061b      	lsls	r3, r3, #24
 80137f2:	491b      	ldr	r1, [pc, #108]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 80137f4:	4313      	orrs	r3, r2
 80137f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80137f8:	4b1b      	ldr	r3, [pc, #108]	@ (8013868 <HAL_RCC_OscConfig+0x478>)
 80137fa:	2201      	movs	r2, #1
 80137fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80137fe:	f7fd faaf 	bl	8010d60 <HAL_GetTick>
 8013802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013804:	e008      	b.n	8013818 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013806:	f7fd faab 	bl	8010d60 <HAL_GetTick>
 801380a:	4602      	mov	r2, r0
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	2b02      	cmp	r3, #2
 8013812:	d901      	bls.n	8013818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013814:	2303      	movs	r3, #3
 8013816:	e05c      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013818:	4b11      	ldr	r3, [pc, #68]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013820:	2b00      	cmp	r3, #0
 8013822:	d0f0      	beq.n	8013806 <HAL_RCC_OscConfig+0x416>
 8013824:	e054      	b.n	80138d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013826:	4b10      	ldr	r3, [pc, #64]	@ (8013868 <HAL_RCC_OscConfig+0x478>)
 8013828:	2200      	movs	r2, #0
 801382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801382c:	f7fd fa98 	bl	8010d60 <HAL_GetTick>
 8013830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013832:	e008      	b.n	8013846 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013834:	f7fd fa94 	bl	8010d60 <HAL_GetTick>
 8013838:	4602      	mov	r2, r0
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	1ad3      	subs	r3, r2, r3
 801383e:	2b02      	cmp	r3, #2
 8013840:	d901      	bls.n	8013846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8013842:	2303      	movs	r3, #3
 8013844:	e045      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013846:	4b06      	ldr	r3, [pc, #24]	@ (8013860 <HAL_RCC_OscConfig+0x470>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801384e:	2b00      	cmp	r3, #0
 8013850:	d1f0      	bne.n	8013834 <HAL_RCC_OscConfig+0x444>
 8013852:	e03d      	b.n	80138d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	699b      	ldr	r3, [r3, #24]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d107      	bne.n	801386c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801385c:	2301      	movs	r3, #1
 801385e:	e038      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
 8013860:	40023800 	.word	0x40023800
 8013864:	40007000 	.word	0x40007000
 8013868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801386c:	4b1b      	ldr	r3, [pc, #108]	@ (80138dc <HAL_RCC_OscConfig+0x4ec>)
 801386e:	685b      	ldr	r3, [r3, #4]
 8013870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	699b      	ldr	r3, [r3, #24]
 8013876:	2b01      	cmp	r3, #1
 8013878:	d028      	beq.n	80138cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013884:	429a      	cmp	r2, r3
 8013886:	d121      	bne.n	80138cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013892:	429a      	cmp	r2, r3
 8013894:	d11a      	bne.n	80138cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013896:	68fa      	ldr	r2, [r7, #12]
 8013898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 801389c:	4013      	ands	r3, r2
 801389e:	687a      	ldr	r2, [r7, #4]
 80138a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80138a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80138a4:	4293      	cmp	r3, r2
 80138a6:	d111      	bne.n	80138cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138b2:	085b      	lsrs	r3, r3, #1
 80138b4:	3b01      	subs	r3, #1
 80138b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d107      	bne.n	80138cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d001      	beq.n	80138d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80138cc:	2301      	movs	r3, #1
 80138ce:	e000      	b.n	80138d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3718      	adds	r7, #24
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	40023800 	.word	0x40023800

080138e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b084      	sub	sp, #16
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d101      	bne.n	80138f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80138f0:	2301      	movs	r3, #1
 80138f2:	e0cc      	b.n	8013a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80138f4:	4b68      	ldr	r3, [pc, #416]	@ (8013a98 <HAL_RCC_ClockConfig+0x1b8>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f003 0307 	and.w	r3, r3, #7
 80138fc:	683a      	ldr	r2, [r7, #0]
 80138fe:	429a      	cmp	r2, r3
 8013900:	d90c      	bls.n	801391c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013902:	4b65      	ldr	r3, [pc, #404]	@ (8013a98 <HAL_RCC_ClockConfig+0x1b8>)
 8013904:	683a      	ldr	r2, [r7, #0]
 8013906:	b2d2      	uxtb	r2, r2
 8013908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801390a:	4b63      	ldr	r3, [pc, #396]	@ (8013a98 <HAL_RCC_ClockConfig+0x1b8>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f003 0307 	and.w	r3, r3, #7
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	429a      	cmp	r2, r3
 8013916:	d001      	beq.n	801391c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013918:	2301      	movs	r3, #1
 801391a:	e0b8      	b.n	8013a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	f003 0302 	and.w	r3, r3, #2
 8013924:	2b00      	cmp	r3, #0
 8013926:	d020      	beq.n	801396a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	f003 0304 	and.w	r3, r3, #4
 8013930:	2b00      	cmp	r3, #0
 8013932:	d005      	beq.n	8013940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013934:	4b59      	ldr	r3, [pc, #356]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 8013936:	689b      	ldr	r3, [r3, #8]
 8013938:	4a58      	ldr	r2, [pc, #352]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 801393a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801393e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	f003 0308 	and.w	r3, r3, #8
 8013948:	2b00      	cmp	r3, #0
 801394a:	d005      	beq.n	8013958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801394c:	4b53      	ldr	r3, [pc, #332]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 801394e:	689b      	ldr	r3, [r3, #8]
 8013950:	4a52      	ldr	r2, [pc, #328]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 8013952:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8013956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013958:	4b50      	ldr	r3, [pc, #320]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 801395a:	689b      	ldr	r3, [r3, #8]
 801395c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	689b      	ldr	r3, [r3, #8]
 8013964:	494d      	ldr	r1, [pc, #308]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 8013966:	4313      	orrs	r3, r2
 8013968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	f003 0301 	and.w	r3, r3, #1
 8013972:	2b00      	cmp	r3, #0
 8013974:	d044      	beq.n	8013a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	2b01      	cmp	r3, #1
 801397c:	d107      	bne.n	801398e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801397e:	4b47      	ldr	r3, [pc, #284]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013986:	2b00      	cmp	r3, #0
 8013988:	d119      	bne.n	80139be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801398a:	2301      	movs	r3, #1
 801398c:	e07f      	b.n	8013a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	2b02      	cmp	r3, #2
 8013994:	d003      	beq.n	801399e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801399a:	2b03      	cmp	r3, #3
 801399c:	d107      	bne.n	80139ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801399e:	4b3f      	ldr	r3, [pc, #252]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d109      	bne.n	80139be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80139aa:	2301      	movs	r3, #1
 80139ac:	e06f      	b.n	8013a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80139ae:	4b3b      	ldr	r3, [pc, #236]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	f003 0302 	and.w	r3, r3, #2
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d101      	bne.n	80139be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80139ba:	2301      	movs	r3, #1
 80139bc:	e067      	b.n	8013a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80139be:	4b37      	ldr	r3, [pc, #220]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 80139c0:	689b      	ldr	r3, [r3, #8]
 80139c2:	f023 0203 	bic.w	r2, r3, #3
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	4934      	ldr	r1, [pc, #208]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 80139cc:	4313      	orrs	r3, r2
 80139ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80139d0:	f7fd f9c6 	bl	8010d60 <HAL_GetTick>
 80139d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80139d6:	e00a      	b.n	80139ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80139d8:	f7fd f9c2 	bl	8010d60 <HAL_GetTick>
 80139dc:	4602      	mov	r2, r0
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	1ad3      	subs	r3, r2, r3
 80139e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d901      	bls.n	80139ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80139ea:	2303      	movs	r3, #3
 80139ec:	e04f      	b.n	8013a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80139ee:	4b2b      	ldr	r3, [pc, #172]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 80139f0:	689b      	ldr	r3, [r3, #8]
 80139f2:	f003 020c 	and.w	r2, r3, #12
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	009b      	lsls	r3, r3, #2
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d1eb      	bne.n	80139d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013a00:	4b25      	ldr	r3, [pc, #148]	@ (8013a98 <HAL_RCC_ClockConfig+0x1b8>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	f003 0307 	and.w	r3, r3, #7
 8013a08:	683a      	ldr	r2, [r7, #0]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d20c      	bcs.n	8013a28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013a0e:	4b22      	ldr	r3, [pc, #136]	@ (8013a98 <HAL_RCC_ClockConfig+0x1b8>)
 8013a10:	683a      	ldr	r2, [r7, #0]
 8013a12:	b2d2      	uxtb	r2, r2
 8013a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013a16:	4b20      	ldr	r3, [pc, #128]	@ (8013a98 <HAL_RCC_ClockConfig+0x1b8>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f003 0307 	and.w	r3, r3, #7
 8013a1e:	683a      	ldr	r2, [r7, #0]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d001      	beq.n	8013a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013a24:	2301      	movs	r3, #1
 8013a26:	e032      	b.n	8013a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	f003 0304 	and.w	r3, r3, #4
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d008      	beq.n	8013a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013a34:	4b19      	ldr	r3, [pc, #100]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 8013a36:	689b      	ldr	r3, [r3, #8]
 8013a38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	68db      	ldr	r3, [r3, #12]
 8013a40:	4916      	ldr	r1, [pc, #88]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 8013a42:	4313      	orrs	r3, r2
 8013a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	f003 0308 	and.w	r3, r3, #8
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d009      	beq.n	8013a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013a52:	4b12      	ldr	r3, [pc, #72]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 8013a54:	689b      	ldr	r3, [r3, #8]
 8013a56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	691b      	ldr	r3, [r3, #16]
 8013a5e:	00db      	lsls	r3, r3, #3
 8013a60:	490e      	ldr	r1, [pc, #56]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 8013a62:	4313      	orrs	r3, r2
 8013a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8013a66:	f000 f821 	bl	8013aac <HAL_RCC_GetSysClockFreq>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8013a9c <HAL_RCC_ClockConfig+0x1bc>)
 8013a6e:	689b      	ldr	r3, [r3, #8]
 8013a70:	091b      	lsrs	r3, r3, #4
 8013a72:	f003 030f 	and.w	r3, r3, #15
 8013a76:	490a      	ldr	r1, [pc, #40]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8013a78:	5ccb      	ldrb	r3, [r1, r3]
 8013a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8013a7e:	4a09      	ldr	r2, [pc, #36]	@ (8013aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8013a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8013a82:	4b09      	ldr	r3, [pc, #36]	@ (8013aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7fd f926 	bl	8010cd8 <HAL_InitTick>

  return HAL_OK;
 8013a8c:	2300      	movs	r3, #0
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3710      	adds	r7, #16
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	40023c00 	.word	0x40023c00
 8013a9c:	40023800 	.word	0x40023800
 8013aa0:	08018148 	.word	0x08018148
 8013aa4:	20000000 	.word	0x20000000
 8013aa8:	20000004 	.word	0x20000004

08013aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013ab0:	b094      	sub	sp, #80	@ 0x50
 8013ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8013abc:	2300      	movs	r3, #0
 8013abe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013ac4:	4b79      	ldr	r3, [pc, #484]	@ (8013cac <HAL_RCC_GetSysClockFreq+0x200>)
 8013ac6:	689b      	ldr	r3, [r3, #8]
 8013ac8:	f003 030c 	and.w	r3, r3, #12
 8013acc:	2b08      	cmp	r3, #8
 8013ace:	d00d      	beq.n	8013aec <HAL_RCC_GetSysClockFreq+0x40>
 8013ad0:	2b08      	cmp	r3, #8
 8013ad2:	f200 80e1 	bhi.w	8013c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d002      	beq.n	8013ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8013ada:	2b04      	cmp	r3, #4
 8013adc:	d003      	beq.n	8013ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8013ade:	e0db      	b.n	8013c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013ae0:	4b73      	ldr	r3, [pc, #460]	@ (8013cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8013ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013ae4:	e0db      	b.n	8013c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013ae6:	4b73      	ldr	r3, [pc, #460]	@ (8013cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8013ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013aea:	e0d8      	b.n	8013c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013aec:	4b6f      	ldr	r3, [pc, #444]	@ (8013cac <HAL_RCC_GetSysClockFreq+0x200>)
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013af4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013af6:	4b6d      	ldr	r3, [pc, #436]	@ (8013cac <HAL_RCC_GetSysClockFreq+0x200>)
 8013af8:	685b      	ldr	r3, [r3, #4]
 8013afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d063      	beq.n	8013bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013b02:	4b6a      	ldr	r3, [pc, #424]	@ (8013cac <HAL_RCC_GetSysClockFreq+0x200>)
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	099b      	lsrs	r3, r3, #6
 8013b08:	2200      	movs	r2, #0
 8013b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013b0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8013b16:	2300      	movs	r3, #0
 8013b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8013b1e:	4622      	mov	r2, r4
 8013b20:	462b      	mov	r3, r5
 8013b22:	f04f 0000 	mov.w	r0, #0
 8013b26:	f04f 0100 	mov.w	r1, #0
 8013b2a:	0159      	lsls	r1, r3, #5
 8013b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013b30:	0150      	lsls	r0, r2, #5
 8013b32:	4602      	mov	r2, r0
 8013b34:	460b      	mov	r3, r1
 8013b36:	4621      	mov	r1, r4
 8013b38:	1a51      	subs	r1, r2, r1
 8013b3a:	6139      	str	r1, [r7, #16]
 8013b3c:	4629      	mov	r1, r5
 8013b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8013b42:	617b      	str	r3, [r7, #20]
 8013b44:	f04f 0200 	mov.w	r2, #0
 8013b48:	f04f 0300 	mov.w	r3, #0
 8013b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013b50:	4659      	mov	r1, fp
 8013b52:	018b      	lsls	r3, r1, #6
 8013b54:	4651      	mov	r1, sl
 8013b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8013b5a:	4651      	mov	r1, sl
 8013b5c:	018a      	lsls	r2, r1, #6
 8013b5e:	4651      	mov	r1, sl
 8013b60:	ebb2 0801 	subs.w	r8, r2, r1
 8013b64:	4659      	mov	r1, fp
 8013b66:	eb63 0901 	sbc.w	r9, r3, r1
 8013b6a:	f04f 0200 	mov.w	r2, #0
 8013b6e:	f04f 0300 	mov.w	r3, #0
 8013b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013b7e:	4690      	mov	r8, r2
 8013b80:	4699      	mov	r9, r3
 8013b82:	4623      	mov	r3, r4
 8013b84:	eb18 0303 	adds.w	r3, r8, r3
 8013b88:	60bb      	str	r3, [r7, #8]
 8013b8a:	462b      	mov	r3, r5
 8013b8c:	eb49 0303 	adc.w	r3, r9, r3
 8013b90:	60fb      	str	r3, [r7, #12]
 8013b92:	f04f 0200 	mov.w	r2, #0
 8013b96:	f04f 0300 	mov.w	r3, #0
 8013b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013b9e:	4629      	mov	r1, r5
 8013ba0:	024b      	lsls	r3, r1, #9
 8013ba2:	4621      	mov	r1, r4
 8013ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8013ba8:	4621      	mov	r1, r4
 8013baa:	024a      	lsls	r2, r1, #9
 8013bac:	4610      	mov	r0, r2
 8013bae:	4619      	mov	r1, r3
 8013bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013bbc:	f7fc fb04 	bl	80101c8 <__aeabi_uldivmod>
 8013bc0:	4602      	mov	r2, r0
 8013bc2:	460b      	mov	r3, r1
 8013bc4:	4613      	mov	r3, r2
 8013bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013bc8:	e058      	b.n	8013c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013bca:	4b38      	ldr	r3, [pc, #224]	@ (8013cac <HAL_RCC_GetSysClockFreq+0x200>)
 8013bcc:	685b      	ldr	r3, [r3, #4]
 8013bce:	099b      	lsrs	r3, r3, #6
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	4611      	mov	r1, r2
 8013bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8013bda:	623b      	str	r3, [r7, #32]
 8013bdc:	2300      	movs	r3, #0
 8013bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8013be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013be4:	4642      	mov	r2, r8
 8013be6:	464b      	mov	r3, r9
 8013be8:	f04f 0000 	mov.w	r0, #0
 8013bec:	f04f 0100 	mov.w	r1, #0
 8013bf0:	0159      	lsls	r1, r3, #5
 8013bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013bf6:	0150      	lsls	r0, r2, #5
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	460b      	mov	r3, r1
 8013bfc:	4641      	mov	r1, r8
 8013bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8013c02:	4649      	mov	r1, r9
 8013c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8013c08:	f04f 0200 	mov.w	r2, #0
 8013c0c:	f04f 0300 	mov.w	r3, #0
 8013c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8013c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8013c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8013c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8013c20:	eb63 050b 	sbc.w	r5, r3, fp
 8013c24:	f04f 0200 	mov.w	r2, #0
 8013c28:	f04f 0300 	mov.w	r3, #0
 8013c2c:	00eb      	lsls	r3, r5, #3
 8013c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013c32:	00e2      	lsls	r2, r4, #3
 8013c34:	4614      	mov	r4, r2
 8013c36:	461d      	mov	r5, r3
 8013c38:	4643      	mov	r3, r8
 8013c3a:	18e3      	adds	r3, r4, r3
 8013c3c:	603b      	str	r3, [r7, #0]
 8013c3e:	464b      	mov	r3, r9
 8013c40:	eb45 0303 	adc.w	r3, r5, r3
 8013c44:	607b      	str	r3, [r7, #4]
 8013c46:	f04f 0200 	mov.w	r2, #0
 8013c4a:	f04f 0300 	mov.w	r3, #0
 8013c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013c52:	4629      	mov	r1, r5
 8013c54:	028b      	lsls	r3, r1, #10
 8013c56:	4621      	mov	r1, r4
 8013c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013c5c:	4621      	mov	r1, r4
 8013c5e:	028a      	lsls	r2, r1, #10
 8013c60:	4610      	mov	r0, r2
 8013c62:	4619      	mov	r1, r3
 8013c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c66:	2200      	movs	r2, #0
 8013c68:	61bb      	str	r3, [r7, #24]
 8013c6a:	61fa      	str	r2, [r7, #28]
 8013c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013c70:	f7fc faaa 	bl	80101c8 <__aeabi_uldivmod>
 8013c74:	4602      	mov	r2, r0
 8013c76:	460b      	mov	r3, r1
 8013c78:	4613      	mov	r3, r2
 8013c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8013c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8013cac <HAL_RCC_GetSysClockFreq+0x200>)
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	0c1b      	lsrs	r3, r3, #16
 8013c82:	f003 0303 	and.w	r3, r3, #3
 8013c86:	3301      	adds	r3, #1
 8013c88:	005b      	lsls	r3, r3, #1
 8013c8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8013c8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013c96:	e002      	b.n	8013c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013c98:	4b05      	ldr	r3, [pc, #20]	@ (8013cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8013c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3750      	adds	r7, #80	@ 0x50
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013caa:	bf00      	nop
 8013cac:	40023800 	.word	0x40023800
 8013cb0:	00f42400 	.word	0x00f42400
 8013cb4:	007a1200 	.word	0x007a1200

08013cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013cbc:	4b03      	ldr	r3, [pc, #12]	@ (8013ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr
 8013cca:	bf00      	nop
 8013ccc:	20000000 	.word	0x20000000

08013cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013cd4:	f7ff fff0 	bl	8013cb8 <HAL_RCC_GetHCLKFreq>
 8013cd8:	4602      	mov	r2, r0
 8013cda:	4b05      	ldr	r3, [pc, #20]	@ (8013cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013cdc:	689b      	ldr	r3, [r3, #8]
 8013cde:	0a9b      	lsrs	r3, r3, #10
 8013ce0:	f003 0307 	and.w	r3, r3, #7
 8013ce4:	4903      	ldr	r1, [pc, #12]	@ (8013cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013ce6:	5ccb      	ldrb	r3, [r1, r3]
 8013ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	bd80      	pop	{r7, pc}
 8013cf0:	40023800 	.word	0x40023800
 8013cf4:	08018158 	.word	0x08018158

08013cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b086      	sub	sp, #24
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013d00:	2300      	movs	r3, #0
 8013d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8013d04:	2300      	movs	r3, #0
 8013d06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	f003 0301 	and.w	r3, r3, #1
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d105      	bne.n	8013d20 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d035      	beq.n	8013d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8013d20:	4b62      	ldr	r3, [pc, #392]	@ (8013eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8013d22:	2200      	movs	r2, #0
 8013d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013d26:	f7fd f81b 	bl	8010d60 <HAL_GetTick>
 8013d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013d2c:	e008      	b.n	8013d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013d2e:	f7fd f817 	bl	8010d60 <HAL_GetTick>
 8013d32:	4602      	mov	r2, r0
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	1ad3      	subs	r3, r2, r3
 8013d38:	2b02      	cmp	r3, #2
 8013d3a:	d901      	bls.n	8013d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013d3c:	2303      	movs	r3, #3
 8013d3e:	e0b0      	b.n	8013ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013d40:	4b5b      	ldr	r3, [pc, #364]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d1f0      	bne.n	8013d2e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	019a      	lsls	r2, r3, #6
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	689b      	ldr	r3, [r3, #8]
 8013d56:	071b      	lsls	r3, r3, #28
 8013d58:	4955      	ldr	r1, [pc, #340]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d5a:	4313      	orrs	r3, r2
 8013d5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8013d60:	4b52      	ldr	r3, [pc, #328]	@ (8013eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8013d62:	2201      	movs	r2, #1
 8013d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013d66:	f7fc fffb 	bl	8010d60 <HAL_GetTick>
 8013d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013d6c:	e008      	b.n	8013d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013d6e:	f7fc fff7 	bl	8010d60 <HAL_GetTick>
 8013d72:	4602      	mov	r2, r0
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	1ad3      	subs	r3, r2, r3
 8013d78:	2b02      	cmp	r3, #2
 8013d7a:	d901      	bls.n	8013d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013d7c:	2303      	movs	r3, #3
 8013d7e:	e090      	b.n	8013ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013d80:	4b4b      	ldr	r3, [pc, #300]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d0f0      	beq.n	8013d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	f003 0302 	and.w	r3, r3, #2
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	f000 8083 	beq.w	8013ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	60fb      	str	r3, [r7, #12]
 8013d9e:	4b44      	ldr	r3, [pc, #272]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013da2:	4a43      	ldr	r2, [pc, #268]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8013daa:	4b41      	ldr	r3, [pc, #260]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013db2:	60fb      	str	r3, [r7, #12]
 8013db4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8013db6:	4b3f      	ldr	r3, [pc, #252]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	4a3e      	ldr	r2, [pc, #248]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8013dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013dc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8013dc2:	f7fc ffcd 	bl	8010d60 <HAL_GetTick>
 8013dc6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8013dc8:	e008      	b.n	8013ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013dca:	f7fc ffc9 	bl	8010d60 <HAL_GetTick>
 8013dce:	4602      	mov	r2, r0
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	1ad3      	subs	r3, r2, r3
 8013dd4:	2b02      	cmp	r3, #2
 8013dd6:	d901      	bls.n	8013ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8013dd8:	2303      	movs	r3, #3
 8013dda:	e062      	b.n	8013ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8013ddc:	4b35      	ldr	r3, [pc, #212]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d0f0      	beq.n	8013dca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013de8:	4b31      	ldr	r3, [pc, #196]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013df0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d02f      	beq.n	8013e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	68db      	ldr	r3, [r3, #12]
 8013dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013e00:	693a      	ldr	r2, [r7, #16]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d028      	beq.n	8013e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013e06:	4b2a      	ldr	r3, [pc, #168]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013e0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8013e10:	4b29      	ldr	r3, [pc, #164]	@ (8013eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8013e12:	2201      	movs	r2, #1
 8013e14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013e16:	4b28      	ldr	r3, [pc, #160]	@ (8013eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8013e18:	2200      	movs	r2, #0
 8013e1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8013e1c:	4a24      	ldr	r2, [pc, #144]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8013e22:	4b23      	ldr	r3, [pc, #140]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e26:	f003 0301 	and.w	r3, r3, #1
 8013e2a:	2b01      	cmp	r3, #1
 8013e2c:	d114      	bne.n	8013e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8013e2e:	f7fc ff97 	bl	8010d60 <HAL_GetTick>
 8013e32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013e34:	e00a      	b.n	8013e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013e36:	f7fc ff93 	bl	8010d60 <HAL_GetTick>
 8013e3a:	4602      	mov	r2, r0
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	1ad3      	subs	r3, r2, r3
 8013e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d901      	bls.n	8013e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8013e48:	2303      	movs	r3, #3
 8013e4a:	e02a      	b.n	8013ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013e4c:	4b18      	ldr	r3, [pc, #96]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e50:	f003 0302 	and.w	r3, r3, #2
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d0ee      	beq.n	8013e36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	68db      	ldr	r3, [r3, #12]
 8013e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013e60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013e64:	d10d      	bne.n	8013e82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8013e66:	4b12      	ldr	r3, [pc, #72]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e68:	689b      	ldr	r3, [r3, #8]
 8013e6a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	68db      	ldr	r3, [r3, #12]
 8013e72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013e7a:	490d      	ldr	r1, [pc, #52]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e7c:	4313      	orrs	r3, r2
 8013e7e:	608b      	str	r3, [r1, #8]
 8013e80:	e005      	b.n	8013e8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8013e82:	4b0b      	ldr	r3, [pc, #44]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e84:	689b      	ldr	r3, [r3, #8]
 8013e86:	4a0a      	ldr	r2, [pc, #40]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e88:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8013e8c:	6093      	str	r3, [r2, #8]
 8013e8e:	4b08      	ldr	r3, [pc, #32]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	68db      	ldr	r3, [r3, #12]
 8013e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013e9a:	4905      	ldr	r1, [pc, #20]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e9c:	4313      	orrs	r3, r2
 8013e9e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8013ea0:	2300      	movs	r3, #0
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3718      	adds	r7, #24
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
 8013eaa:	bf00      	nop
 8013eac:	42470068 	.word	0x42470068
 8013eb0:	40023800 	.word	0x40023800
 8013eb4:	40007000 	.word	0x40007000
 8013eb8:	42470e40 	.word	0x42470e40

08013ebc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b087      	sub	sp, #28
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2b01      	cmp	r3, #1
 8013ed8:	d13f      	bne.n	8013f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8013eda:	4b24      	ldr	r3, [pc, #144]	@ (8013f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013edc:	689b      	ldr	r3, [r3, #8]
 8013ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013ee2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d006      	beq.n	8013ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013ef0:	d12f      	bne.n	8013f52 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8013ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8013f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8013ef4:	617b      	str	r3, [r7, #20]
          break;
 8013ef6:	e02f      	b.n	8013f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8013ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8013f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013efa:	685b      	ldr	r3, [r3, #4]
 8013efc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013f00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013f04:	d108      	bne.n	8013f18 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8013f06:	4b19      	ldr	r3, [pc, #100]	@ (8013f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013f0e:	4a19      	ldr	r2, [pc, #100]	@ (8013f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8013f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f14:	613b      	str	r3, [r7, #16]
 8013f16:	e007      	b.n	8013f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8013f18:	4b14      	ldr	r3, [pc, #80]	@ (8013f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013f20:	4a15      	ldr	r2, [pc, #84]	@ (8013f78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8013f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f26:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8013f28:	4b10      	ldr	r3, [pc, #64]	@ (8013f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013f2e:	099b      	lsrs	r3, r3, #6
 8013f30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013f34:	693b      	ldr	r3, [r7, #16]
 8013f36:	fb02 f303 	mul.w	r3, r2, r3
 8013f3a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8013f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8013f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013f42:	0f1b      	lsrs	r3, r3, #28
 8013f44:	f003 0307 	and.w	r3, r3, #7
 8013f48:	68ba      	ldr	r2, [r7, #8]
 8013f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f4e:	617b      	str	r3, [r7, #20]
          break;
 8013f50:	e002      	b.n	8013f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8013f52:	2300      	movs	r3, #0
 8013f54:	617b      	str	r3, [r7, #20]
          break;
 8013f56:	bf00      	nop
        }
      }
      break;
 8013f58:	e000      	b.n	8013f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8013f5a:	bf00      	nop
    }
  }
  return frequency;
 8013f5c:	697b      	ldr	r3, [r7, #20]
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	371c      	adds	r7, #28
 8013f62:	46bd      	mov	sp, r7
 8013f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f68:	4770      	bx	lr
 8013f6a:	bf00      	nop
 8013f6c:	40023800 	.word	0x40023800
 8013f70:	00bb8000 	.word	0x00bb8000
 8013f74:	007a1200 	.word	0x007a1200
 8013f78:	00f42400 	.word	0x00f42400

08013f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b082      	sub	sp, #8
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d101      	bne.n	8013f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	e07b      	b.n	8014086 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d108      	bne.n	8013fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	685b      	ldr	r3, [r3, #4]
 8013f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013f9e:	d009      	beq.n	8013fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	61da      	str	r2, [r3, #28]
 8013fa6:	e005      	b.n	8013fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2200      	movs	r2, #0
 8013fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d106      	bne.n	8013fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f7fc fd9e 	bl	8010b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2202      	movs	r2, #2
 8013fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	681a      	ldr	r2, [r3, #0]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013fea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	689b      	ldr	r3, [r3, #8]
 8013ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8013ffc:	431a      	orrs	r2, r3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	68db      	ldr	r3, [r3, #12]
 8014002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014006:	431a      	orrs	r2, r3
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	691b      	ldr	r3, [r3, #16]
 801400c:	f003 0302 	and.w	r3, r3, #2
 8014010:	431a      	orrs	r2, r3
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	695b      	ldr	r3, [r3, #20]
 8014016:	f003 0301 	and.w	r3, r3, #1
 801401a:	431a      	orrs	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	699b      	ldr	r3, [r3, #24]
 8014020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8014024:	431a      	orrs	r2, r3
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	69db      	ldr	r3, [r3, #28]
 801402a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801402e:	431a      	orrs	r2, r3
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6a1b      	ldr	r3, [r3, #32]
 8014034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014038:	ea42 0103 	orr.w	r1, r2, r3
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014040:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	430a      	orrs	r2, r1
 801404a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	699b      	ldr	r3, [r3, #24]
 8014050:	0c1b      	lsrs	r3, r3, #16
 8014052:	f003 0104 	and.w	r1, r3, #4
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801405a:	f003 0210 	and.w	r2, r3, #16
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	430a      	orrs	r2, r1
 8014064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	69da      	ldr	r2, [r3, #28]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014074:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2200      	movs	r2, #0
 801407a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2201      	movs	r2, #1
 8014080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8014084:	2300      	movs	r3, #0
}
 8014086:	4618      	mov	r0, r3
 8014088:	3708      	adds	r7, #8
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}

0801408e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801408e:	b084      	sub	sp, #16
 8014090:	b580      	push	{r7, lr}
 8014092:	b084      	sub	sp, #16
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	f107 001c 	add.w	r0, r7, #28
 801409c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80140a0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d123      	bne.n	80140f0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80140bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	68db      	ldr	r3, [r3, #12]
 80140c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80140d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80140d4:	2b01      	cmp	r3, #1
 80140d6:	d105      	bne.n	80140e4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f001 fae9 	bl	80156bc <USB_CoreReset>
 80140ea:	4603      	mov	r3, r0
 80140ec:	73fb      	strb	r3, [r7, #15]
 80140ee:	e01b      	b.n	8014128 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	68db      	ldr	r3, [r3, #12]
 80140f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f001 fadd 	bl	80156bc <USB_CoreReset>
 8014102:	4603      	mov	r3, r0
 8014104:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014106:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801410a:	2b00      	cmp	r3, #0
 801410c:	d106      	bne.n	801411c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014112:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	639a      	str	r2, [r3, #56]	@ 0x38
 801411a:	e005      	b.n	8014128 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014120:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014128:	7fbb      	ldrb	r3, [r7, #30]
 801412a:	2b01      	cmp	r3, #1
 801412c:	d10b      	bne.n	8014146 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	689b      	ldr	r3, [r3, #8]
 8014132:	f043 0206 	orr.w	r2, r3, #6
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	689b      	ldr	r3, [r3, #8]
 801413e:	f043 0220 	orr.w	r2, r3, #32
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014146:	7bfb      	ldrb	r3, [r7, #15]
}
 8014148:	4618      	mov	r0, r3
 801414a:	3710      	adds	r7, #16
 801414c:	46bd      	mov	sp, r7
 801414e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014152:	b004      	add	sp, #16
 8014154:	4770      	bx	lr
	...

08014158 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014158:	b480      	push	{r7}
 801415a:	b087      	sub	sp, #28
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	4613      	mov	r3, r2
 8014164:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014166:	79fb      	ldrb	r3, [r7, #7]
 8014168:	2b02      	cmp	r3, #2
 801416a:	d165      	bne.n	8014238 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	4a41      	ldr	r2, [pc, #260]	@ (8014274 <USB_SetTurnaroundTime+0x11c>)
 8014170:	4293      	cmp	r3, r2
 8014172:	d906      	bls.n	8014182 <USB_SetTurnaroundTime+0x2a>
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	4a40      	ldr	r2, [pc, #256]	@ (8014278 <USB_SetTurnaroundTime+0x120>)
 8014178:	4293      	cmp	r3, r2
 801417a:	d202      	bcs.n	8014182 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801417c:	230f      	movs	r3, #15
 801417e:	617b      	str	r3, [r7, #20]
 8014180:	e062      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	4a3c      	ldr	r2, [pc, #240]	@ (8014278 <USB_SetTurnaroundTime+0x120>)
 8014186:	4293      	cmp	r3, r2
 8014188:	d306      	bcc.n	8014198 <USB_SetTurnaroundTime+0x40>
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	4a3b      	ldr	r2, [pc, #236]	@ (801427c <USB_SetTurnaroundTime+0x124>)
 801418e:	4293      	cmp	r3, r2
 8014190:	d202      	bcs.n	8014198 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014192:	230e      	movs	r3, #14
 8014194:	617b      	str	r3, [r7, #20]
 8014196:	e057      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	4a38      	ldr	r2, [pc, #224]	@ (801427c <USB_SetTurnaroundTime+0x124>)
 801419c:	4293      	cmp	r3, r2
 801419e:	d306      	bcc.n	80141ae <USB_SetTurnaroundTime+0x56>
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	4a37      	ldr	r2, [pc, #220]	@ (8014280 <USB_SetTurnaroundTime+0x128>)
 80141a4:	4293      	cmp	r3, r2
 80141a6:	d202      	bcs.n	80141ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80141a8:	230d      	movs	r3, #13
 80141aa:	617b      	str	r3, [r7, #20]
 80141ac:	e04c      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	4a33      	ldr	r2, [pc, #204]	@ (8014280 <USB_SetTurnaroundTime+0x128>)
 80141b2:	4293      	cmp	r3, r2
 80141b4:	d306      	bcc.n	80141c4 <USB_SetTurnaroundTime+0x6c>
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	4a32      	ldr	r2, [pc, #200]	@ (8014284 <USB_SetTurnaroundTime+0x12c>)
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d802      	bhi.n	80141c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80141be:	230c      	movs	r3, #12
 80141c0:	617b      	str	r3, [r7, #20]
 80141c2:	e041      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	4a2f      	ldr	r2, [pc, #188]	@ (8014284 <USB_SetTurnaroundTime+0x12c>)
 80141c8:	4293      	cmp	r3, r2
 80141ca:	d906      	bls.n	80141da <USB_SetTurnaroundTime+0x82>
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	4a2e      	ldr	r2, [pc, #184]	@ (8014288 <USB_SetTurnaroundTime+0x130>)
 80141d0:	4293      	cmp	r3, r2
 80141d2:	d802      	bhi.n	80141da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80141d4:	230b      	movs	r3, #11
 80141d6:	617b      	str	r3, [r7, #20]
 80141d8:	e036      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	4a2a      	ldr	r2, [pc, #168]	@ (8014288 <USB_SetTurnaroundTime+0x130>)
 80141de:	4293      	cmp	r3, r2
 80141e0:	d906      	bls.n	80141f0 <USB_SetTurnaroundTime+0x98>
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	4a29      	ldr	r2, [pc, #164]	@ (801428c <USB_SetTurnaroundTime+0x134>)
 80141e6:	4293      	cmp	r3, r2
 80141e8:	d802      	bhi.n	80141f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80141ea:	230a      	movs	r3, #10
 80141ec:	617b      	str	r3, [r7, #20]
 80141ee:	e02b      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	4a26      	ldr	r2, [pc, #152]	@ (801428c <USB_SetTurnaroundTime+0x134>)
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d906      	bls.n	8014206 <USB_SetTurnaroundTime+0xae>
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	4a25      	ldr	r2, [pc, #148]	@ (8014290 <USB_SetTurnaroundTime+0x138>)
 80141fc:	4293      	cmp	r3, r2
 80141fe:	d202      	bcs.n	8014206 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014200:	2309      	movs	r3, #9
 8014202:	617b      	str	r3, [r7, #20]
 8014204:	e020      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	4a21      	ldr	r2, [pc, #132]	@ (8014290 <USB_SetTurnaroundTime+0x138>)
 801420a:	4293      	cmp	r3, r2
 801420c:	d306      	bcc.n	801421c <USB_SetTurnaroundTime+0xc4>
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	4a20      	ldr	r2, [pc, #128]	@ (8014294 <USB_SetTurnaroundTime+0x13c>)
 8014212:	4293      	cmp	r3, r2
 8014214:	d802      	bhi.n	801421c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014216:	2308      	movs	r3, #8
 8014218:	617b      	str	r3, [r7, #20]
 801421a:	e015      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	4a1d      	ldr	r2, [pc, #116]	@ (8014294 <USB_SetTurnaroundTime+0x13c>)
 8014220:	4293      	cmp	r3, r2
 8014222:	d906      	bls.n	8014232 <USB_SetTurnaroundTime+0xda>
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	4a1c      	ldr	r2, [pc, #112]	@ (8014298 <USB_SetTurnaroundTime+0x140>)
 8014228:	4293      	cmp	r3, r2
 801422a:	d202      	bcs.n	8014232 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801422c:	2307      	movs	r3, #7
 801422e:	617b      	str	r3, [r7, #20]
 8014230:	e00a      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014232:	2306      	movs	r3, #6
 8014234:	617b      	str	r3, [r7, #20]
 8014236:	e007      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014238:	79fb      	ldrb	r3, [r7, #7]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d102      	bne.n	8014244 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801423e:	2309      	movs	r3, #9
 8014240:	617b      	str	r3, [r7, #20]
 8014242:	e001      	b.n	8014248 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014244:	2309      	movs	r3, #9
 8014246:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	68db      	ldr	r3, [r3, #12]
 801424c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	68da      	ldr	r2, [r3, #12]
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	029b      	lsls	r3, r3, #10
 801425c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014260:	431a      	orrs	r2, r3
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014266:	2300      	movs	r3, #0
}
 8014268:	4618      	mov	r0, r3
 801426a:	371c      	adds	r7, #28
 801426c:	46bd      	mov	sp, r7
 801426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014272:	4770      	bx	lr
 8014274:	00d8acbf 	.word	0x00d8acbf
 8014278:	00e4e1c0 	.word	0x00e4e1c0
 801427c:	00f42400 	.word	0x00f42400
 8014280:	01067380 	.word	0x01067380
 8014284:	011a499f 	.word	0x011a499f
 8014288:	01312cff 	.word	0x01312cff
 801428c:	014ca43f 	.word	0x014ca43f
 8014290:	016e3600 	.word	0x016e3600
 8014294:	01a6ab1f 	.word	0x01a6ab1f
 8014298:	01e84800 	.word	0x01e84800

0801429c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801429c:	b480      	push	{r7}
 801429e:	b083      	sub	sp, #12
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	689b      	ldr	r3, [r3, #8]
 80142a8:	f043 0201 	orr.w	r2, r3, #1
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80142b0:	2300      	movs	r3, #0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	370c      	adds	r7, #12
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr

080142be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80142be:	b480      	push	{r7}
 80142c0:	b083      	sub	sp, #12
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	689b      	ldr	r3, [r3, #8]
 80142ca:	f023 0201 	bic.w	r2, r3, #1
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80142d2:	2300      	movs	r3, #0
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr

080142e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	460b      	mov	r3, r1
 80142ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80142ec:	2300      	movs	r3, #0
 80142ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	68db      	ldr	r3, [r3, #12]
 80142f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80142fc:	78fb      	ldrb	r3, [r7, #3]
 80142fe:	2b01      	cmp	r3, #1
 8014300:	d115      	bne.n	801432e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	68db      	ldr	r3, [r3, #12]
 8014306:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801430e:	200a      	movs	r0, #10
 8014310:	f7fc fd32 	bl	8010d78 <HAL_Delay>
      ms += 10U;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	330a      	adds	r3, #10
 8014318:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f001 f93f 	bl	801559e <USB_GetMode>
 8014320:	4603      	mov	r3, r0
 8014322:	2b01      	cmp	r3, #1
 8014324:	d01e      	beq.n	8014364 <USB_SetCurrentMode+0x84>
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	2bc7      	cmp	r3, #199	@ 0xc7
 801432a:	d9f0      	bls.n	801430e <USB_SetCurrentMode+0x2e>
 801432c:	e01a      	b.n	8014364 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801432e:	78fb      	ldrb	r3, [r7, #3]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d115      	bne.n	8014360 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	68db      	ldr	r3, [r3, #12]
 8014338:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014340:	200a      	movs	r0, #10
 8014342:	f7fc fd19 	bl	8010d78 <HAL_Delay>
      ms += 10U;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	330a      	adds	r3, #10
 801434a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f001 f926 	bl	801559e <USB_GetMode>
 8014352:	4603      	mov	r3, r0
 8014354:	2b00      	cmp	r3, #0
 8014356:	d005      	beq.n	8014364 <USB_SetCurrentMode+0x84>
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	2bc7      	cmp	r3, #199	@ 0xc7
 801435c:	d9f0      	bls.n	8014340 <USB_SetCurrentMode+0x60>
 801435e:	e001      	b.n	8014364 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014360:	2301      	movs	r3, #1
 8014362:	e005      	b.n	8014370 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	2bc8      	cmp	r3, #200	@ 0xc8
 8014368:	d101      	bne.n	801436e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801436a:	2301      	movs	r3, #1
 801436c:	e000      	b.n	8014370 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801436e:	2300      	movs	r3, #0
}
 8014370:	4618      	mov	r0, r3
 8014372:	3710      	adds	r7, #16
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014378:	b084      	sub	sp, #16
 801437a:	b580      	push	{r7, lr}
 801437c:	b086      	sub	sp, #24
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
 8014382:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801438a:	2300      	movs	r3, #0
 801438c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014392:	2300      	movs	r3, #0
 8014394:	613b      	str	r3, [r7, #16]
 8014396:	e009      	b.n	80143ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014398:	687a      	ldr	r2, [r7, #4]
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	3340      	adds	r3, #64	@ 0x40
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	4413      	add	r3, r2
 80143a2:	2200      	movs	r2, #0
 80143a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	3301      	adds	r3, #1
 80143aa:	613b      	str	r3, [r7, #16]
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	2b0e      	cmp	r3, #14
 80143b0:	d9f2      	bls.n	8014398 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80143b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d11c      	bne.n	80143f4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80143c0:	685b      	ldr	r3, [r3, #4]
 80143c2:	68fa      	ldr	r2, [r7, #12]
 80143c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80143c8:	f043 0302 	orr.w	r3, r3, #2
 80143cc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80143f2:	e00b      	b.n	801440c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014404:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014412:	461a      	mov	r2, r3
 8014414:	2300      	movs	r3, #0
 8014416:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014418:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801441c:	2b01      	cmp	r3, #1
 801441e:	d10d      	bne.n	801443c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014420:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014424:	2b00      	cmp	r3, #0
 8014426:	d104      	bne.n	8014432 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014428:	2100      	movs	r1, #0
 801442a:	6878      	ldr	r0, [r7, #4]
 801442c:	f000 f968 	bl	8014700 <USB_SetDevSpeed>
 8014430:	e008      	b.n	8014444 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014432:	2101      	movs	r1, #1
 8014434:	6878      	ldr	r0, [r7, #4]
 8014436:	f000 f963 	bl	8014700 <USB_SetDevSpeed>
 801443a:	e003      	b.n	8014444 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801443c:	2103      	movs	r1, #3
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f000 f95e 	bl	8014700 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014444:	2110      	movs	r1, #16
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f000 f8fa 	bl	8014640 <USB_FlushTxFifo>
 801444c:	4603      	mov	r3, r0
 801444e:	2b00      	cmp	r3, #0
 8014450:	d001      	beq.n	8014456 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8014452:	2301      	movs	r3, #1
 8014454:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f000 f924 	bl	80146a4 <USB_FlushRxFifo>
 801445c:	4603      	mov	r3, r0
 801445e:	2b00      	cmp	r3, #0
 8014460:	d001      	beq.n	8014466 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8014462:	2301      	movs	r3, #1
 8014464:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801446c:	461a      	mov	r2, r3
 801446e:	2300      	movs	r3, #0
 8014470:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014478:	461a      	mov	r2, r3
 801447a:	2300      	movs	r3, #0
 801447c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014484:	461a      	mov	r2, r3
 8014486:	2300      	movs	r3, #0
 8014488:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801448a:	2300      	movs	r3, #0
 801448c:	613b      	str	r3, [r7, #16]
 801448e:	e043      	b.n	8014518 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	015a      	lsls	r2, r3, #5
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	4413      	add	r3, r2
 8014498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80144a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80144a6:	d118      	bne.n	80144da <USB_DevInit+0x162>
    {
      if (i == 0U)
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d10a      	bne.n	80144c4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	015a      	lsls	r2, r3, #5
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	4413      	add	r3, r2
 80144b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144ba:	461a      	mov	r2, r3
 80144bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80144c0:	6013      	str	r3, [r2, #0]
 80144c2:	e013      	b.n	80144ec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80144c4:	693b      	ldr	r3, [r7, #16]
 80144c6:	015a      	lsls	r2, r3, #5
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	4413      	add	r3, r2
 80144cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144d0:	461a      	mov	r2, r3
 80144d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80144d6:	6013      	str	r3, [r2, #0]
 80144d8:	e008      	b.n	80144ec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	015a      	lsls	r2, r3, #5
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	4413      	add	r3, r2
 80144e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144e6:	461a      	mov	r2, r3
 80144e8:	2300      	movs	r3, #0
 80144ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	015a      	lsls	r2, r3, #5
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	4413      	add	r3, r2
 80144f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144f8:	461a      	mov	r2, r3
 80144fa:	2300      	movs	r3, #0
 80144fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	015a      	lsls	r2, r3, #5
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	4413      	add	r3, r2
 8014506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801450a:	461a      	mov	r2, r3
 801450c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014510:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	3301      	adds	r3, #1
 8014516:	613b      	str	r3, [r7, #16]
 8014518:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801451c:	461a      	mov	r2, r3
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	4293      	cmp	r3, r2
 8014522:	d3b5      	bcc.n	8014490 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014524:	2300      	movs	r3, #0
 8014526:	613b      	str	r3, [r7, #16]
 8014528:	e043      	b.n	80145b2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	015a      	lsls	r2, r3, #5
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	4413      	add	r3, r2
 8014532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801453c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014540:	d118      	bne.n	8014574 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d10a      	bne.n	801455e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	015a      	lsls	r2, r3, #5
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	4413      	add	r3, r2
 8014550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014554:	461a      	mov	r2, r3
 8014556:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801455a:	6013      	str	r3, [r2, #0]
 801455c:	e013      	b.n	8014586 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	015a      	lsls	r2, r3, #5
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	4413      	add	r3, r2
 8014566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801456a:	461a      	mov	r2, r3
 801456c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014570:	6013      	str	r3, [r2, #0]
 8014572:	e008      	b.n	8014586 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	015a      	lsls	r2, r3, #5
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	4413      	add	r3, r2
 801457c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014580:	461a      	mov	r2, r3
 8014582:	2300      	movs	r3, #0
 8014584:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	015a      	lsls	r2, r3, #5
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	4413      	add	r3, r2
 801458e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014592:	461a      	mov	r2, r3
 8014594:	2300      	movs	r3, #0
 8014596:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014598:	693b      	ldr	r3, [r7, #16]
 801459a:	015a      	lsls	r2, r3, #5
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	4413      	add	r3, r2
 80145a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145a4:	461a      	mov	r2, r3
 80145a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80145aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	3301      	adds	r3, #1
 80145b0:	613b      	str	r3, [r7, #16]
 80145b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80145b6:	461a      	mov	r2, r3
 80145b8:	693b      	ldr	r3, [r7, #16]
 80145ba:	4293      	cmp	r3, r2
 80145bc:	d3b5      	bcc.n	801452a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80145c4:	691b      	ldr	r3, [r3, #16]
 80145c6:	68fa      	ldr	r2, [r7, #12]
 80145c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80145cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80145d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2200      	movs	r2, #0
 80145d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80145de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80145e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d105      	bne.n	80145f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	699b      	ldr	r3, [r3, #24]
 80145ec:	f043 0210 	orr.w	r2, r3, #16
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	699a      	ldr	r2, [r3, #24]
 80145f8:	4b10      	ldr	r3, [pc, #64]	@ (801463c <USB_DevInit+0x2c4>)
 80145fa:	4313      	orrs	r3, r2
 80145fc:	687a      	ldr	r2, [r7, #4]
 80145fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014600:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014604:	2b00      	cmp	r3, #0
 8014606:	d005      	beq.n	8014614 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	699b      	ldr	r3, [r3, #24]
 801460c:	f043 0208 	orr.w	r2, r3, #8
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014614:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014618:	2b01      	cmp	r3, #1
 801461a:	d107      	bne.n	801462c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	699b      	ldr	r3, [r3, #24]
 8014620:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014624:	f043 0304 	orr.w	r3, r3, #4
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801462c:	7dfb      	ldrb	r3, [r7, #23]
}
 801462e:	4618      	mov	r0, r3
 8014630:	3718      	adds	r7, #24
 8014632:	46bd      	mov	sp, r7
 8014634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014638:	b004      	add	sp, #16
 801463a:	4770      	bx	lr
 801463c:	803c3800 	.word	0x803c3800

08014640 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014640:	b480      	push	{r7}
 8014642:	b085      	sub	sp, #20
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
 8014648:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801464a:	2300      	movs	r3, #0
 801464c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	3301      	adds	r3, #1
 8014652:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801465a:	d901      	bls.n	8014660 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801465c:	2303      	movs	r3, #3
 801465e:	e01b      	b.n	8014698 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	691b      	ldr	r3, [r3, #16]
 8014664:	2b00      	cmp	r3, #0
 8014666:	daf2      	bge.n	801464e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014668:	2300      	movs	r3, #0
 801466a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	019b      	lsls	r3, r3, #6
 8014670:	f043 0220 	orr.w	r2, r3, #32
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	3301      	adds	r3, #1
 801467c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014684:	d901      	bls.n	801468a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014686:	2303      	movs	r3, #3
 8014688:	e006      	b.n	8014698 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	691b      	ldr	r3, [r3, #16]
 801468e:	f003 0320 	and.w	r3, r3, #32
 8014692:	2b20      	cmp	r3, #32
 8014694:	d0f0      	beq.n	8014678 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014696:	2300      	movs	r3, #0
}
 8014698:	4618      	mov	r0, r3
 801469a:	3714      	adds	r7, #20
 801469c:	46bd      	mov	sp, r7
 801469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a2:	4770      	bx	lr

080146a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80146a4:	b480      	push	{r7}
 80146a6:	b085      	sub	sp, #20
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80146ac:	2300      	movs	r3, #0
 80146ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	3301      	adds	r3, #1
 80146b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80146bc:	d901      	bls.n	80146c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80146be:	2303      	movs	r3, #3
 80146c0:	e018      	b.n	80146f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	691b      	ldr	r3, [r3, #16]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	daf2      	bge.n	80146b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80146ca:	2300      	movs	r3, #0
 80146cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2210      	movs	r2, #16
 80146d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	3301      	adds	r3, #1
 80146d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80146e0:	d901      	bls.n	80146e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80146e2:	2303      	movs	r3, #3
 80146e4:	e006      	b.n	80146f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	691b      	ldr	r3, [r3, #16]
 80146ea:	f003 0310 	and.w	r3, r3, #16
 80146ee:	2b10      	cmp	r3, #16
 80146f0:	d0f0      	beq.n	80146d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80146f2:	2300      	movs	r3, #0
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3714      	adds	r7, #20
 80146f8:	46bd      	mov	sp, r7
 80146fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fe:	4770      	bx	lr

08014700 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014700:	b480      	push	{r7}
 8014702:	b085      	sub	sp, #20
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	460b      	mov	r3, r1
 801470a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014716:	681a      	ldr	r2, [r3, #0]
 8014718:	78fb      	ldrb	r3, [r7, #3]
 801471a:	68f9      	ldr	r1, [r7, #12]
 801471c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014720:	4313      	orrs	r3, r2
 8014722:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014724:	2300      	movs	r3, #0
}
 8014726:	4618      	mov	r0, r3
 8014728:	3714      	adds	r7, #20
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr

08014732 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8014732:	b480      	push	{r7}
 8014734:	b087      	sub	sp, #28
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014744:	689b      	ldr	r3, [r3, #8]
 8014746:	f003 0306 	and.w	r3, r3, #6
 801474a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d102      	bne.n	8014758 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014752:	2300      	movs	r3, #0
 8014754:	75fb      	strb	r3, [r7, #23]
 8014756:	e00a      	b.n	801476e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	2b02      	cmp	r3, #2
 801475c:	d002      	beq.n	8014764 <USB_GetDevSpeed+0x32>
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	2b06      	cmp	r3, #6
 8014762:	d102      	bne.n	801476a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014764:	2302      	movs	r3, #2
 8014766:	75fb      	strb	r3, [r7, #23]
 8014768:	e001      	b.n	801476e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801476a:	230f      	movs	r3, #15
 801476c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801476e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014770:	4618      	mov	r0, r3
 8014772:	371c      	adds	r7, #28
 8014774:	46bd      	mov	sp, r7
 8014776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477a:	4770      	bx	lr

0801477c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801477c:	b480      	push	{r7}
 801477e:	b085      	sub	sp, #20
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	785b      	ldrb	r3, [r3, #1]
 8014794:	2b01      	cmp	r3, #1
 8014796:	d13a      	bne.n	801480e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801479e:	69da      	ldr	r2, [r3, #28]
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	f003 030f 	and.w	r3, r3, #15
 80147a8:	2101      	movs	r1, #1
 80147aa:	fa01 f303 	lsl.w	r3, r1, r3
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	68f9      	ldr	r1, [r7, #12]
 80147b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80147b6:	4313      	orrs	r3, r2
 80147b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	015a      	lsls	r2, r3, #5
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	4413      	add	r3, r2
 80147c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d155      	bne.n	801487c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	015a      	lsls	r2, r3, #5
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	4413      	add	r3, r2
 80147d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	689b      	ldr	r3, [r3, #8]
 80147e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	791b      	ldrb	r3, [r3, #4]
 80147ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	059b      	lsls	r3, r3, #22
 80147f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147f4:	4313      	orrs	r3, r2
 80147f6:	68ba      	ldr	r2, [r7, #8]
 80147f8:	0151      	lsls	r1, r2, #5
 80147fa:	68fa      	ldr	r2, [r7, #12]
 80147fc:	440a      	add	r2, r1
 80147fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801480a:	6013      	str	r3, [r2, #0]
 801480c:	e036      	b.n	801487c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014814:	69da      	ldr	r2, [r3, #28]
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	f003 030f 	and.w	r3, r3, #15
 801481e:	2101      	movs	r1, #1
 8014820:	fa01 f303 	lsl.w	r3, r1, r3
 8014824:	041b      	lsls	r3, r3, #16
 8014826:	68f9      	ldr	r1, [r7, #12]
 8014828:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801482c:	4313      	orrs	r3, r2
 801482e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	015a      	lsls	r2, r3, #5
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	4413      	add	r3, r2
 8014838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014842:	2b00      	cmp	r3, #0
 8014844:	d11a      	bne.n	801487c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	015a      	lsls	r2, r3, #5
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	4413      	add	r3, r2
 801484e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014852:	681a      	ldr	r2, [r3, #0]
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	689b      	ldr	r3, [r3, #8]
 8014858:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	791b      	ldrb	r3, [r3, #4]
 8014860:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014862:	430b      	orrs	r3, r1
 8014864:	4313      	orrs	r3, r2
 8014866:	68ba      	ldr	r2, [r7, #8]
 8014868:	0151      	lsls	r1, r2, #5
 801486a:	68fa      	ldr	r2, [r7, #12]
 801486c:	440a      	add	r2, r1
 801486e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801487a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801487c:	2300      	movs	r3, #0
}
 801487e:	4618      	mov	r0, r3
 8014880:	3714      	adds	r7, #20
 8014882:	46bd      	mov	sp, r7
 8014884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014888:	4770      	bx	lr
	...

0801488c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801488c:	b480      	push	{r7}
 801488e:	b085      	sub	sp, #20
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	781b      	ldrb	r3, [r3, #0]
 801489e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	785b      	ldrb	r3, [r3, #1]
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d161      	bne.n	801496c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	015a      	lsls	r2, r3, #5
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	4413      	add	r3, r2
 80148b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80148ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80148be:	d11f      	bne.n	8014900 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	015a      	lsls	r2, r3, #5
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	4413      	add	r3, r2
 80148c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	68ba      	ldr	r2, [r7, #8]
 80148d0:	0151      	lsls	r1, r2, #5
 80148d2:	68fa      	ldr	r2, [r7, #12]
 80148d4:	440a      	add	r2, r1
 80148d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80148de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	015a      	lsls	r2, r3, #5
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	4413      	add	r3, r2
 80148e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	68ba      	ldr	r2, [r7, #8]
 80148f0:	0151      	lsls	r1, r2, #5
 80148f2:	68fa      	ldr	r2, [r7, #12]
 80148f4:	440a      	add	r2, r1
 80148f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80148fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	f003 030f 	and.w	r3, r3, #15
 8014910:	2101      	movs	r1, #1
 8014912:	fa01 f303 	lsl.w	r3, r1, r3
 8014916:	b29b      	uxth	r3, r3
 8014918:	43db      	mvns	r3, r3
 801491a:	68f9      	ldr	r1, [r7, #12]
 801491c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014920:	4013      	ands	r3, r2
 8014922:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801492a:	69da      	ldr	r2, [r3, #28]
 801492c:	683b      	ldr	r3, [r7, #0]
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	f003 030f 	and.w	r3, r3, #15
 8014934:	2101      	movs	r1, #1
 8014936:	fa01 f303 	lsl.w	r3, r1, r3
 801493a:	b29b      	uxth	r3, r3
 801493c:	43db      	mvns	r3, r3
 801493e:	68f9      	ldr	r1, [r7, #12]
 8014940:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014944:	4013      	ands	r3, r2
 8014946:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	015a      	lsls	r2, r3, #5
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	4413      	add	r3, r2
 8014950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	0159      	lsls	r1, r3, #5
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	440b      	add	r3, r1
 801495e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014962:	4619      	mov	r1, r3
 8014964:	4b35      	ldr	r3, [pc, #212]	@ (8014a3c <USB_DeactivateEndpoint+0x1b0>)
 8014966:	4013      	ands	r3, r2
 8014968:	600b      	str	r3, [r1, #0]
 801496a:	e060      	b.n	8014a2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	015a      	lsls	r2, r3, #5
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	4413      	add	r3, r2
 8014974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801497e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014982:	d11f      	bne.n	80149c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	015a      	lsls	r2, r3, #5
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	4413      	add	r3, r2
 801498c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	68ba      	ldr	r2, [r7, #8]
 8014994:	0151      	lsls	r1, r2, #5
 8014996:	68fa      	ldr	r2, [r7, #12]
 8014998:	440a      	add	r2, r1
 801499a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801499e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80149a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	015a      	lsls	r2, r3, #5
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	4413      	add	r3, r2
 80149ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	68ba      	ldr	r2, [r7, #8]
 80149b4:	0151      	lsls	r1, r2, #5
 80149b6:	68fa      	ldr	r2, [r7, #12]
 80149b8:	440a      	add	r2, r1
 80149ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80149be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80149c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	f003 030f 	and.w	r3, r3, #15
 80149d4:	2101      	movs	r1, #1
 80149d6:	fa01 f303 	lsl.w	r3, r1, r3
 80149da:	041b      	lsls	r3, r3, #16
 80149dc:	43db      	mvns	r3, r3
 80149de:	68f9      	ldr	r1, [r7, #12]
 80149e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149e4:	4013      	ands	r3, r2
 80149e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149ee:	69da      	ldr	r2, [r3, #28]
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	f003 030f 	and.w	r3, r3, #15
 80149f8:	2101      	movs	r1, #1
 80149fa:	fa01 f303 	lsl.w	r3, r1, r3
 80149fe:	041b      	lsls	r3, r3, #16
 8014a00:	43db      	mvns	r3, r3
 8014a02:	68f9      	ldr	r1, [r7, #12]
 8014a04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014a08:	4013      	ands	r3, r2
 8014a0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	015a      	lsls	r2, r3, #5
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	4413      	add	r3, r2
 8014a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a18:	681a      	ldr	r2, [r3, #0]
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	0159      	lsls	r1, r3, #5
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	440b      	add	r3, r1
 8014a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a26:	4619      	mov	r1, r3
 8014a28:	4b05      	ldr	r3, [pc, #20]	@ (8014a40 <USB_DeactivateEndpoint+0x1b4>)
 8014a2a:	4013      	ands	r3, r2
 8014a2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014a2e:	2300      	movs	r3, #0
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	3714      	adds	r7, #20
 8014a34:	46bd      	mov	sp, r7
 8014a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3a:	4770      	bx	lr
 8014a3c:	ec337800 	.word	0xec337800
 8014a40:	eff37800 	.word	0xeff37800

08014a44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b08a      	sub	sp, #40	@ 0x28
 8014a48:	af02      	add	r7, sp, #8
 8014a4a:	60f8      	str	r0, [r7, #12]
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	4613      	mov	r3, r2
 8014a50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	781b      	ldrb	r3, [r3, #0]
 8014a5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	785b      	ldrb	r3, [r3, #1]
 8014a60:	2b01      	cmp	r3, #1
 8014a62:	f040 817f 	bne.w	8014d64 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	691b      	ldr	r3, [r3, #16]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d132      	bne.n	8014ad4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	015a      	lsls	r2, r3, #5
 8014a72:	69fb      	ldr	r3, [r7, #28]
 8014a74:	4413      	add	r3, r2
 8014a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a7a:	691b      	ldr	r3, [r3, #16]
 8014a7c:	69ba      	ldr	r2, [r7, #24]
 8014a7e:	0151      	lsls	r1, r2, #5
 8014a80:	69fa      	ldr	r2, [r7, #28]
 8014a82:	440a      	add	r2, r1
 8014a84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8014a8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8014a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014a92:	69bb      	ldr	r3, [r7, #24]
 8014a94:	015a      	lsls	r2, r3, #5
 8014a96:	69fb      	ldr	r3, [r7, #28]
 8014a98:	4413      	add	r3, r2
 8014a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a9e:	691b      	ldr	r3, [r3, #16]
 8014aa0:	69ba      	ldr	r2, [r7, #24]
 8014aa2:	0151      	lsls	r1, r2, #5
 8014aa4:	69fa      	ldr	r2, [r7, #28]
 8014aa6:	440a      	add	r2, r1
 8014aa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014aac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014ab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	015a      	lsls	r2, r3, #5
 8014ab6:	69fb      	ldr	r3, [r7, #28]
 8014ab8:	4413      	add	r3, r2
 8014aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014abe:	691b      	ldr	r3, [r3, #16]
 8014ac0:	69ba      	ldr	r2, [r7, #24]
 8014ac2:	0151      	lsls	r1, r2, #5
 8014ac4:	69fa      	ldr	r2, [r7, #28]
 8014ac6:	440a      	add	r2, r1
 8014ac8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014acc:	0cdb      	lsrs	r3, r3, #19
 8014ace:	04db      	lsls	r3, r3, #19
 8014ad0:	6113      	str	r3, [r2, #16]
 8014ad2:	e097      	b.n	8014c04 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014ad4:	69bb      	ldr	r3, [r7, #24]
 8014ad6:	015a      	lsls	r2, r3, #5
 8014ad8:	69fb      	ldr	r3, [r7, #28]
 8014ada:	4413      	add	r3, r2
 8014adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ae0:	691b      	ldr	r3, [r3, #16]
 8014ae2:	69ba      	ldr	r2, [r7, #24]
 8014ae4:	0151      	lsls	r1, r2, #5
 8014ae6:	69fa      	ldr	r2, [r7, #28]
 8014ae8:	440a      	add	r2, r1
 8014aea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014aee:	0cdb      	lsrs	r3, r3, #19
 8014af0:	04db      	lsls	r3, r3, #19
 8014af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014af4:	69bb      	ldr	r3, [r7, #24]
 8014af6:	015a      	lsls	r2, r3, #5
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	4413      	add	r3, r2
 8014afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b00:	691b      	ldr	r3, [r3, #16]
 8014b02:	69ba      	ldr	r2, [r7, #24]
 8014b04:	0151      	lsls	r1, r2, #5
 8014b06:	69fa      	ldr	r2, [r7, #28]
 8014b08:	440a      	add	r2, r1
 8014b0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b0e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8014b12:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8014b16:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8014b18:	69bb      	ldr	r3, [r7, #24]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d11a      	bne.n	8014b54 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	691a      	ldr	r2, [r3, #16]
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	689b      	ldr	r3, [r3, #8]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d903      	bls.n	8014b32 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	689a      	ldr	r2, [r3, #8]
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014b32:	69bb      	ldr	r3, [r7, #24]
 8014b34:	015a      	lsls	r2, r3, #5
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	4413      	add	r3, r2
 8014b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b3e:	691b      	ldr	r3, [r3, #16]
 8014b40:	69ba      	ldr	r2, [r7, #24]
 8014b42:	0151      	lsls	r1, r2, #5
 8014b44:	69fa      	ldr	r2, [r7, #28]
 8014b46:	440a      	add	r2, r1
 8014b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b50:	6113      	str	r3, [r2, #16]
 8014b52:	e044      	b.n	8014bde <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	691a      	ldr	r2, [r3, #16]
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	689b      	ldr	r3, [r3, #8]
 8014b5c:	4413      	add	r3, r2
 8014b5e:	1e5a      	subs	r2, r3, #1
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	689b      	ldr	r3, [r3, #8]
 8014b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b68:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014b6a:	69bb      	ldr	r3, [r7, #24]
 8014b6c:	015a      	lsls	r2, r3, #5
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	4413      	add	r3, r2
 8014b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b76:	691a      	ldr	r2, [r3, #16]
 8014b78:	8afb      	ldrh	r3, [r7, #22]
 8014b7a:	04d9      	lsls	r1, r3, #19
 8014b7c:	4ba4      	ldr	r3, [pc, #656]	@ (8014e10 <USB_EPStartXfer+0x3cc>)
 8014b7e:	400b      	ands	r3, r1
 8014b80:	69b9      	ldr	r1, [r7, #24]
 8014b82:	0148      	lsls	r0, r1, #5
 8014b84:	69f9      	ldr	r1, [r7, #28]
 8014b86:	4401      	add	r1, r0
 8014b88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b8c:	4313      	orrs	r3, r2
 8014b8e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	791b      	ldrb	r3, [r3, #4]
 8014b94:	2b01      	cmp	r3, #1
 8014b96:	d122      	bne.n	8014bde <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014b98:	69bb      	ldr	r3, [r7, #24]
 8014b9a:	015a      	lsls	r2, r3, #5
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	4413      	add	r3, r2
 8014ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ba4:	691b      	ldr	r3, [r3, #16]
 8014ba6:	69ba      	ldr	r2, [r7, #24]
 8014ba8:	0151      	lsls	r1, r2, #5
 8014baa:	69fa      	ldr	r2, [r7, #28]
 8014bac:	440a      	add	r2, r1
 8014bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014bb2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014bb6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014bb8:	69bb      	ldr	r3, [r7, #24]
 8014bba:	015a      	lsls	r2, r3, #5
 8014bbc:	69fb      	ldr	r3, [r7, #28]
 8014bbe:	4413      	add	r3, r2
 8014bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bc4:	691a      	ldr	r2, [r3, #16]
 8014bc6:	8afb      	ldrh	r3, [r7, #22]
 8014bc8:	075b      	lsls	r3, r3, #29
 8014bca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014bce:	69b9      	ldr	r1, [r7, #24]
 8014bd0:	0148      	lsls	r0, r1, #5
 8014bd2:	69f9      	ldr	r1, [r7, #28]
 8014bd4:	4401      	add	r1, r0
 8014bd6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014bda:	4313      	orrs	r3, r2
 8014bdc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014bde:	69bb      	ldr	r3, [r7, #24]
 8014be0:	015a      	lsls	r2, r3, #5
 8014be2:	69fb      	ldr	r3, [r7, #28]
 8014be4:	4413      	add	r3, r2
 8014be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bea:	691a      	ldr	r2, [r3, #16]
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	691b      	ldr	r3, [r3, #16]
 8014bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014bf4:	69b9      	ldr	r1, [r7, #24]
 8014bf6:	0148      	lsls	r0, r1, #5
 8014bf8:	69f9      	ldr	r1, [r7, #28]
 8014bfa:	4401      	add	r1, r0
 8014bfc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014c00:	4313      	orrs	r3, r2
 8014c02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014c04:	79fb      	ldrb	r3, [r7, #7]
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d14b      	bne.n	8014ca2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	69db      	ldr	r3, [r3, #28]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d009      	beq.n	8014c26 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014c12:	69bb      	ldr	r3, [r7, #24]
 8014c14:	015a      	lsls	r2, r3, #5
 8014c16:	69fb      	ldr	r3, [r7, #28]
 8014c18:	4413      	add	r3, r2
 8014c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c1e:	461a      	mov	r2, r3
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	69db      	ldr	r3, [r3, #28]
 8014c24:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	791b      	ldrb	r3, [r3, #4]
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d128      	bne.n	8014c80 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014c2e:	69fb      	ldr	r3, [r7, #28]
 8014c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c34:	689b      	ldr	r3, [r3, #8]
 8014c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d110      	bne.n	8014c60 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014c3e:	69bb      	ldr	r3, [r7, #24]
 8014c40:	015a      	lsls	r2, r3, #5
 8014c42:	69fb      	ldr	r3, [r7, #28]
 8014c44:	4413      	add	r3, r2
 8014c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	69ba      	ldr	r2, [r7, #24]
 8014c4e:	0151      	lsls	r1, r2, #5
 8014c50:	69fa      	ldr	r2, [r7, #28]
 8014c52:	440a      	add	r2, r1
 8014c54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014c5c:	6013      	str	r3, [r2, #0]
 8014c5e:	e00f      	b.n	8014c80 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014c60:	69bb      	ldr	r3, [r7, #24]
 8014c62:	015a      	lsls	r2, r3, #5
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	4413      	add	r3, r2
 8014c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	69ba      	ldr	r2, [r7, #24]
 8014c70:	0151      	lsls	r1, r2, #5
 8014c72:	69fa      	ldr	r2, [r7, #28]
 8014c74:	440a      	add	r2, r1
 8014c76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014c7e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c80:	69bb      	ldr	r3, [r7, #24]
 8014c82:	015a      	lsls	r2, r3, #5
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	4413      	add	r3, r2
 8014c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	69ba      	ldr	r2, [r7, #24]
 8014c90:	0151      	lsls	r1, r2, #5
 8014c92:	69fa      	ldr	r2, [r7, #28]
 8014c94:	440a      	add	r2, r1
 8014c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014c9e:	6013      	str	r3, [r2, #0]
 8014ca0:	e166      	b.n	8014f70 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ca2:	69bb      	ldr	r3, [r7, #24]
 8014ca4:	015a      	lsls	r2, r3, #5
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	4413      	add	r3, r2
 8014caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	69ba      	ldr	r2, [r7, #24]
 8014cb2:	0151      	lsls	r1, r2, #5
 8014cb4:	69fa      	ldr	r2, [r7, #28]
 8014cb6:	440a      	add	r2, r1
 8014cb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cbc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014cc0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	791b      	ldrb	r3, [r3, #4]
 8014cc6:	2b01      	cmp	r3, #1
 8014cc8:	d015      	beq.n	8014cf6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	691b      	ldr	r3, [r3, #16]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	f000 814e 	beq.w	8014f70 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014cd4:	69fb      	ldr	r3, [r7, #28]
 8014cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	f003 030f 	and.w	r3, r3, #15
 8014ce4:	2101      	movs	r1, #1
 8014ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8014cea:	69f9      	ldr	r1, [r7, #28]
 8014cec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014cf0:	4313      	orrs	r3, r2
 8014cf2:	634b      	str	r3, [r1, #52]	@ 0x34
 8014cf4:	e13c      	b.n	8014f70 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014cf6:	69fb      	ldr	r3, [r7, #28]
 8014cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cfc:	689b      	ldr	r3, [r3, #8]
 8014cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d110      	bne.n	8014d28 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014d06:	69bb      	ldr	r3, [r7, #24]
 8014d08:	015a      	lsls	r2, r3, #5
 8014d0a:	69fb      	ldr	r3, [r7, #28]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	69ba      	ldr	r2, [r7, #24]
 8014d16:	0151      	lsls	r1, r2, #5
 8014d18:	69fa      	ldr	r2, [r7, #28]
 8014d1a:	440a      	add	r2, r1
 8014d1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014d24:	6013      	str	r3, [r2, #0]
 8014d26:	e00f      	b.n	8014d48 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	015a      	lsls	r2, r3, #5
 8014d2c:	69fb      	ldr	r3, [r7, #28]
 8014d2e:	4413      	add	r3, r2
 8014d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	69ba      	ldr	r2, [r7, #24]
 8014d38:	0151      	lsls	r1, r2, #5
 8014d3a:	69fa      	ldr	r2, [r7, #28]
 8014d3c:	440a      	add	r2, r1
 8014d3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014d46:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	68d9      	ldr	r1, [r3, #12]
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	781a      	ldrb	r2, [r3, #0]
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	691b      	ldr	r3, [r3, #16]
 8014d54:	b298      	uxth	r0, r3
 8014d56:	79fb      	ldrb	r3, [r7, #7]
 8014d58:	9300      	str	r3, [sp, #0]
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	68f8      	ldr	r0, [r7, #12]
 8014d5e:	f000 f9b9 	bl	80150d4 <USB_WritePacket>
 8014d62:	e105      	b.n	8014f70 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	015a      	lsls	r2, r3, #5
 8014d68:	69fb      	ldr	r3, [r7, #28]
 8014d6a:	4413      	add	r3, r2
 8014d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d70:	691b      	ldr	r3, [r3, #16]
 8014d72:	69ba      	ldr	r2, [r7, #24]
 8014d74:	0151      	lsls	r1, r2, #5
 8014d76:	69fa      	ldr	r2, [r7, #28]
 8014d78:	440a      	add	r2, r1
 8014d7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d7e:	0cdb      	lsrs	r3, r3, #19
 8014d80:	04db      	lsls	r3, r3, #19
 8014d82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014d84:	69bb      	ldr	r3, [r7, #24]
 8014d86:	015a      	lsls	r2, r3, #5
 8014d88:	69fb      	ldr	r3, [r7, #28]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d90:	691b      	ldr	r3, [r3, #16]
 8014d92:	69ba      	ldr	r2, [r7, #24]
 8014d94:	0151      	lsls	r1, r2, #5
 8014d96:	69fa      	ldr	r2, [r7, #28]
 8014d98:	440a      	add	r2, r1
 8014d9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d9e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8014da2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8014da6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8014da8:	69bb      	ldr	r3, [r7, #24]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d132      	bne.n	8014e14 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	691b      	ldr	r3, [r3, #16]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d003      	beq.n	8014dbe <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	689a      	ldr	r2, [r3, #8]
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	689a      	ldr	r2, [r3, #8]
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014dc6:	69bb      	ldr	r3, [r7, #24]
 8014dc8:	015a      	lsls	r2, r3, #5
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	4413      	add	r3, r2
 8014dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dd2:	691a      	ldr	r2, [r3, #16]
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	6a1b      	ldr	r3, [r3, #32]
 8014dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ddc:	69b9      	ldr	r1, [r7, #24]
 8014dde:	0148      	lsls	r0, r1, #5
 8014de0:	69f9      	ldr	r1, [r7, #28]
 8014de2:	4401      	add	r1, r0
 8014de4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014de8:	4313      	orrs	r3, r2
 8014dea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	015a      	lsls	r2, r3, #5
 8014df0:	69fb      	ldr	r3, [r7, #28]
 8014df2:	4413      	add	r3, r2
 8014df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014df8:	691b      	ldr	r3, [r3, #16]
 8014dfa:	69ba      	ldr	r2, [r7, #24]
 8014dfc:	0151      	lsls	r1, r2, #5
 8014dfe:	69fa      	ldr	r2, [r7, #28]
 8014e00:	440a      	add	r2, r1
 8014e02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014e0a:	6113      	str	r3, [r2, #16]
 8014e0c:	e062      	b.n	8014ed4 <USB_EPStartXfer+0x490>
 8014e0e:	bf00      	nop
 8014e10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	691b      	ldr	r3, [r3, #16]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d123      	bne.n	8014e64 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014e1c:	69bb      	ldr	r3, [r7, #24]
 8014e1e:	015a      	lsls	r2, r3, #5
 8014e20:	69fb      	ldr	r3, [r7, #28]
 8014e22:	4413      	add	r3, r2
 8014e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e28:	691a      	ldr	r2, [r3, #16]
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	689b      	ldr	r3, [r3, #8]
 8014e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e32:	69b9      	ldr	r1, [r7, #24]
 8014e34:	0148      	lsls	r0, r1, #5
 8014e36:	69f9      	ldr	r1, [r7, #28]
 8014e38:	4401      	add	r1, r0
 8014e3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e3e:	4313      	orrs	r3, r2
 8014e40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	015a      	lsls	r2, r3, #5
 8014e46:	69fb      	ldr	r3, [r7, #28]
 8014e48:	4413      	add	r3, r2
 8014e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e4e:	691b      	ldr	r3, [r3, #16]
 8014e50:	69ba      	ldr	r2, [r7, #24]
 8014e52:	0151      	lsls	r1, r2, #5
 8014e54:	69fa      	ldr	r2, [r7, #28]
 8014e56:	440a      	add	r2, r1
 8014e58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014e60:	6113      	str	r3, [r2, #16]
 8014e62:	e037      	b.n	8014ed4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	691a      	ldr	r2, [r3, #16]
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	689b      	ldr	r3, [r3, #8]
 8014e6c:	4413      	add	r3, r2
 8014e6e:	1e5a      	subs	r2, r3, #1
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	689b      	ldr	r3, [r3, #8]
 8014e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e78:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	689b      	ldr	r3, [r3, #8]
 8014e7e:	8afa      	ldrh	r2, [r7, #22]
 8014e80:	fb03 f202 	mul.w	r2, r3, r2
 8014e84:	68bb      	ldr	r3, [r7, #8]
 8014e86:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014e88:	69bb      	ldr	r3, [r7, #24]
 8014e8a:	015a      	lsls	r2, r3, #5
 8014e8c:	69fb      	ldr	r3, [r7, #28]
 8014e8e:	4413      	add	r3, r2
 8014e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e94:	691a      	ldr	r2, [r3, #16]
 8014e96:	8afb      	ldrh	r3, [r7, #22]
 8014e98:	04d9      	lsls	r1, r3, #19
 8014e9a:	4b38      	ldr	r3, [pc, #224]	@ (8014f7c <USB_EPStartXfer+0x538>)
 8014e9c:	400b      	ands	r3, r1
 8014e9e:	69b9      	ldr	r1, [r7, #24]
 8014ea0:	0148      	lsls	r0, r1, #5
 8014ea2:	69f9      	ldr	r1, [r7, #28]
 8014ea4:	4401      	add	r1, r0
 8014ea6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014eaa:	4313      	orrs	r3, r2
 8014eac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014eae:	69bb      	ldr	r3, [r7, #24]
 8014eb0:	015a      	lsls	r2, r3, #5
 8014eb2:	69fb      	ldr	r3, [r7, #28]
 8014eb4:	4413      	add	r3, r2
 8014eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014eba:	691a      	ldr	r2, [r3, #16]
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	6a1b      	ldr	r3, [r3, #32]
 8014ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ec4:	69b9      	ldr	r1, [r7, #24]
 8014ec6:	0148      	lsls	r0, r1, #5
 8014ec8:	69f9      	ldr	r1, [r7, #28]
 8014eca:	4401      	add	r1, r0
 8014ecc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014ed0:	4313      	orrs	r3, r2
 8014ed2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014ed4:	79fb      	ldrb	r3, [r7, #7]
 8014ed6:	2b01      	cmp	r3, #1
 8014ed8:	d10d      	bne.n	8014ef6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014eda:	68bb      	ldr	r3, [r7, #8]
 8014edc:	68db      	ldr	r3, [r3, #12]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d009      	beq.n	8014ef6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014ee2:	68bb      	ldr	r3, [r7, #8]
 8014ee4:	68d9      	ldr	r1, [r3, #12]
 8014ee6:	69bb      	ldr	r3, [r7, #24]
 8014ee8:	015a      	lsls	r2, r3, #5
 8014eea:	69fb      	ldr	r3, [r7, #28]
 8014eec:	4413      	add	r3, r2
 8014eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ef2:	460a      	mov	r2, r1
 8014ef4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	791b      	ldrb	r3, [r3, #4]
 8014efa:	2b01      	cmp	r3, #1
 8014efc:	d128      	bne.n	8014f50 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014efe:	69fb      	ldr	r3, [r7, #28]
 8014f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f04:	689b      	ldr	r3, [r3, #8]
 8014f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d110      	bne.n	8014f30 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014f0e:	69bb      	ldr	r3, [r7, #24]
 8014f10:	015a      	lsls	r2, r3, #5
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	4413      	add	r3, r2
 8014f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	69ba      	ldr	r2, [r7, #24]
 8014f1e:	0151      	lsls	r1, r2, #5
 8014f20:	69fa      	ldr	r2, [r7, #28]
 8014f22:	440a      	add	r2, r1
 8014f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014f2c:	6013      	str	r3, [r2, #0]
 8014f2e:	e00f      	b.n	8014f50 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014f30:	69bb      	ldr	r3, [r7, #24]
 8014f32:	015a      	lsls	r2, r3, #5
 8014f34:	69fb      	ldr	r3, [r7, #28]
 8014f36:	4413      	add	r3, r2
 8014f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	69ba      	ldr	r2, [r7, #24]
 8014f40:	0151      	lsls	r1, r2, #5
 8014f42:	69fa      	ldr	r2, [r7, #28]
 8014f44:	440a      	add	r2, r1
 8014f46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014f4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014f50:	69bb      	ldr	r3, [r7, #24]
 8014f52:	015a      	lsls	r2, r3, #5
 8014f54:	69fb      	ldr	r3, [r7, #28]
 8014f56:	4413      	add	r3, r2
 8014f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	69ba      	ldr	r2, [r7, #24]
 8014f60:	0151      	lsls	r1, r2, #5
 8014f62:	69fa      	ldr	r2, [r7, #28]
 8014f64:	440a      	add	r2, r1
 8014f66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014f6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f70:	2300      	movs	r3, #0
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3720      	adds	r7, #32
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	1ff80000 	.word	0x1ff80000

08014f80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014f80:	b480      	push	{r7}
 8014f82:	b087      	sub	sp, #28
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	785b      	ldrb	r3, [r3, #1]
 8014f9a:	2b01      	cmp	r3, #1
 8014f9c:	d14a      	bne.n	8015034 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	781b      	ldrb	r3, [r3, #0]
 8014fa2:	015a      	lsls	r2, r3, #5
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	4413      	add	r3, r2
 8014fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014fb6:	f040 8086 	bne.w	80150c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	015a      	lsls	r2, r3, #5
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	4413      	add	r3, r2
 8014fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	683a      	ldr	r2, [r7, #0]
 8014fcc:	7812      	ldrb	r2, [r2, #0]
 8014fce:	0151      	lsls	r1, r2, #5
 8014fd0:	693a      	ldr	r2, [r7, #16]
 8014fd2:	440a      	add	r2, r1
 8014fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014fd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014fdc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	781b      	ldrb	r3, [r3, #0]
 8014fe2:	015a      	lsls	r2, r3, #5
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	4413      	add	r3, r2
 8014fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	683a      	ldr	r2, [r7, #0]
 8014ff0:	7812      	ldrb	r2, [r2, #0]
 8014ff2:	0151      	lsls	r1, r2, #5
 8014ff4:	693a      	ldr	r2, [r7, #16]
 8014ff6:	440a      	add	r2, r1
 8014ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ffc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015000:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	3301      	adds	r3, #1
 8015006:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801500e:	4293      	cmp	r3, r2
 8015010:	d902      	bls.n	8015018 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8015012:	2301      	movs	r3, #1
 8015014:	75fb      	strb	r3, [r7, #23]
          break;
 8015016:	e056      	b.n	80150c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	781b      	ldrb	r3, [r3, #0]
 801501c:	015a      	lsls	r2, r3, #5
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	4413      	add	r3, r2
 8015022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801502c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015030:	d0e7      	beq.n	8015002 <USB_EPStopXfer+0x82>
 8015032:	e048      	b.n	80150c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015034:	683b      	ldr	r3, [r7, #0]
 8015036:	781b      	ldrb	r3, [r3, #0]
 8015038:	015a      	lsls	r2, r3, #5
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	4413      	add	r3, r2
 801503e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015048:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801504c:	d13b      	bne.n	80150c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	781b      	ldrb	r3, [r3, #0]
 8015052:	015a      	lsls	r2, r3, #5
 8015054:	693b      	ldr	r3, [r7, #16]
 8015056:	4413      	add	r3, r2
 8015058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	683a      	ldr	r2, [r7, #0]
 8015060:	7812      	ldrb	r2, [r2, #0]
 8015062:	0151      	lsls	r1, r2, #5
 8015064:	693a      	ldr	r2, [r7, #16]
 8015066:	440a      	add	r2, r1
 8015068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801506c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015070:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	781b      	ldrb	r3, [r3, #0]
 8015076:	015a      	lsls	r2, r3, #5
 8015078:	693b      	ldr	r3, [r7, #16]
 801507a:	4413      	add	r3, r2
 801507c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	683a      	ldr	r2, [r7, #0]
 8015084:	7812      	ldrb	r2, [r2, #0]
 8015086:	0151      	lsls	r1, r2, #5
 8015088:	693a      	ldr	r2, [r7, #16]
 801508a:	440a      	add	r2, r1
 801508c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015090:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015094:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	3301      	adds	r3, #1
 801509a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80150a2:	4293      	cmp	r3, r2
 80150a4:	d902      	bls.n	80150ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80150a6:	2301      	movs	r3, #1
 80150a8:	75fb      	strb	r3, [r7, #23]
          break;
 80150aa:	e00c      	b.n	80150c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	015a      	lsls	r2, r3, #5
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	4413      	add	r3, r2
 80150b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150c4:	d0e7      	beq.n	8015096 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80150c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	371c      	adds	r7, #28
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr

080150d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80150d4:	b480      	push	{r7}
 80150d6:	b089      	sub	sp, #36	@ 0x24
 80150d8:	af00      	add	r7, sp, #0
 80150da:	60f8      	str	r0, [r7, #12]
 80150dc:	60b9      	str	r1, [r7, #8]
 80150de:	4611      	mov	r1, r2
 80150e0:	461a      	mov	r2, r3
 80150e2:	460b      	mov	r3, r1
 80150e4:	71fb      	strb	r3, [r7, #7]
 80150e6:	4613      	mov	r3, r2
 80150e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80150ee:	68bb      	ldr	r3, [r7, #8]
 80150f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80150f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d123      	bne.n	8015142 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80150fa:	88bb      	ldrh	r3, [r7, #4]
 80150fc:	3303      	adds	r3, #3
 80150fe:	089b      	lsrs	r3, r3, #2
 8015100:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015102:	2300      	movs	r3, #0
 8015104:	61bb      	str	r3, [r7, #24]
 8015106:	e018      	b.n	801513a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015108:	79fb      	ldrb	r3, [r7, #7]
 801510a:	031a      	lsls	r2, r3, #12
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	4413      	add	r3, r2
 8015110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015114:	461a      	mov	r2, r3
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801511c:	69fb      	ldr	r3, [r7, #28]
 801511e:	3301      	adds	r3, #1
 8015120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015122:	69fb      	ldr	r3, [r7, #28]
 8015124:	3301      	adds	r3, #1
 8015126:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015128:	69fb      	ldr	r3, [r7, #28]
 801512a:	3301      	adds	r3, #1
 801512c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	3301      	adds	r3, #1
 8015132:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015134:	69bb      	ldr	r3, [r7, #24]
 8015136:	3301      	adds	r3, #1
 8015138:	61bb      	str	r3, [r7, #24]
 801513a:	69ba      	ldr	r2, [r7, #24]
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	429a      	cmp	r2, r3
 8015140:	d3e2      	bcc.n	8015108 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015142:	2300      	movs	r3, #0
}
 8015144:	4618      	mov	r0, r3
 8015146:	3724      	adds	r7, #36	@ 0x24
 8015148:	46bd      	mov	sp, r7
 801514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514e:	4770      	bx	lr

08015150 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015150:	b480      	push	{r7}
 8015152:	b08b      	sub	sp, #44	@ 0x2c
 8015154:	af00      	add	r7, sp, #0
 8015156:	60f8      	str	r0, [r7, #12]
 8015158:	60b9      	str	r1, [r7, #8]
 801515a:	4613      	mov	r3, r2
 801515c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015166:	88fb      	ldrh	r3, [r7, #6]
 8015168:	089b      	lsrs	r3, r3, #2
 801516a:	b29b      	uxth	r3, r3
 801516c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801516e:	88fb      	ldrh	r3, [r7, #6]
 8015170:	f003 0303 	and.w	r3, r3, #3
 8015174:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015176:	2300      	movs	r3, #0
 8015178:	623b      	str	r3, [r7, #32]
 801517a:	e014      	b.n	80151a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015182:	681a      	ldr	r2, [r3, #0]
 8015184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015186:	601a      	str	r2, [r3, #0]
    pDest++;
 8015188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801518a:	3301      	adds	r3, #1
 801518c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015190:	3301      	adds	r3, #1
 8015192:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015196:	3301      	adds	r3, #1
 8015198:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801519c:	3301      	adds	r3, #1
 801519e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80151a0:	6a3b      	ldr	r3, [r7, #32]
 80151a2:	3301      	adds	r3, #1
 80151a4:	623b      	str	r3, [r7, #32]
 80151a6:	6a3a      	ldr	r2, [r7, #32]
 80151a8:	697b      	ldr	r3, [r7, #20]
 80151aa:	429a      	cmp	r2, r3
 80151ac:	d3e6      	bcc.n	801517c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80151ae:	8bfb      	ldrh	r3, [r7, #30]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d01e      	beq.n	80151f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80151b4:	2300      	movs	r3, #0
 80151b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80151b8:	69bb      	ldr	r3, [r7, #24]
 80151ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80151be:	461a      	mov	r2, r3
 80151c0:	f107 0310 	add.w	r3, r7, #16
 80151c4:	6812      	ldr	r2, [r2, #0]
 80151c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80151c8:	693a      	ldr	r2, [r7, #16]
 80151ca:	6a3b      	ldr	r3, [r7, #32]
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	00db      	lsls	r3, r3, #3
 80151d0:	fa22 f303 	lsr.w	r3, r2, r3
 80151d4:	b2da      	uxtb	r2, r3
 80151d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d8:	701a      	strb	r2, [r3, #0]
      i++;
 80151da:	6a3b      	ldr	r3, [r7, #32]
 80151dc:	3301      	adds	r3, #1
 80151de:	623b      	str	r3, [r7, #32]
      pDest++;
 80151e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e2:	3301      	adds	r3, #1
 80151e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80151e6:	8bfb      	ldrh	r3, [r7, #30]
 80151e8:	3b01      	subs	r3, #1
 80151ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80151ec:	8bfb      	ldrh	r3, [r7, #30]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d1ea      	bne.n	80151c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80151f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	372c      	adds	r7, #44	@ 0x2c
 80151f8:	46bd      	mov	sp, r7
 80151fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fe:	4770      	bx	lr

08015200 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015200:	b480      	push	{r7}
 8015202:	b085      	sub	sp, #20
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	781b      	ldrb	r3, [r3, #0]
 8015212:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	785b      	ldrb	r3, [r3, #1]
 8015218:	2b01      	cmp	r3, #1
 801521a:	d12c      	bne.n	8015276 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	015a      	lsls	r2, r3, #5
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	4413      	add	r3, r2
 8015224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	2b00      	cmp	r3, #0
 801522c:	db12      	blt.n	8015254 <USB_EPSetStall+0x54>
 801522e:	68bb      	ldr	r3, [r7, #8]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d00f      	beq.n	8015254 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	015a      	lsls	r2, r3, #5
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	4413      	add	r3, r2
 801523c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	68ba      	ldr	r2, [r7, #8]
 8015244:	0151      	lsls	r1, r2, #5
 8015246:	68fa      	ldr	r2, [r7, #12]
 8015248:	440a      	add	r2, r1
 801524a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801524e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015252:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	015a      	lsls	r2, r3, #5
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	4413      	add	r3, r2
 801525c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	68ba      	ldr	r2, [r7, #8]
 8015264:	0151      	lsls	r1, r2, #5
 8015266:	68fa      	ldr	r2, [r7, #12]
 8015268:	440a      	add	r2, r1
 801526a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801526e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015272:	6013      	str	r3, [r2, #0]
 8015274:	e02b      	b.n	80152ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015276:	68bb      	ldr	r3, [r7, #8]
 8015278:	015a      	lsls	r2, r3, #5
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	4413      	add	r3, r2
 801527e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	db12      	blt.n	80152ae <USB_EPSetStall+0xae>
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d00f      	beq.n	80152ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	015a      	lsls	r2, r3, #5
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	4413      	add	r3, r2
 8015296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	68ba      	ldr	r2, [r7, #8]
 801529e:	0151      	lsls	r1, r2, #5
 80152a0:	68fa      	ldr	r2, [r7, #12]
 80152a2:	440a      	add	r2, r1
 80152a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80152a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80152ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80152ae:	68bb      	ldr	r3, [r7, #8]
 80152b0:	015a      	lsls	r2, r3, #5
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	4413      	add	r3, r2
 80152b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	68ba      	ldr	r2, [r7, #8]
 80152be:	0151      	lsls	r1, r2, #5
 80152c0:	68fa      	ldr	r2, [r7, #12]
 80152c2:	440a      	add	r2, r1
 80152c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80152c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80152cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80152ce:	2300      	movs	r3, #0
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3714      	adds	r7, #20
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr

080152dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80152dc:	b480      	push	{r7}
 80152de:	b085      	sub	sp, #20
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	785b      	ldrb	r3, [r3, #1]
 80152f4:	2b01      	cmp	r3, #1
 80152f6:	d128      	bne.n	801534a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	015a      	lsls	r2, r3, #5
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	4413      	add	r3, r2
 8015300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	68ba      	ldr	r2, [r7, #8]
 8015308:	0151      	lsls	r1, r2, #5
 801530a:	68fa      	ldr	r2, [r7, #12]
 801530c:	440a      	add	r2, r1
 801530e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015312:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015316:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	791b      	ldrb	r3, [r3, #4]
 801531c:	2b03      	cmp	r3, #3
 801531e:	d003      	beq.n	8015328 <USB_EPClearStall+0x4c>
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	791b      	ldrb	r3, [r3, #4]
 8015324:	2b02      	cmp	r3, #2
 8015326:	d138      	bne.n	801539a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	015a      	lsls	r2, r3, #5
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	4413      	add	r3, r2
 8015330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	68ba      	ldr	r2, [r7, #8]
 8015338:	0151      	lsls	r1, r2, #5
 801533a:	68fa      	ldr	r2, [r7, #12]
 801533c:	440a      	add	r2, r1
 801533e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015346:	6013      	str	r3, [r2, #0]
 8015348:	e027      	b.n	801539a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801534a:	68bb      	ldr	r3, [r7, #8]
 801534c:	015a      	lsls	r2, r3, #5
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	4413      	add	r3, r2
 8015352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	68ba      	ldr	r2, [r7, #8]
 801535a:	0151      	lsls	r1, r2, #5
 801535c:	68fa      	ldr	r2, [r7, #12]
 801535e:	440a      	add	r2, r1
 8015360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015364:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015368:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	791b      	ldrb	r3, [r3, #4]
 801536e:	2b03      	cmp	r3, #3
 8015370:	d003      	beq.n	801537a <USB_EPClearStall+0x9e>
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	791b      	ldrb	r3, [r3, #4]
 8015376:	2b02      	cmp	r3, #2
 8015378:	d10f      	bne.n	801539a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	015a      	lsls	r2, r3, #5
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	4413      	add	r3, r2
 8015382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	68ba      	ldr	r2, [r7, #8]
 801538a:	0151      	lsls	r1, r2, #5
 801538c:	68fa      	ldr	r2, [r7, #12]
 801538e:	440a      	add	r2, r1
 8015390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015398:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801539a:	2300      	movs	r3, #0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3714      	adds	r7, #20
 80153a0:	46bd      	mov	sp, r7
 80153a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a6:	4770      	bx	lr

080153a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80153a8:	b480      	push	{r7}
 80153aa:	b085      	sub	sp, #20
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	460b      	mov	r3, r1
 80153b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	68fa      	ldr	r2, [r7, #12]
 80153c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80153c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80153ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	78fb      	ldrb	r3, [r7, #3]
 80153d6:	011b      	lsls	r3, r3, #4
 80153d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80153dc:	68f9      	ldr	r1, [r7, #12]
 80153de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80153e2:	4313      	orrs	r3, r2
 80153e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80153e6:	2300      	movs	r3, #0
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3714      	adds	r7, #20
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr

080153f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80153f4:	b480      	push	{r7}
 80153f6:	b085      	sub	sp, #20
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	68fa      	ldr	r2, [r7, #12]
 801540a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801540e:	f023 0303 	bic.w	r3, r3, #3
 8015412:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801541a:	685b      	ldr	r3, [r3, #4]
 801541c:	68fa      	ldr	r2, [r7, #12]
 801541e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015422:	f023 0302 	bic.w	r3, r3, #2
 8015426:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015428:	2300      	movs	r3, #0
}
 801542a:	4618      	mov	r0, r3
 801542c:	3714      	adds	r7, #20
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr

08015436 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015436:	b480      	push	{r7}
 8015438:	b085      	sub	sp, #20
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	68fa      	ldr	r2, [r7, #12]
 801544c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015450:	f023 0303 	bic.w	r3, r3, #3
 8015454:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015464:	f043 0302 	orr.w	r3, r3, #2
 8015468:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801546a:	2300      	movs	r3, #0
}
 801546c:	4618      	mov	r0, r3
 801546e:	3714      	adds	r7, #20
 8015470:	46bd      	mov	sp, r7
 8015472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015476:	4770      	bx	lr

08015478 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015478:	b480      	push	{r7}
 801547a:	b085      	sub	sp, #20
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	695b      	ldr	r3, [r3, #20]
 8015484:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	699b      	ldr	r3, [r3, #24]
 801548a:	68fa      	ldr	r2, [r7, #12]
 801548c:	4013      	ands	r3, r2
 801548e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015490:	68fb      	ldr	r3, [r7, #12]
}
 8015492:	4618      	mov	r0, r3
 8015494:	3714      	adds	r7, #20
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr

0801549e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801549e:	b480      	push	{r7}
 80154a0:	b085      	sub	sp, #20
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154b0:	699b      	ldr	r3, [r3, #24]
 80154b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154ba:	69db      	ldr	r3, [r3, #28]
 80154bc:	68ba      	ldr	r2, [r7, #8]
 80154be:	4013      	ands	r3, r2
 80154c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	0c1b      	lsrs	r3, r3, #16
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	3714      	adds	r7, #20
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	4770      	bx	lr

080154d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80154d2:	b480      	push	{r7}
 80154d4:	b085      	sub	sp, #20
 80154d6:	af00      	add	r7, sp, #0
 80154d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154e4:	699b      	ldr	r3, [r3, #24]
 80154e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154ee:	69db      	ldr	r3, [r3, #28]
 80154f0:	68ba      	ldr	r2, [r7, #8]
 80154f2:	4013      	ands	r3, r2
 80154f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	b29b      	uxth	r3, r3
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3714      	adds	r7, #20
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr

08015506 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015506:	b480      	push	{r7}
 8015508:	b085      	sub	sp, #20
 801550a:	af00      	add	r7, sp, #0
 801550c:	6078      	str	r0, [r7, #4]
 801550e:	460b      	mov	r3, r1
 8015510:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015516:	78fb      	ldrb	r3, [r7, #3]
 8015518:	015a      	lsls	r2, r3, #5
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	4413      	add	r3, r2
 801551e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015522:	689b      	ldr	r3, [r3, #8]
 8015524:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801552c:	695b      	ldr	r3, [r3, #20]
 801552e:	68ba      	ldr	r2, [r7, #8]
 8015530:	4013      	ands	r3, r2
 8015532:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015534:	68bb      	ldr	r3, [r7, #8]
}
 8015536:	4618      	mov	r0, r3
 8015538:	3714      	adds	r7, #20
 801553a:	46bd      	mov	sp, r7
 801553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015540:	4770      	bx	lr

08015542 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015542:	b480      	push	{r7}
 8015544:	b087      	sub	sp, #28
 8015546:	af00      	add	r7, sp, #0
 8015548:	6078      	str	r0, [r7, #4]
 801554a:	460b      	mov	r3, r1
 801554c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015558:	691b      	ldr	r3, [r3, #16]
 801555a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015564:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015566:	78fb      	ldrb	r3, [r7, #3]
 8015568:	f003 030f 	and.w	r3, r3, #15
 801556c:	68fa      	ldr	r2, [r7, #12]
 801556e:	fa22 f303 	lsr.w	r3, r2, r3
 8015572:	01db      	lsls	r3, r3, #7
 8015574:	b2db      	uxtb	r3, r3
 8015576:	693a      	ldr	r2, [r7, #16]
 8015578:	4313      	orrs	r3, r2
 801557a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801557c:	78fb      	ldrb	r3, [r7, #3]
 801557e:	015a      	lsls	r2, r3, #5
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	4413      	add	r3, r2
 8015584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015588:	689b      	ldr	r3, [r3, #8]
 801558a:	693a      	ldr	r2, [r7, #16]
 801558c:	4013      	ands	r3, r2
 801558e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015590:	68bb      	ldr	r3, [r7, #8]
}
 8015592:	4618      	mov	r0, r3
 8015594:	371c      	adds	r7, #28
 8015596:	46bd      	mov	sp, r7
 8015598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559c:	4770      	bx	lr

0801559e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801559e:	b480      	push	{r7}
 80155a0:	b083      	sub	sp, #12
 80155a2:	af00      	add	r7, sp, #0
 80155a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	695b      	ldr	r3, [r3, #20]
 80155aa:	f003 0301 	and.w	r3, r3, #1
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	370c      	adds	r7, #12
 80155b2:	46bd      	mov	sp, r7
 80155b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b8:	4770      	bx	lr

080155ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80155ba:	b480      	push	{r7}
 80155bc:	b085      	sub	sp, #20
 80155be:	af00      	add	r7, sp, #0
 80155c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	68fa      	ldr	r2, [r7, #12]
 80155d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80155d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80155d8:	f023 0307 	bic.w	r3, r3, #7
 80155dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	68fa      	ldr	r2, [r7, #12]
 80155e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80155ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80155f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80155f2:	2300      	movs	r3, #0
}
 80155f4:	4618      	mov	r0, r3
 80155f6:	3714      	adds	r7, #20
 80155f8:	46bd      	mov	sp, r7
 80155fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fe:	4770      	bx	lr

08015600 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015600:	b480      	push	{r7}
 8015602:	b087      	sub	sp, #28
 8015604:	af00      	add	r7, sp, #0
 8015606:	60f8      	str	r0, [r7, #12]
 8015608:	460b      	mov	r3, r1
 801560a:	607a      	str	r2, [r7, #4]
 801560c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	333c      	adds	r3, #60	@ 0x3c
 8015616:	3304      	adds	r3, #4
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	4a26      	ldr	r2, [pc, #152]	@ (80156b8 <USB_EP0_OutStart+0xb8>)
 8015620:	4293      	cmp	r3, r2
 8015622:	d90a      	bls.n	801563a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015630:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015634:	d101      	bne.n	801563a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8015636:	2300      	movs	r3, #0
 8015638:	e037      	b.n	80156aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015640:	461a      	mov	r2, r3
 8015642:	2300      	movs	r3, #0
 8015644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801564c:	691b      	ldr	r3, [r3, #16]
 801564e:	697a      	ldr	r2, [r7, #20]
 8015650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015654:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015658:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015660:	691b      	ldr	r3, [r3, #16]
 8015662:	697a      	ldr	r2, [r7, #20]
 8015664:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015668:	f043 0318 	orr.w	r3, r3, #24
 801566c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015674:	691b      	ldr	r3, [r3, #16]
 8015676:	697a      	ldr	r2, [r7, #20]
 8015678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801567c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015680:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015682:	7afb      	ldrb	r3, [r7, #11]
 8015684:	2b01      	cmp	r3, #1
 8015686:	d10f      	bne.n	80156a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801568e:	461a      	mov	r2, r3
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	697a      	ldr	r2, [r7, #20]
 801569e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80156a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80156a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80156a8:	2300      	movs	r3, #0
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	371c      	adds	r7, #28
 80156ae:	46bd      	mov	sp, r7
 80156b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b4:	4770      	bx	lr
 80156b6:	bf00      	nop
 80156b8:	4f54300a 	.word	0x4f54300a

080156bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80156bc:	b480      	push	{r7}
 80156be:	b085      	sub	sp, #20
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80156c4:	2300      	movs	r3, #0
 80156c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	3301      	adds	r3, #1
 80156cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80156d4:	d901      	bls.n	80156da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80156d6:	2303      	movs	r3, #3
 80156d8:	e022      	b.n	8015720 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	691b      	ldr	r3, [r3, #16]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	daf2      	bge.n	80156c8 <USB_CoreReset+0xc>

  count = 10U;
 80156e2:	230a      	movs	r3, #10
 80156e4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80156e6:	e002      	b.n	80156ee <USB_CoreReset+0x32>
  {
    count--;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	3b01      	subs	r3, #1
 80156ec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d1f9      	bne.n	80156e8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	691b      	ldr	r3, [r3, #16]
 80156f8:	f043 0201 	orr.w	r2, r3, #1
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	3301      	adds	r3, #1
 8015704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801570c:	d901      	bls.n	8015712 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 801570e:	2303      	movs	r3, #3
 8015710:	e006      	b.n	8015720 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	691b      	ldr	r3, [r3, #16]
 8015716:	f003 0301 	and.w	r3, r3, #1
 801571a:	2b01      	cmp	r3, #1
 801571c:	d0f0      	beq.n	8015700 <USB_CoreReset+0x44>

  return HAL_OK;
 801571e:	2300      	movs	r3, #0
}
 8015720:	4618      	mov	r0, r3
 8015722:	3714      	adds	r7, #20
 8015724:	46bd      	mov	sp, r7
 8015726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572a:	4770      	bx	lr

0801572c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b084      	sub	sp, #16
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	460b      	mov	r3, r1
 8015736:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015738:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801573c:	f002 fc64 	bl	8018008 <USBD_static_malloc>
 8015740:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d109      	bne.n	801575c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	32b0      	adds	r2, #176	@ 0xb0
 8015752:	2100      	movs	r1, #0
 8015754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015758:	2302      	movs	r3, #2
 801575a:	e0d4      	b.n	8015906 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801575c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015760:	2100      	movs	r1, #0
 8015762:	68f8      	ldr	r0, [r7, #12]
 8015764:	f002 fc94 	bl	8018090 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	32b0      	adds	r2, #176	@ 0xb0
 8015772:	68f9      	ldr	r1, [r7, #12]
 8015774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	32b0      	adds	r2, #176	@ 0xb0
 8015782:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	7c1b      	ldrb	r3, [r3, #16]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d138      	bne.n	8015806 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015794:	4b5e      	ldr	r3, [pc, #376]	@ (8015910 <USBD_CDC_Init+0x1e4>)
 8015796:	7819      	ldrb	r1, [r3, #0]
 8015798:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801579c:	2202      	movs	r2, #2
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f002 fb0f 	bl	8017dc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80157a4:	4b5a      	ldr	r3, [pc, #360]	@ (8015910 <USBD_CDC_Init+0x1e4>)
 80157a6:	781b      	ldrb	r3, [r3, #0]
 80157a8:	f003 020f 	and.w	r2, r3, #15
 80157ac:	6879      	ldr	r1, [r7, #4]
 80157ae:	4613      	mov	r3, r2
 80157b0:	009b      	lsls	r3, r3, #2
 80157b2:	4413      	add	r3, r2
 80157b4:	009b      	lsls	r3, r3, #2
 80157b6:	440b      	add	r3, r1
 80157b8:	3323      	adds	r3, #35	@ 0x23
 80157ba:	2201      	movs	r2, #1
 80157bc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80157be:	4b55      	ldr	r3, [pc, #340]	@ (8015914 <USBD_CDC_Init+0x1e8>)
 80157c0:	7819      	ldrb	r1, [r3, #0]
 80157c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80157c6:	2202      	movs	r2, #2
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f002 fafa 	bl	8017dc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80157ce:	4b51      	ldr	r3, [pc, #324]	@ (8015914 <USBD_CDC_Init+0x1e8>)
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	f003 020f 	and.w	r2, r3, #15
 80157d6:	6879      	ldr	r1, [r7, #4]
 80157d8:	4613      	mov	r3, r2
 80157da:	009b      	lsls	r3, r3, #2
 80157dc:	4413      	add	r3, r2
 80157de:	009b      	lsls	r3, r3, #2
 80157e0:	440b      	add	r3, r1
 80157e2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80157e6:	2201      	movs	r2, #1
 80157e8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80157ea:	4b4b      	ldr	r3, [pc, #300]	@ (8015918 <USBD_CDC_Init+0x1ec>)
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	f003 020f 	and.w	r2, r3, #15
 80157f2:	6879      	ldr	r1, [r7, #4]
 80157f4:	4613      	mov	r3, r2
 80157f6:	009b      	lsls	r3, r3, #2
 80157f8:	4413      	add	r3, r2
 80157fa:	009b      	lsls	r3, r3, #2
 80157fc:	440b      	add	r3, r1
 80157fe:	331c      	adds	r3, #28
 8015800:	2210      	movs	r2, #16
 8015802:	601a      	str	r2, [r3, #0]
 8015804:	e035      	b.n	8015872 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015806:	4b42      	ldr	r3, [pc, #264]	@ (8015910 <USBD_CDC_Init+0x1e4>)
 8015808:	7819      	ldrb	r1, [r3, #0]
 801580a:	2340      	movs	r3, #64	@ 0x40
 801580c:	2202      	movs	r2, #2
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f002 fad7 	bl	8017dc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015814:	4b3e      	ldr	r3, [pc, #248]	@ (8015910 <USBD_CDC_Init+0x1e4>)
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	f003 020f 	and.w	r2, r3, #15
 801581c:	6879      	ldr	r1, [r7, #4]
 801581e:	4613      	mov	r3, r2
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	4413      	add	r3, r2
 8015824:	009b      	lsls	r3, r3, #2
 8015826:	440b      	add	r3, r1
 8015828:	3323      	adds	r3, #35	@ 0x23
 801582a:	2201      	movs	r2, #1
 801582c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801582e:	4b39      	ldr	r3, [pc, #228]	@ (8015914 <USBD_CDC_Init+0x1e8>)
 8015830:	7819      	ldrb	r1, [r3, #0]
 8015832:	2340      	movs	r3, #64	@ 0x40
 8015834:	2202      	movs	r2, #2
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f002 fac3 	bl	8017dc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801583c:	4b35      	ldr	r3, [pc, #212]	@ (8015914 <USBD_CDC_Init+0x1e8>)
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	f003 020f 	and.w	r2, r3, #15
 8015844:	6879      	ldr	r1, [r7, #4]
 8015846:	4613      	mov	r3, r2
 8015848:	009b      	lsls	r3, r3, #2
 801584a:	4413      	add	r3, r2
 801584c:	009b      	lsls	r3, r3, #2
 801584e:	440b      	add	r3, r1
 8015850:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8015854:	2201      	movs	r2, #1
 8015856:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015858:	4b2f      	ldr	r3, [pc, #188]	@ (8015918 <USBD_CDC_Init+0x1ec>)
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	f003 020f 	and.w	r2, r3, #15
 8015860:	6879      	ldr	r1, [r7, #4]
 8015862:	4613      	mov	r3, r2
 8015864:	009b      	lsls	r3, r3, #2
 8015866:	4413      	add	r3, r2
 8015868:	009b      	lsls	r3, r3, #2
 801586a:	440b      	add	r3, r1
 801586c:	331c      	adds	r3, #28
 801586e:	2210      	movs	r2, #16
 8015870:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015872:	4b29      	ldr	r3, [pc, #164]	@ (8015918 <USBD_CDC_Init+0x1ec>)
 8015874:	7819      	ldrb	r1, [r3, #0]
 8015876:	2308      	movs	r3, #8
 8015878:	2203      	movs	r2, #3
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f002 faa1 	bl	8017dc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015880:	4b25      	ldr	r3, [pc, #148]	@ (8015918 <USBD_CDC_Init+0x1ec>)
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	f003 020f 	and.w	r2, r3, #15
 8015888:	6879      	ldr	r1, [r7, #4]
 801588a:	4613      	mov	r3, r2
 801588c:	009b      	lsls	r3, r3, #2
 801588e:	4413      	add	r3, r2
 8015890:	009b      	lsls	r3, r3, #2
 8015892:	440b      	add	r3, r1
 8015894:	3323      	adds	r3, #35	@ 0x23
 8015896:	2201      	movs	r2, #1
 8015898:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	2200      	movs	r2, #0
 801589e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	33b0      	adds	r3, #176	@ 0xb0
 80158ac:	009b      	lsls	r3, r3, #2
 80158ae:	4413      	add	r3, r2
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	2200      	movs	r2, #0
 80158ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	2200      	movs	r2, #0
 80158c2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d101      	bne.n	80158d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80158d0:	2302      	movs	r3, #2
 80158d2:	e018      	b.n	8015906 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	7c1b      	ldrb	r3, [r3, #16]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d10a      	bne.n	80158f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80158dc:	4b0d      	ldr	r3, [pc, #52]	@ (8015914 <USBD_CDC_Init+0x1e8>)
 80158de:	7819      	ldrb	r1, [r3, #0]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80158e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80158ea:	6878      	ldr	r0, [r7, #4]
 80158ec:	f002 fb58 	bl	8017fa0 <USBD_LL_PrepareReceive>
 80158f0:	e008      	b.n	8015904 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80158f2:	4b08      	ldr	r3, [pc, #32]	@ (8015914 <USBD_CDC_Init+0x1e8>)
 80158f4:	7819      	ldrb	r1, [r3, #0]
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80158fc:	2340      	movs	r3, #64	@ 0x40
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f002 fb4e 	bl	8017fa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015904:	2300      	movs	r3, #0
}
 8015906:	4618      	mov	r0, r3
 8015908:	3710      	adds	r7, #16
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	20000093 	.word	0x20000093
 8015914:	20000094 	.word	0x20000094
 8015918:	20000095 	.word	0x20000095

0801591c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	460b      	mov	r3, r1
 8015926:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015928:	4b3a      	ldr	r3, [pc, #232]	@ (8015a14 <USBD_CDC_DeInit+0xf8>)
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	4619      	mov	r1, r3
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f002 fa6d 	bl	8017e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015934:	4b37      	ldr	r3, [pc, #220]	@ (8015a14 <USBD_CDC_DeInit+0xf8>)
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	f003 020f 	and.w	r2, r3, #15
 801593c:	6879      	ldr	r1, [r7, #4]
 801593e:	4613      	mov	r3, r2
 8015940:	009b      	lsls	r3, r3, #2
 8015942:	4413      	add	r3, r2
 8015944:	009b      	lsls	r3, r3, #2
 8015946:	440b      	add	r3, r1
 8015948:	3323      	adds	r3, #35	@ 0x23
 801594a:	2200      	movs	r2, #0
 801594c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801594e:	4b32      	ldr	r3, [pc, #200]	@ (8015a18 <USBD_CDC_DeInit+0xfc>)
 8015950:	781b      	ldrb	r3, [r3, #0]
 8015952:	4619      	mov	r1, r3
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f002 fa5a 	bl	8017e0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801595a:	4b2f      	ldr	r3, [pc, #188]	@ (8015a18 <USBD_CDC_DeInit+0xfc>)
 801595c:	781b      	ldrb	r3, [r3, #0]
 801595e:	f003 020f 	and.w	r2, r3, #15
 8015962:	6879      	ldr	r1, [r7, #4]
 8015964:	4613      	mov	r3, r2
 8015966:	009b      	lsls	r3, r3, #2
 8015968:	4413      	add	r3, r2
 801596a:	009b      	lsls	r3, r3, #2
 801596c:	440b      	add	r3, r1
 801596e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8015972:	2200      	movs	r2, #0
 8015974:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015976:	4b29      	ldr	r3, [pc, #164]	@ (8015a1c <USBD_CDC_DeInit+0x100>)
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	4619      	mov	r1, r3
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f002 fa46 	bl	8017e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015982:	4b26      	ldr	r3, [pc, #152]	@ (8015a1c <USBD_CDC_DeInit+0x100>)
 8015984:	781b      	ldrb	r3, [r3, #0]
 8015986:	f003 020f 	and.w	r2, r3, #15
 801598a:	6879      	ldr	r1, [r7, #4]
 801598c:	4613      	mov	r3, r2
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	4413      	add	r3, r2
 8015992:	009b      	lsls	r3, r3, #2
 8015994:	440b      	add	r3, r1
 8015996:	3323      	adds	r3, #35	@ 0x23
 8015998:	2200      	movs	r2, #0
 801599a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801599c:	4b1f      	ldr	r3, [pc, #124]	@ (8015a1c <USBD_CDC_DeInit+0x100>)
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	f003 020f 	and.w	r2, r3, #15
 80159a4:	6879      	ldr	r1, [r7, #4]
 80159a6:	4613      	mov	r3, r2
 80159a8:	009b      	lsls	r3, r3, #2
 80159aa:	4413      	add	r3, r2
 80159ac:	009b      	lsls	r3, r3, #2
 80159ae:	440b      	add	r3, r1
 80159b0:	331c      	adds	r3, #28
 80159b2:	2200      	movs	r2, #0
 80159b4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	32b0      	adds	r2, #176	@ 0xb0
 80159c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d01f      	beq.n	8015a08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	33b0      	adds	r3, #176	@ 0xb0
 80159d2:	009b      	lsls	r3, r3, #2
 80159d4:	4413      	add	r3, r2
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	685b      	ldr	r3, [r3, #4]
 80159da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	32b0      	adds	r2, #176	@ 0xb0
 80159e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ea:	4618      	mov	r0, r3
 80159ec:	f002 fb1a 	bl	8018024 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	32b0      	adds	r2, #176	@ 0xb0
 80159fa:	2100      	movs	r1, #0
 80159fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	2200      	movs	r2, #0
 8015a04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015a08:	2300      	movs	r3, #0
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3708      	adds	r7, #8
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	20000093 	.word	0x20000093
 8015a18:	20000094 	.word	0x20000094
 8015a1c:	20000095 	.word	0x20000095

08015a20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b086      	sub	sp, #24
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	32b0      	adds	r2, #176	@ 0xb0
 8015a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a42:	2300      	movs	r3, #0
 8015a44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d101      	bne.n	8015a50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015a4c:	2303      	movs	r3, #3
 8015a4e:	e0bf      	b.n	8015bd0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	781b      	ldrb	r3, [r3, #0]
 8015a54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d050      	beq.n	8015afe <USBD_CDC_Setup+0xde>
 8015a5c:	2b20      	cmp	r3, #32
 8015a5e:	f040 80af 	bne.w	8015bc0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	88db      	ldrh	r3, [r3, #6]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d03a      	beq.n	8015ae0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	781b      	ldrb	r3, [r3, #0]
 8015a6e:	b25b      	sxtb	r3, r3
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	da1b      	bge.n	8015aac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a7a:	687a      	ldr	r2, [r7, #4]
 8015a7c:	33b0      	adds	r3, #176	@ 0xb0
 8015a7e:	009b      	lsls	r3, r3, #2
 8015a80:	4413      	add	r3, r2
 8015a82:	685b      	ldr	r3, [r3, #4]
 8015a84:	689b      	ldr	r3, [r3, #8]
 8015a86:	683a      	ldr	r2, [r7, #0]
 8015a88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015a8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a8c:	683a      	ldr	r2, [r7, #0]
 8015a8e:	88d2      	ldrh	r2, [r2, #6]
 8015a90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015a92:	683b      	ldr	r3, [r7, #0]
 8015a94:	88db      	ldrh	r3, [r3, #6]
 8015a96:	2b07      	cmp	r3, #7
 8015a98:	bf28      	it	cs
 8015a9a:	2307      	movcs	r3, #7
 8015a9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	89fa      	ldrh	r2, [r7, #14]
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f001 fd69 	bl	801757c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015aaa:	e090      	b.n	8015bce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	785a      	ldrb	r2, [r3, #1]
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	88db      	ldrh	r3, [r3, #6]
 8015aba:	2b3f      	cmp	r3, #63	@ 0x3f
 8015abc:	d803      	bhi.n	8015ac6 <USBD_CDC_Setup+0xa6>
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	88db      	ldrh	r3, [r3, #6]
 8015ac2:	b2da      	uxtb	r2, r3
 8015ac4:	e000      	b.n	8015ac8 <USBD_CDC_Setup+0xa8>
 8015ac6:	2240      	movs	r2, #64	@ 0x40
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015ace:	6939      	ldr	r1, [r7, #16]
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015ad6:	461a      	mov	r2, r3
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f001 fd7e 	bl	80175da <USBD_CtlPrepareRx>
      break;
 8015ade:	e076      	b.n	8015bce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015ae6:	687a      	ldr	r2, [r7, #4]
 8015ae8:	33b0      	adds	r3, #176	@ 0xb0
 8015aea:	009b      	lsls	r3, r3, #2
 8015aec:	4413      	add	r3, r2
 8015aee:	685b      	ldr	r3, [r3, #4]
 8015af0:	689b      	ldr	r3, [r3, #8]
 8015af2:	683a      	ldr	r2, [r7, #0]
 8015af4:	7850      	ldrb	r0, [r2, #1]
 8015af6:	2200      	movs	r2, #0
 8015af8:	6839      	ldr	r1, [r7, #0]
 8015afa:	4798      	blx	r3
      break;
 8015afc:	e067      	b.n	8015bce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	785b      	ldrb	r3, [r3, #1]
 8015b02:	2b0b      	cmp	r3, #11
 8015b04:	d851      	bhi.n	8015baa <USBD_CDC_Setup+0x18a>
 8015b06:	a201      	add	r2, pc, #4	@ (adr r2, 8015b0c <USBD_CDC_Setup+0xec>)
 8015b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b0c:	08015b3d 	.word	0x08015b3d
 8015b10:	08015bb9 	.word	0x08015bb9
 8015b14:	08015bab 	.word	0x08015bab
 8015b18:	08015bab 	.word	0x08015bab
 8015b1c:	08015bab 	.word	0x08015bab
 8015b20:	08015bab 	.word	0x08015bab
 8015b24:	08015bab 	.word	0x08015bab
 8015b28:	08015bab 	.word	0x08015bab
 8015b2c:	08015bab 	.word	0x08015bab
 8015b30:	08015bab 	.word	0x08015bab
 8015b34:	08015b67 	.word	0x08015b67
 8015b38:	08015b91 	.word	0x08015b91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b42:	b2db      	uxtb	r3, r3
 8015b44:	2b03      	cmp	r3, #3
 8015b46:	d107      	bne.n	8015b58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015b48:	f107 030a 	add.w	r3, r7, #10
 8015b4c:	2202      	movs	r2, #2
 8015b4e:	4619      	mov	r1, r3
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f001 fd13 	bl	801757c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015b56:	e032      	b.n	8015bbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015b58:	6839      	ldr	r1, [r7, #0]
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f001 fc91 	bl	8017482 <USBD_CtlError>
            ret = USBD_FAIL;
 8015b60:	2303      	movs	r3, #3
 8015b62:	75fb      	strb	r3, [r7, #23]
          break;
 8015b64:	e02b      	b.n	8015bbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b6c:	b2db      	uxtb	r3, r3
 8015b6e:	2b03      	cmp	r3, #3
 8015b70:	d107      	bne.n	8015b82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015b72:	f107 030d 	add.w	r3, r7, #13
 8015b76:	2201      	movs	r2, #1
 8015b78:	4619      	mov	r1, r3
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f001 fcfe 	bl	801757c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015b80:	e01d      	b.n	8015bbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015b82:	6839      	ldr	r1, [r7, #0]
 8015b84:	6878      	ldr	r0, [r7, #4]
 8015b86:	f001 fc7c 	bl	8017482 <USBD_CtlError>
            ret = USBD_FAIL;
 8015b8a:	2303      	movs	r3, #3
 8015b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8015b8e:	e016      	b.n	8015bbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b96:	b2db      	uxtb	r3, r3
 8015b98:	2b03      	cmp	r3, #3
 8015b9a:	d00f      	beq.n	8015bbc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015b9c:	6839      	ldr	r1, [r7, #0]
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f001 fc6f 	bl	8017482 <USBD_CtlError>
            ret = USBD_FAIL;
 8015ba4:	2303      	movs	r3, #3
 8015ba6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015ba8:	e008      	b.n	8015bbc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015baa:	6839      	ldr	r1, [r7, #0]
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f001 fc68 	bl	8017482 <USBD_CtlError>
          ret = USBD_FAIL;
 8015bb2:	2303      	movs	r3, #3
 8015bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8015bb6:	e002      	b.n	8015bbe <USBD_CDC_Setup+0x19e>
          break;
 8015bb8:	bf00      	nop
 8015bba:	e008      	b.n	8015bce <USBD_CDC_Setup+0x1ae>
          break;
 8015bbc:	bf00      	nop
      }
      break;
 8015bbe:	e006      	b.n	8015bce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015bc0:	6839      	ldr	r1, [r7, #0]
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f001 fc5d 	bl	8017482 <USBD_CtlError>
      ret = USBD_FAIL;
 8015bc8:	2303      	movs	r3, #3
 8015bca:	75fb      	strb	r3, [r7, #23]
      break;
 8015bcc:	bf00      	nop
  }

  return (uint8_t)ret;
 8015bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	3718      	adds	r7, #24
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}

08015bd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	460b      	mov	r3, r1
 8015be2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015bea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	32b0      	adds	r2, #176	@ 0xb0
 8015bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d101      	bne.n	8015c02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015bfe:	2303      	movs	r3, #3
 8015c00:	e065      	b.n	8015cce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	32b0      	adds	r2, #176	@ 0xb0
 8015c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015c12:	78fb      	ldrb	r3, [r7, #3]
 8015c14:	f003 020f 	and.w	r2, r3, #15
 8015c18:	6879      	ldr	r1, [r7, #4]
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	009b      	lsls	r3, r3, #2
 8015c1e:	4413      	add	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	440b      	add	r3, r1
 8015c24:	3314      	adds	r3, #20
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d02f      	beq.n	8015c8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015c2c:	78fb      	ldrb	r3, [r7, #3]
 8015c2e:	f003 020f 	and.w	r2, r3, #15
 8015c32:	6879      	ldr	r1, [r7, #4]
 8015c34:	4613      	mov	r3, r2
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	4413      	add	r3, r2
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	440b      	add	r3, r1
 8015c3e:	3314      	adds	r3, #20
 8015c40:	681a      	ldr	r2, [r3, #0]
 8015c42:	78fb      	ldrb	r3, [r7, #3]
 8015c44:	f003 010f 	and.w	r1, r3, #15
 8015c48:	68f8      	ldr	r0, [r7, #12]
 8015c4a:	460b      	mov	r3, r1
 8015c4c:	00db      	lsls	r3, r3, #3
 8015c4e:	440b      	add	r3, r1
 8015c50:	009b      	lsls	r3, r3, #2
 8015c52:	4403      	add	r3, r0
 8015c54:	331c      	adds	r3, #28
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	fbb2 f1f3 	udiv	r1, r2, r3
 8015c5c:	fb01 f303 	mul.w	r3, r1, r3
 8015c60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d112      	bne.n	8015c8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015c66:	78fb      	ldrb	r3, [r7, #3]
 8015c68:	f003 020f 	and.w	r2, r3, #15
 8015c6c:	6879      	ldr	r1, [r7, #4]
 8015c6e:	4613      	mov	r3, r2
 8015c70:	009b      	lsls	r3, r3, #2
 8015c72:	4413      	add	r3, r2
 8015c74:	009b      	lsls	r3, r3, #2
 8015c76:	440b      	add	r3, r1
 8015c78:	3314      	adds	r3, #20
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015c7e:	78f9      	ldrb	r1, [r7, #3]
 8015c80:	2300      	movs	r3, #0
 8015c82:	2200      	movs	r2, #0
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f002 f96a 	bl	8017f5e <USBD_LL_Transmit>
 8015c8a:	e01f      	b.n	8015ccc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c9a:	687a      	ldr	r2, [r7, #4]
 8015c9c:	33b0      	adds	r3, #176	@ 0xb0
 8015c9e:	009b      	lsls	r3, r3, #2
 8015ca0:	4413      	add	r3, r2
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	691b      	ldr	r3, [r3, #16]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d010      	beq.n	8015ccc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015cb0:	687a      	ldr	r2, [r7, #4]
 8015cb2:	33b0      	adds	r3, #176	@ 0xb0
 8015cb4:	009b      	lsls	r3, r3, #2
 8015cb6:	4413      	add	r3, r2
 8015cb8:	685b      	ldr	r3, [r3, #4]
 8015cba:	691b      	ldr	r3, [r3, #16]
 8015cbc:	68ba      	ldr	r2, [r7, #8]
 8015cbe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015cc2:	68ba      	ldr	r2, [r7, #8]
 8015cc4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015cc8:	78fa      	ldrb	r2, [r7, #3]
 8015cca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015ccc:	2300      	movs	r3, #0
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	3710      	adds	r7, #16
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}

08015cd6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015cd6:	b580      	push	{r7, lr}
 8015cd8:	b084      	sub	sp, #16
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	6078      	str	r0, [r7, #4]
 8015cde:	460b      	mov	r3, r1
 8015ce0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	32b0      	adds	r2, #176	@ 0xb0
 8015cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	32b0      	adds	r2, #176	@ 0xb0
 8015cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d101      	bne.n	8015d08 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015d04:	2303      	movs	r3, #3
 8015d06:	e01a      	b.n	8015d3e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015d08:	78fb      	ldrb	r3, [r7, #3]
 8015d0a:	4619      	mov	r1, r3
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f002 f968 	bl	8017fe2 <USBD_LL_GetRxDataSize>
 8015d12:	4602      	mov	r2, r0
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d20:	687a      	ldr	r2, [r7, #4]
 8015d22:	33b0      	adds	r3, #176	@ 0xb0
 8015d24:	009b      	lsls	r3, r3, #2
 8015d26:	4413      	add	r3, r2
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	68db      	ldr	r3, [r3, #12]
 8015d2c:	68fa      	ldr	r2, [r7, #12]
 8015d2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015d32:	68fa      	ldr	r2, [r7, #12]
 8015d34:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015d38:	4611      	mov	r1, r2
 8015d3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015d3c:	2300      	movs	r3, #0
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3710      	adds	r7, #16
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}

08015d46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015d46:	b580      	push	{r7, lr}
 8015d48:	b084      	sub	sp, #16
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	32b0      	adds	r2, #176	@ 0xb0
 8015d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d101      	bne.n	8015d68 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015d64:	2303      	movs	r3, #3
 8015d66:	e024      	b.n	8015db2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d6e:	687a      	ldr	r2, [r7, #4]
 8015d70:	33b0      	adds	r3, #176	@ 0xb0
 8015d72:	009b      	lsls	r3, r3, #2
 8015d74:	4413      	add	r3, r2
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d019      	beq.n	8015db0 <USBD_CDC_EP0_RxReady+0x6a>
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015d82:	2bff      	cmp	r3, #255	@ 0xff
 8015d84:	d014      	beq.n	8015db0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	33b0      	adds	r3, #176	@ 0xb0
 8015d90:	009b      	lsls	r3, r3, #2
 8015d92:	4413      	add	r3, r2
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	689b      	ldr	r3, [r3, #8]
 8015d98:	68fa      	ldr	r2, [r7, #12]
 8015d9a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8015d9e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015da0:	68fa      	ldr	r2, [r7, #12]
 8015da2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015da6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	22ff      	movs	r2, #255	@ 0xff
 8015dac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8015db0:	2300      	movs	r3, #0
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3710      	adds	r7, #16
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}
	...

08015dbc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b086      	sub	sp, #24
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015dc4:	2182      	movs	r1, #130	@ 0x82
 8015dc6:	4818      	ldr	r0, [pc, #96]	@ (8015e28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015dc8:	f000 fd22 	bl	8016810 <USBD_GetEpDesc>
 8015dcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015dce:	2101      	movs	r1, #1
 8015dd0:	4815      	ldr	r0, [pc, #84]	@ (8015e28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015dd2:	f000 fd1d 	bl	8016810 <USBD_GetEpDesc>
 8015dd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015dd8:	2181      	movs	r1, #129	@ 0x81
 8015dda:	4813      	ldr	r0, [pc, #76]	@ (8015e28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015ddc:	f000 fd18 	bl	8016810 <USBD_GetEpDesc>
 8015de0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d002      	beq.n	8015dee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	2210      	movs	r2, #16
 8015dec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d006      	beq.n	8015e02 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	2200      	movs	r2, #0
 8015df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015dfc:	711a      	strb	r2, [r3, #4]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d006      	beq.n	8015e16 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e10:	711a      	strb	r2, [r3, #4]
 8015e12:	2200      	movs	r2, #0
 8015e14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	2243      	movs	r2, #67	@ 0x43
 8015e1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e1c:	4b02      	ldr	r3, [pc, #8]	@ (8015e28 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3718      	adds	r7, #24
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	20000050 	.word	0x20000050

08015e2c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b086      	sub	sp, #24
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015e34:	2182      	movs	r1, #130	@ 0x82
 8015e36:	4818      	ldr	r0, [pc, #96]	@ (8015e98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e38:	f000 fcea 	bl	8016810 <USBD_GetEpDesc>
 8015e3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015e3e:	2101      	movs	r1, #1
 8015e40:	4815      	ldr	r0, [pc, #84]	@ (8015e98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e42:	f000 fce5 	bl	8016810 <USBD_GetEpDesc>
 8015e46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015e48:	2181      	movs	r1, #129	@ 0x81
 8015e4a:	4813      	ldr	r0, [pc, #76]	@ (8015e98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e4c:	f000 fce0 	bl	8016810 <USBD_GetEpDesc>
 8015e50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d002      	beq.n	8015e5e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015e58:	697b      	ldr	r3, [r7, #20]
 8015e5a:	2210      	movs	r2, #16
 8015e5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015e5e:	693b      	ldr	r3, [r7, #16]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d006      	beq.n	8015e72 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015e64:	693b      	ldr	r3, [r7, #16]
 8015e66:	2200      	movs	r2, #0
 8015e68:	711a      	strb	r2, [r3, #4]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	f042 0202 	orr.w	r2, r2, #2
 8015e70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d006      	beq.n	8015e86 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	711a      	strb	r2, [r3, #4]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	f042 0202 	orr.w	r2, r2, #2
 8015e84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	2243      	movs	r2, #67	@ 0x43
 8015e8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e8c:	4b02      	ldr	r3, [pc, #8]	@ (8015e98 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3718      	adds	r7, #24
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}
 8015e96:	bf00      	nop
 8015e98:	20000050 	.word	0x20000050

08015e9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b086      	sub	sp, #24
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015ea4:	2182      	movs	r1, #130	@ 0x82
 8015ea6:	4818      	ldr	r0, [pc, #96]	@ (8015f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015ea8:	f000 fcb2 	bl	8016810 <USBD_GetEpDesc>
 8015eac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015eae:	2101      	movs	r1, #1
 8015eb0:	4815      	ldr	r0, [pc, #84]	@ (8015f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015eb2:	f000 fcad 	bl	8016810 <USBD_GetEpDesc>
 8015eb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015eb8:	2181      	movs	r1, #129	@ 0x81
 8015eba:	4813      	ldr	r0, [pc, #76]	@ (8015f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015ebc:	f000 fca8 	bl	8016810 <USBD_GetEpDesc>
 8015ec0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d002      	beq.n	8015ece <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	2210      	movs	r2, #16
 8015ecc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d006      	beq.n	8015ee2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ed4:	693b      	ldr	r3, [r7, #16]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015edc:	711a      	strb	r2, [r3, #4]
 8015ede:	2200      	movs	r2, #0
 8015ee0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d006      	beq.n	8015ef6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2200      	movs	r2, #0
 8015eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ef0:	711a      	strb	r2, [r3, #4]
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	2243      	movs	r2, #67	@ 0x43
 8015efa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015efc:	4b02      	ldr	r3, [pc, #8]	@ (8015f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3718      	adds	r7, #24
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}
 8015f06:	bf00      	nop
 8015f08:	20000050 	.word	0x20000050

08015f0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015f0c:	b480      	push	{r7}
 8015f0e:	b083      	sub	sp, #12
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	220a      	movs	r2, #10
 8015f18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015f1a:	4b03      	ldr	r3, [pc, #12]	@ (8015f28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	370c      	adds	r7, #12
 8015f20:	46bd      	mov	sp, r7
 8015f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f26:	4770      	bx	lr
 8015f28:	2000000c 	.word	0x2000000c

08015f2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b083      	sub	sp, #12
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d101      	bne.n	8015f40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015f3c:	2303      	movs	r3, #3
 8015f3e:	e009      	b.n	8015f54 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015f46:	687a      	ldr	r2, [r7, #4]
 8015f48:	33b0      	adds	r3, #176	@ 0xb0
 8015f4a:	009b      	lsls	r3, r3, #2
 8015f4c:	4413      	add	r3, r2
 8015f4e:	683a      	ldr	r2, [r7, #0]
 8015f50:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015f52:	2300      	movs	r3, #0
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	370c      	adds	r7, #12
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5e:	4770      	bx	lr

08015f60 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015f60:	b480      	push	{r7}
 8015f62:	b087      	sub	sp, #28
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	60f8      	str	r0, [r7, #12]
 8015f68:	60b9      	str	r1, [r7, #8]
 8015f6a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	32b0      	adds	r2, #176	@ 0xb0
 8015f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f7a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015f7c:	697b      	ldr	r3, [r7, #20]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d101      	bne.n	8015f86 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015f82:	2303      	movs	r3, #3
 8015f84:	e008      	b.n	8015f98 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	68ba      	ldr	r2, [r7, #8]
 8015f8a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8015f8e:	697b      	ldr	r3, [r7, #20]
 8015f90:	687a      	ldr	r2, [r7, #4]
 8015f92:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8015f96:	2300      	movs	r3, #0
}
 8015f98:	4618      	mov	r0, r3
 8015f9a:	371c      	adds	r7, #28
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa2:	4770      	bx	lr

08015fa4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	b085      	sub	sp, #20
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
 8015fac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	32b0      	adds	r2, #176	@ 0xb0
 8015fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d101      	bne.n	8015fc8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015fc4:	2303      	movs	r3, #3
 8015fc6:	e004      	b.n	8015fd2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	683a      	ldr	r2, [r7, #0]
 8015fcc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8015fd0:	2300      	movs	r3, #0
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3714      	adds	r7, #20
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fdc:	4770      	bx	lr
	...

08015fe0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b084      	sub	sp, #16
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	32b0      	adds	r2, #176	@ 0xb0
 8015ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ff6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	32b0      	adds	r2, #176	@ 0xb0
 8016002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d101      	bne.n	801600e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801600a:	2303      	movs	r3, #3
 801600c:	e018      	b.n	8016040 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	7c1b      	ldrb	r3, [r3, #16]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d10a      	bne.n	801602c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016016:	4b0c      	ldr	r3, [pc, #48]	@ (8016048 <USBD_CDC_ReceivePacket+0x68>)
 8016018:	7819      	ldrb	r1, [r3, #0]
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f001 ffbb 	bl	8017fa0 <USBD_LL_PrepareReceive>
 801602a:	e008      	b.n	801603e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801602c:	4b06      	ldr	r3, [pc, #24]	@ (8016048 <USBD_CDC_ReceivePacket+0x68>)
 801602e:	7819      	ldrb	r1, [r3, #0]
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016036:	2340      	movs	r3, #64	@ 0x40
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f001 ffb1 	bl	8017fa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801603e:	2300      	movs	r3, #0
}
 8016040:	4618      	mov	r0, r3
 8016042:	3710      	adds	r7, #16
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	20000094 	.word	0x20000094

0801604c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b086      	sub	sp, #24
 8016050:	af00      	add	r7, sp, #0
 8016052:	60f8      	str	r0, [r7, #12]
 8016054:	60b9      	str	r1, [r7, #8]
 8016056:	4613      	mov	r3, r2
 8016058:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d101      	bne.n	8016064 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016060:	2303      	movs	r3, #3
 8016062:	e01f      	b.n	80160a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	2200      	movs	r2, #0
 8016068:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	2200      	movs	r2, #0
 8016070:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2200      	movs	r2, #0
 8016078:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d003      	beq.n	801608a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	68ba      	ldr	r2, [r7, #8]
 8016086:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	2201      	movs	r2, #1
 801608e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	79fa      	ldrb	r2, [r7, #7]
 8016096:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016098:	68f8      	ldr	r0, [r7, #12]
 801609a:	f001 fe2b 	bl	8017cf4 <USBD_LL_Init>
 801609e:	4603      	mov	r3, r0
 80160a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80160a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80160a4:	4618      	mov	r0, r3
 80160a6:	3718      	adds	r7, #24
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}

080160ac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b084      	sub	sp, #16
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
 80160b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80160b6:	2300      	movs	r3, #0
 80160b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d101      	bne.n	80160c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80160c0:	2303      	movs	r3, #3
 80160c2:	e025      	b.n	8016110 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	683a      	ldr	r2, [r7, #0]
 80160c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	32ae      	adds	r2, #174	@ 0xae
 80160d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d00f      	beq.n	8016100 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	32ae      	adds	r2, #174	@ 0xae
 80160ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160f0:	f107 020e 	add.w	r2, r7, #14
 80160f4:	4610      	mov	r0, r2
 80160f6:	4798      	blx	r3
 80160f8:	4602      	mov	r2, r0
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016106:	1c5a      	adds	r2, r3, #1
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801610e:	2300      	movs	r3, #0
}
 8016110:	4618      	mov	r0, r3
 8016112:	3710      	adds	r7, #16
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}

08016118 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b082      	sub	sp, #8
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f001 fe33 	bl	8017d8c <USBD_LL_Start>
 8016126:	4603      	mov	r3, r0
}
 8016128:	4618      	mov	r0, r3
 801612a:	3708      	adds	r7, #8
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}

08016130 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016130:	b480      	push	{r7}
 8016132:	b083      	sub	sp, #12
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016138:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801613a:	4618      	mov	r0, r3
 801613c:	370c      	adds	r7, #12
 801613e:	46bd      	mov	sp, r7
 8016140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016144:	4770      	bx	lr

08016146 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016146:	b580      	push	{r7, lr}
 8016148:	b084      	sub	sp, #16
 801614a:	af00      	add	r7, sp, #0
 801614c:	6078      	str	r0, [r7, #4]
 801614e:	460b      	mov	r3, r1
 8016150:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016152:	2300      	movs	r3, #0
 8016154:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801615c:	2b00      	cmp	r3, #0
 801615e:	d009      	beq.n	8016174 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	78fa      	ldrb	r2, [r7, #3]
 801616a:	4611      	mov	r1, r2
 801616c:	6878      	ldr	r0, [r7, #4]
 801616e:	4798      	blx	r3
 8016170:	4603      	mov	r3, r0
 8016172:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016174:	7bfb      	ldrb	r3, [r7, #15]
}
 8016176:	4618      	mov	r0, r3
 8016178:	3710      	adds	r7, #16
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}

0801617e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801617e:	b580      	push	{r7, lr}
 8016180:	b084      	sub	sp, #16
 8016182:	af00      	add	r7, sp, #0
 8016184:	6078      	str	r0, [r7, #4]
 8016186:	460b      	mov	r3, r1
 8016188:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801618a:	2300      	movs	r3, #0
 801618c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016194:	685b      	ldr	r3, [r3, #4]
 8016196:	78fa      	ldrb	r2, [r7, #3]
 8016198:	4611      	mov	r1, r2
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	4798      	blx	r3
 801619e:	4603      	mov	r3, r0
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d001      	beq.n	80161a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80161a4:	2303      	movs	r3, #3
 80161a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80161a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3710      	adds	r7, #16
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}

080161b2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b084      	sub	sp, #16
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
 80161ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80161c2:	6839      	ldr	r1, [r7, #0]
 80161c4:	4618      	mov	r0, r3
 80161c6:	f001 f922 	bl	801740e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	2201      	movs	r2, #1
 80161ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80161d8:	461a      	mov	r2, r3
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80161e6:	f003 031f 	and.w	r3, r3, #31
 80161ea:	2b02      	cmp	r3, #2
 80161ec:	d01a      	beq.n	8016224 <USBD_LL_SetupStage+0x72>
 80161ee:	2b02      	cmp	r3, #2
 80161f0:	d822      	bhi.n	8016238 <USBD_LL_SetupStage+0x86>
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d002      	beq.n	80161fc <USBD_LL_SetupStage+0x4a>
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	d00a      	beq.n	8016210 <USBD_LL_SetupStage+0x5e>
 80161fa:	e01d      	b.n	8016238 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016202:	4619      	mov	r1, r3
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f000 fb77 	bl	80168f8 <USBD_StdDevReq>
 801620a:	4603      	mov	r3, r0
 801620c:	73fb      	strb	r3, [r7, #15]
      break;
 801620e:	e020      	b.n	8016252 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016216:	4619      	mov	r1, r3
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f000 fbdf 	bl	80169dc <USBD_StdItfReq>
 801621e:	4603      	mov	r3, r0
 8016220:	73fb      	strb	r3, [r7, #15]
      break;
 8016222:	e016      	b.n	8016252 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801622a:	4619      	mov	r1, r3
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f000 fc41 	bl	8016ab4 <USBD_StdEPReq>
 8016232:	4603      	mov	r3, r0
 8016234:	73fb      	strb	r3, [r7, #15]
      break;
 8016236:	e00c      	b.n	8016252 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801623e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016242:	b2db      	uxtb	r3, r3
 8016244:	4619      	mov	r1, r3
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f001 fe00 	bl	8017e4c <USBD_LL_StallEP>
 801624c:	4603      	mov	r3, r0
 801624e:	73fb      	strb	r3, [r7, #15]
      break;
 8016250:	bf00      	nop
  }

  return ret;
 8016252:	7bfb      	ldrb	r3, [r7, #15]
}
 8016254:	4618      	mov	r0, r3
 8016256:	3710      	adds	r7, #16
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}

0801625c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b086      	sub	sp, #24
 8016260:	af00      	add	r7, sp, #0
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	460b      	mov	r3, r1
 8016266:	607a      	str	r2, [r7, #4]
 8016268:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801626a:	2300      	movs	r3, #0
 801626c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 801626e:	7afb      	ldrb	r3, [r7, #11]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d177      	bne.n	8016364 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801627a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016282:	2b03      	cmp	r3, #3
 8016284:	f040 80a1 	bne.w	80163ca <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	685b      	ldr	r3, [r3, #4]
 801628c:	693a      	ldr	r2, [r7, #16]
 801628e:	8992      	ldrh	r2, [r2, #12]
 8016290:	4293      	cmp	r3, r2
 8016292:	d91c      	bls.n	80162ce <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8016294:	693b      	ldr	r3, [r7, #16]
 8016296:	685b      	ldr	r3, [r3, #4]
 8016298:	693a      	ldr	r2, [r7, #16]
 801629a:	8992      	ldrh	r2, [r2, #12]
 801629c:	1a9a      	subs	r2, r3, r2
 801629e:	693b      	ldr	r3, [r7, #16]
 80162a0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	691b      	ldr	r3, [r3, #16]
 80162a6:	693a      	ldr	r2, [r7, #16]
 80162a8:	8992      	ldrh	r2, [r2, #12]
 80162aa:	441a      	add	r2, r3
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80162b0:	693b      	ldr	r3, [r7, #16]
 80162b2:	6919      	ldr	r1, [r3, #16]
 80162b4:	693b      	ldr	r3, [r7, #16]
 80162b6:	899b      	ldrh	r3, [r3, #12]
 80162b8:	461a      	mov	r2, r3
 80162ba:	693b      	ldr	r3, [r7, #16]
 80162bc:	685b      	ldr	r3, [r3, #4]
 80162be:	4293      	cmp	r3, r2
 80162c0:	bf38      	it	cc
 80162c2:	4613      	movcc	r3, r2
 80162c4:	461a      	mov	r2, r3
 80162c6:	68f8      	ldr	r0, [r7, #12]
 80162c8:	f001 f9a8 	bl	801761c <USBD_CtlContinueRx>
 80162cc:	e07d      	b.n	80163ca <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80162d4:	f003 031f 	and.w	r3, r3, #31
 80162d8:	2b02      	cmp	r3, #2
 80162da:	d014      	beq.n	8016306 <USBD_LL_DataOutStage+0xaa>
 80162dc:	2b02      	cmp	r3, #2
 80162de:	d81d      	bhi.n	801631c <USBD_LL_DataOutStage+0xc0>
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d002      	beq.n	80162ea <USBD_LL_DataOutStage+0x8e>
 80162e4:	2b01      	cmp	r3, #1
 80162e6:	d003      	beq.n	80162f0 <USBD_LL_DataOutStage+0x94>
 80162e8:	e018      	b.n	801631c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80162ea:	2300      	movs	r3, #0
 80162ec:	75bb      	strb	r3, [r7, #22]
            break;
 80162ee:	e018      	b.n	8016322 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	4619      	mov	r1, r3
 80162fa:	68f8      	ldr	r0, [r7, #12]
 80162fc:	f000 fa6e 	bl	80167dc <USBD_CoreFindIF>
 8016300:	4603      	mov	r3, r0
 8016302:	75bb      	strb	r3, [r7, #22]
            break;
 8016304:	e00d      	b.n	8016322 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801630c:	b2db      	uxtb	r3, r3
 801630e:	4619      	mov	r1, r3
 8016310:	68f8      	ldr	r0, [r7, #12]
 8016312:	f000 fa70 	bl	80167f6 <USBD_CoreFindEP>
 8016316:	4603      	mov	r3, r0
 8016318:	75bb      	strb	r3, [r7, #22]
            break;
 801631a:	e002      	b.n	8016322 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801631c:	2300      	movs	r3, #0
 801631e:	75bb      	strb	r3, [r7, #22]
            break;
 8016320:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016322:	7dbb      	ldrb	r3, [r7, #22]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d119      	bne.n	801635c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801632e:	b2db      	uxtb	r3, r3
 8016330:	2b03      	cmp	r3, #3
 8016332:	d113      	bne.n	801635c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016334:	7dba      	ldrb	r2, [r7, #22]
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	32ae      	adds	r2, #174	@ 0xae
 801633a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801633e:	691b      	ldr	r3, [r3, #16]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d00b      	beq.n	801635c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8016344:	7dba      	ldrb	r2, [r7, #22]
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801634c:	7dba      	ldrb	r2, [r7, #22]
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	32ae      	adds	r2, #174	@ 0xae
 8016352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016356:	691b      	ldr	r3, [r3, #16]
 8016358:	68f8      	ldr	r0, [r7, #12]
 801635a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801635c:	68f8      	ldr	r0, [r7, #12]
 801635e:	f001 f96e 	bl	801763e <USBD_CtlSendStatus>
 8016362:	e032      	b.n	80163ca <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016364:	7afb      	ldrb	r3, [r7, #11]
 8016366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801636a:	b2db      	uxtb	r3, r3
 801636c:	4619      	mov	r1, r3
 801636e:	68f8      	ldr	r0, [r7, #12]
 8016370:	f000 fa41 	bl	80167f6 <USBD_CoreFindEP>
 8016374:	4603      	mov	r3, r0
 8016376:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016378:	7dbb      	ldrb	r3, [r7, #22]
 801637a:	2bff      	cmp	r3, #255	@ 0xff
 801637c:	d025      	beq.n	80163ca <USBD_LL_DataOutStage+0x16e>
 801637e:	7dbb      	ldrb	r3, [r7, #22]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d122      	bne.n	80163ca <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801638a:	b2db      	uxtb	r3, r3
 801638c:	2b03      	cmp	r3, #3
 801638e:	d117      	bne.n	80163c0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016390:	7dba      	ldrb	r2, [r7, #22]
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	32ae      	adds	r2, #174	@ 0xae
 8016396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801639a:	699b      	ldr	r3, [r3, #24]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d00f      	beq.n	80163c0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80163a0:	7dba      	ldrb	r2, [r7, #22]
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80163a8:	7dba      	ldrb	r2, [r7, #22]
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	32ae      	adds	r2, #174	@ 0xae
 80163ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163b2:	699b      	ldr	r3, [r3, #24]
 80163b4:	7afa      	ldrb	r2, [r7, #11]
 80163b6:	4611      	mov	r1, r2
 80163b8:	68f8      	ldr	r0, [r7, #12]
 80163ba:	4798      	blx	r3
 80163bc:	4603      	mov	r3, r0
 80163be:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80163c0:	7dfb      	ldrb	r3, [r7, #23]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d001      	beq.n	80163ca <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80163c6:	7dfb      	ldrb	r3, [r7, #23]
 80163c8:	e000      	b.n	80163cc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80163ca:	2300      	movs	r3, #0
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	3718      	adds	r7, #24
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}

080163d4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b086      	sub	sp, #24
 80163d8:	af00      	add	r7, sp, #0
 80163da:	60f8      	str	r0, [r7, #12]
 80163dc:	460b      	mov	r3, r1
 80163de:	607a      	str	r2, [r7, #4]
 80163e0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80163e2:	7afb      	ldrb	r3, [r7, #11]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d178      	bne.n	80164da <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	3314      	adds	r3, #20
 80163ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80163f4:	2b02      	cmp	r3, #2
 80163f6:	d163      	bne.n	80164c0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	685b      	ldr	r3, [r3, #4]
 80163fc:	693a      	ldr	r2, [r7, #16]
 80163fe:	8992      	ldrh	r2, [r2, #12]
 8016400:	4293      	cmp	r3, r2
 8016402:	d91c      	bls.n	801643e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8016404:	693b      	ldr	r3, [r7, #16]
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	693a      	ldr	r2, [r7, #16]
 801640a:	8992      	ldrh	r2, [r2, #12]
 801640c:	1a9a      	subs	r2, r3, r2
 801640e:	693b      	ldr	r3, [r7, #16]
 8016410:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8016412:	693b      	ldr	r3, [r7, #16]
 8016414:	691b      	ldr	r3, [r3, #16]
 8016416:	693a      	ldr	r2, [r7, #16]
 8016418:	8992      	ldrh	r2, [r2, #12]
 801641a:	441a      	add	r2, r3
 801641c:	693b      	ldr	r3, [r7, #16]
 801641e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8016420:	693b      	ldr	r3, [r7, #16]
 8016422:	6919      	ldr	r1, [r3, #16]
 8016424:	693b      	ldr	r3, [r7, #16]
 8016426:	685b      	ldr	r3, [r3, #4]
 8016428:	461a      	mov	r2, r3
 801642a:	68f8      	ldr	r0, [r7, #12]
 801642c:	f001 f8c4 	bl	80175b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016430:	2300      	movs	r3, #0
 8016432:	2200      	movs	r2, #0
 8016434:	2100      	movs	r1, #0
 8016436:	68f8      	ldr	r0, [r7, #12]
 8016438:	f001 fdb2 	bl	8017fa0 <USBD_LL_PrepareReceive>
 801643c:	e040      	b.n	80164c0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	899b      	ldrh	r3, [r3, #12]
 8016442:	461a      	mov	r2, r3
 8016444:	693b      	ldr	r3, [r7, #16]
 8016446:	685b      	ldr	r3, [r3, #4]
 8016448:	429a      	cmp	r2, r3
 801644a:	d11c      	bne.n	8016486 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 801644c:	693b      	ldr	r3, [r7, #16]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	693a      	ldr	r2, [r7, #16]
 8016452:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016454:	4293      	cmp	r3, r2
 8016456:	d316      	bcc.n	8016486 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8016458:	693b      	ldr	r3, [r7, #16]
 801645a:	681a      	ldr	r2, [r3, #0]
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016462:	429a      	cmp	r2, r3
 8016464:	d20f      	bcs.n	8016486 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016466:	2200      	movs	r2, #0
 8016468:	2100      	movs	r1, #0
 801646a:	68f8      	ldr	r0, [r7, #12]
 801646c:	f001 f8a4 	bl	80175b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2200      	movs	r2, #0
 8016474:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016478:	2300      	movs	r3, #0
 801647a:	2200      	movs	r2, #0
 801647c:	2100      	movs	r1, #0
 801647e:	68f8      	ldr	r0, [r7, #12]
 8016480:	f001 fd8e 	bl	8017fa0 <USBD_LL_PrepareReceive>
 8016484:	e01c      	b.n	80164c0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801648c:	b2db      	uxtb	r3, r3
 801648e:	2b03      	cmp	r3, #3
 8016490:	d10f      	bne.n	80164b2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016498:	68db      	ldr	r3, [r3, #12]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d009      	beq.n	80164b2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	2200      	movs	r2, #0
 80164a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164ac:	68db      	ldr	r3, [r3, #12]
 80164ae:	68f8      	ldr	r0, [r7, #12]
 80164b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80164b2:	2180      	movs	r1, #128	@ 0x80
 80164b4:	68f8      	ldr	r0, [r7, #12]
 80164b6:	f001 fcc9 	bl	8017e4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80164ba:	68f8      	ldr	r0, [r7, #12]
 80164bc:	f001 f8d2 	bl	8017664 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d03a      	beq.n	8016540 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80164ca:	68f8      	ldr	r0, [r7, #12]
 80164cc:	f7ff fe30 	bl	8016130 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	2200      	movs	r2, #0
 80164d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80164d8:	e032      	b.n	8016540 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80164da:	7afb      	ldrb	r3, [r7, #11]
 80164dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80164e0:	b2db      	uxtb	r3, r3
 80164e2:	4619      	mov	r1, r3
 80164e4:	68f8      	ldr	r0, [r7, #12]
 80164e6:	f000 f986 	bl	80167f6 <USBD_CoreFindEP>
 80164ea:	4603      	mov	r3, r0
 80164ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80164ee:	7dfb      	ldrb	r3, [r7, #23]
 80164f0:	2bff      	cmp	r3, #255	@ 0xff
 80164f2:	d025      	beq.n	8016540 <USBD_LL_DataInStage+0x16c>
 80164f4:	7dfb      	ldrb	r3, [r7, #23]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d122      	bne.n	8016540 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016500:	b2db      	uxtb	r3, r3
 8016502:	2b03      	cmp	r3, #3
 8016504:	d11c      	bne.n	8016540 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016506:	7dfa      	ldrb	r2, [r7, #23]
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	32ae      	adds	r2, #174	@ 0xae
 801650c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016510:	695b      	ldr	r3, [r3, #20]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d014      	beq.n	8016540 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8016516:	7dfa      	ldrb	r2, [r7, #23]
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801651e:	7dfa      	ldrb	r2, [r7, #23]
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	32ae      	adds	r2, #174	@ 0xae
 8016524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016528:	695b      	ldr	r3, [r3, #20]
 801652a:	7afa      	ldrb	r2, [r7, #11]
 801652c:	4611      	mov	r1, r2
 801652e:	68f8      	ldr	r0, [r7, #12]
 8016530:	4798      	blx	r3
 8016532:	4603      	mov	r3, r0
 8016534:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016536:	7dbb      	ldrb	r3, [r7, #22]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d001      	beq.n	8016540 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 801653c:	7dbb      	ldrb	r3, [r7, #22]
 801653e:	e000      	b.n	8016542 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8016540:	2300      	movs	r3, #0
}
 8016542:	4618      	mov	r0, r3
 8016544:	3718      	adds	r7, #24
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}

0801654a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801654a:	b580      	push	{r7, lr}
 801654c:	b084      	sub	sp, #16
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016552:	2300      	movs	r3, #0
 8016554:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2201      	movs	r2, #1
 801655a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	2200      	movs	r2, #0
 8016562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2200      	movs	r2, #0
 801656a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	2200      	movs	r2, #0
 8016570:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2200      	movs	r2, #0
 8016578:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016582:	2b00      	cmp	r3, #0
 8016584:	d014      	beq.n	80165b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d00e      	beq.n	80165b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016598:	685b      	ldr	r3, [r3, #4]
 801659a:	687a      	ldr	r2, [r7, #4]
 801659c:	6852      	ldr	r2, [r2, #4]
 801659e:	b2d2      	uxtb	r2, r2
 80165a0:	4611      	mov	r1, r2
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	4798      	blx	r3
 80165a6:	4603      	mov	r3, r0
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d001      	beq.n	80165b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80165ac:	2303      	movs	r3, #3
 80165ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80165b0:	2340      	movs	r3, #64	@ 0x40
 80165b2:	2200      	movs	r2, #0
 80165b4:	2100      	movs	r1, #0
 80165b6:	6878      	ldr	r0, [r7, #4]
 80165b8:	f001 fc03 	bl	8017dc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2201      	movs	r2, #1
 80165c0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2240      	movs	r2, #64	@ 0x40
 80165c8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80165cc:	2340      	movs	r3, #64	@ 0x40
 80165ce:	2200      	movs	r2, #0
 80165d0:	2180      	movs	r1, #128	@ 0x80
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f001 fbf5 	bl	8017dc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2201      	movs	r2, #1
 80165dc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2240      	movs	r2, #64	@ 0x40
 80165e4:	841a      	strh	r2, [r3, #32]

  return ret;
 80165e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3710      	adds	r7, #16
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}

080165f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80165f0:	b480      	push	{r7}
 80165f2:	b083      	sub	sp, #12
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
 80165f8:	460b      	mov	r3, r1
 80165fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	78fa      	ldrb	r2, [r7, #3]
 8016600:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016602:	2300      	movs	r3, #0
}
 8016604:	4618      	mov	r0, r3
 8016606:	370c      	adds	r7, #12
 8016608:	46bd      	mov	sp, r7
 801660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660e:	4770      	bx	lr

08016610 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016610:	b480      	push	{r7}
 8016612:	b083      	sub	sp, #12
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801661e:	b2db      	uxtb	r3, r3
 8016620:	2b04      	cmp	r3, #4
 8016622:	d006      	beq.n	8016632 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801662a:	b2da      	uxtb	r2, r3
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2204      	movs	r2, #4
 8016636:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801663a:	2300      	movs	r3, #0
}
 801663c:	4618      	mov	r0, r3
 801663e:	370c      	adds	r7, #12
 8016640:	46bd      	mov	sp, r7
 8016642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016646:	4770      	bx	lr

08016648 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016648:	b480      	push	{r7}
 801664a:	b083      	sub	sp, #12
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016656:	b2db      	uxtb	r3, r3
 8016658:	2b04      	cmp	r3, #4
 801665a:	d106      	bne.n	801666a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016662:	b2da      	uxtb	r2, r3
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801666a:	2300      	movs	r3, #0
}
 801666c:	4618      	mov	r0, r3
 801666e:	370c      	adds	r7, #12
 8016670:	46bd      	mov	sp, r7
 8016672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016676:	4770      	bx	lr

08016678 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b082      	sub	sp, #8
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016686:	b2db      	uxtb	r3, r3
 8016688:	2b03      	cmp	r3, #3
 801668a:	d110      	bne.n	80166ae <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016692:	2b00      	cmp	r3, #0
 8016694:	d00b      	beq.n	80166ae <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801669c:	69db      	ldr	r3, [r3, #28]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d005      	beq.n	80166ae <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166a8:	69db      	ldr	r3, [r3, #28]
 80166aa:	6878      	ldr	r0, [r7, #4]
 80166ac:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80166ae:	2300      	movs	r3, #0
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	3708      	adds	r7, #8
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}

080166b8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	460b      	mov	r3, r1
 80166c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	32ae      	adds	r2, #174	@ 0xae
 80166ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d101      	bne.n	80166da <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80166d6:	2303      	movs	r3, #3
 80166d8:	e01c      	b.n	8016714 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	2b03      	cmp	r3, #3
 80166e4:	d115      	bne.n	8016712 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	32ae      	adds	r2, #174	@ 0xae
 80166f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166f4:	6a1b      	ldr	r3, [r3, #32]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d00b      	beq.n	8016712 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	32ae      	adds	r2, #174	@ 0xae
 8016704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016708:	6a1b      	ldr	r3, [r3, #32]
 801670a:	78fa      	ldrb	r2, [r7, #3]
 801670c:	4611      	mov	r1, r2
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016712:	2300      	movs	r3, #0
}
 8016714:	4618      	mov	r0, r3
 8016716:	3708      	adds	r7, #8
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}

0801671c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b082      	sub	sp, #8
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	460b      	mov	r3, r1
 8016726:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	32ae      	adds	r2, #174	@ 0xae
 8016732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d101      	bne.n	801673e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801673a:	2303      	movs	r3, #3
 801673c:	e01c      	b.n	8016778 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016744:	b2db      	uxtb	r3, r3
 8016746:	2b03      	cmp	r3, #3
 8016748:	d115      	bne.n	8016776 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	32ae      	adds	r2, #174	@ 0xae
 8016754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801675a:	2b00      	cmp	r3, #0
 801675c:	d00b      	beq.n	8016776 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	32ae      	adds	r2, #174	@ 0xae
 8016768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801676c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801676e:	78fa      	ldrb	r2, [r7, #3]
 8016770:	4611      	mov	r1, r2
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016776:	2300      	movs	r3, #0
}
 8016778:	4618      	mov	r0, r3
 801677a:	3708      	adds	r7, #8
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016780:	b480      	push	{r7}
 8016782:	b083      	sub	sp, #12
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016788:	2300      	movs	r3, #0
}
 801678a:	4618      	mov	r0, r3
 801678c:	370c      	adds	r7, #12
 801678e:	46bd      	mov	sp, r7
 8016790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016794:	4770      	bx	lr

08016796 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016796:	b580      	push	{r7, lr}
 8016798:	b084      	sub	sp, #16
 801679a:	af00      	add	r7, sp, #0
 801679c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801679e:	2300      	movs	r3, #0
 80167a0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2201      	movs	r2, #1
 80167a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d00e      	beq.n	80167d2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167ba:	685b      	ldr	r3, [r3, #4]
 80167bc:	687a      	ldr	r2, [r7, #4]
 80167be:	6852      	ldr	r2, [r2, #4]
 80167c0:	b2d2      	uxtb	r2, r2
 80167c2:	4611      	mov	r1, r2
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	4798      	blx	r3
 80167c8:	4603      	mov	r3, r0
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d001      	beq.n	80167d2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80167ce:	2303      	movs	r3, #3
 80167d0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80167d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3710      	adds	r7, #16
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80167dc:	b480      	push	{r7}
 80167de:	b083      	sub	sp, #12
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
 80167e4:	460b      	mov	r3, r1
 80167e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80167e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	370c      	adds	r7, #12
 80167ee:	46bd      	mov	sp, r7
 80167f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f4:	4770      	bx	lr

080167f6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80167f6:	b480      	push	{r7}
 80167f8:	b083      	sub	sp, #12
 80167fa:	af00      	add	r7, sp, #0
 80167fc:	6078      	str	r0, [r7, #4]
 80167fe:	460b      	mov	r3, r1
 8016800:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016802:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016804:	4618      	mov	r0, r3
 8016806:	370c      	adds	r7, #12
 8016808:	46bd      	mov	sp, r7
 801680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680e:	4770      	bx	lr

08016810 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b086      	sub	sp, #24
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	460b      	mov	r3, r1
 801681a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016824:	2300      	movs	r3, #0
 8016826:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	885b      	ldrh	r3, [r3, #2]
 801682c:	b29b      	uxth	r3, r3
 801682e:	68fa      	ldr	r2, [r7, #12]
 8016830:	7812      	ldrb	r2, [r2, #0]
 8016832:	4293      	cmp	r3, r2
 8016834:	d91f      	bls.n	8016876 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801683c:	e013      	b.n	8016866 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801683e:	f107 030a 	add.w	r3, r7, #10
 8016842:	4619      	mov	r1, r3
 8016844:	6978      	ldr	r0, [r7, #20]
 8016846:	f000 f81b 	bl	8016880 <USBD_GetNextDesc>
 801684a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	785b      	ldrb	r3, [r3, #1]
 8016850:	2b05      	cmp	r3, #5
 8016852:	d108      	bne.n	8016866 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016854:	697b      	ldr	r3, [r7, #20]
 8016856:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	789b      	ldrb	r3, [r3, #2]
 801685c:	78fa      	ldrb	r2, [r7, #3]
 801685e:	429a      	cmp	r2, r3
 8016860:	d008      	beq.n	8016874 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016862:	2300      	movs	r3, #0
 8016864:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	885b      	ldrh	r3, [r3, #2]
 801686a:	b29a      	uxth	r2, r3
 801686c:	897b      	ldrh	r3, [r7, #10]
 801686e:	429a      	cmp	r2, r3
 8016870:	d8e5      	bhi.n	801683e <USBD_GetEpDesc+0x2e>
 8016872:	e000      	b.n	8016876 <USBD_GetEpDesc+0x66>
          break;
 8016874:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016876:	693b      	ldr	r3, [r7, #16]
}
 8016878:	4618      	mov	r0, r3
 801687a:	3718      	adds	r7, #24
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}

08016880 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016880:	b480      	push	{r7}
 8016882:	b085      	sub	sp, #20
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
 8016888:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	881b      	ldrh	r3, [r3, #0]
 8016892:	68fa      	ldr	r2, [r7, #12]
 8016894:	7812      	ldrb	r2, [r2, #0]
 8016896:	4413      	add	r3, r2
 8016898:	b29a      	uxth	r2, r3
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	461a      	mov	r2, r3
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	4413      	add	r3, r2
 80168a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80168aa:	68fb      	ldr	r3, [r7, #12]
}
 80168ac:	4618      	mov	r0, r3
 80168ae:	3714      	adds	r7, #20
 80168b0:	46bd      	mov	sp, r7
 80168b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b6:	4770      	bx	lr

080168b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80168b8:	b480      	push	{r7}
 80168ba:	b087      	sub	sp, #28
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80168c4:	697b      	ldr	r3, [r7, #20]
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80168ca:	697b      	ldr	r3, [r7, #20]
 80168cc:	3301      	adds	r3, #1
 80168ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80168d0:	697b      	ldr	r3, [r7, #20]
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80168d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80168da:	021b      	lsls	r3, r3, #8
 80168dc:	b21a      	sxth	r2, r3
 80168de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80168e2:	4313      	orrs	r3, r2
 80168e4:	b21b      	sxth	r3, r3
 80168e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80168e8:	89fb      	ldrh	r3, [r7, #14]
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	371c      	adds	r7, #28
 80168ee:	46bd      	mov	sp, r7
 80168f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f4:	4770      	bx	lr
	...

080168f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b084      	sub	sp, #16
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
 8016900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016902:	2300      	movs	r3, #0
 8016904:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	781b      	ldrb	r3, [r3, #0]
 801690a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801690e:	2b40      	cmp	r3, #64	@ 0x40
 8016910:	d005      	beq.n	801691e <USBD_StdDevReq+0x26>
 8016912:	2b40      	cmp	r3, #64	@ 0x40
 8016914:	d857      	bhi.n	80169c6 <USBD_StdDevReq+0xce>
 8016916:	2b00      	cmp	r3, #0
 8016918:	d00f      	beq.n	801693a <USBD_StdDevReq+0x42>
 801691a:	2b20      	cmp	r3, #32
 801691c:	d153      	bne.n	80169c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	32ae      	adds	r2, #174	@ 0xae
 8016928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801692c:	689b      	ldr	r3, [r3, #8]
 801692e:	6839      	ldr	r1, [r7, #0]
 8016930:	6878      	ldr	r0, [r7, #4]
 8016932:	4798      	blx	r3
 8016934:	4603      	mov	r3, r0
 8016936:	73fb      	strb	r3, [r7, #15]
      break;
 8016938:	e04a      	b.n	80169d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	785b      	ldrb	r3, [r3, #1]
 801693e:	2b09      	cmp	r3, #9
 8016940:	d83b      	bhi.n	80169ba <USBD_StdDevReq+0xc2>
 8016942:	a201      	add	r2, pc, #4	@ (adr r2, 8016948 <USBD_StdDevReq+0x50>)
 8016944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016948:	0801699d 	.word	0x0801699d
 801694c:	080169b1 	.word	0x080169b1
 8016950:	080169bb 	.word	0x080169bb
 8016954:	080169a7 	.word	0x080169a7
 8016958:	080169bb 	.word	0x080169bb
 801695c:	0801697b 	.word	0x0801697b
 8016960:	08016971 	.word	0x08016971
 8016964:	080169bb 	.word	0x080169bb
 8016968:	08016993 	.word	0x08016993
 801696c:	08016985 	.word	0x08016985
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016970:	6839      	ldr	r1, [r7, #0]
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f000 fa3e 	bl	8016df4 <USBD_GetDescriptor>
          break;
 8016978:	e024      	b.n	80169c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801697a:	6839      	ldr	r1, [r7, #0]
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f000 fba3 	bl	80170c8 <USBD_SetAddress>
          break;
 8016982:	e01f      	b.n	80169c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016984:	6839      	ldr	r1, [r7, #0]
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	f000 fbe2 	bl	8017150 <USBD_SetConfig>
 801698c:	4603      	mov	r3, r0
 801698e:	73fb      	strb	r3, [r7, #15]
          break;
 8016990:	e018      	b.n	80169c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016992:	6839      	ldr	r1, [r7, #0]
 8016994:	6878      	ldr	r0, [r7, #4]
 8016996:	f000 fc85 	bl	80172a4 <USBD_GetConfig>
          break;
 801699a:	e013      	b.n	80169c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801699c:	6839      	ldr	r1, [r7, #0]
 801699e:	6878      	ldr	r0, [r7, #4]
 80169a0:	f000 fcb6 	bl	8017310 <USBD_GetStatus>
          break;
 80169a4:	e00e      	b.n	80169c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80169a6:	6839      	ldr	r1, [r7, #0]
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f000 fce5 	bl	8017378 <USBD_SetFeature>
          break;
 80169ae:	e009      	b.n	80169c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80169b0:	6839      	ldr	r1, [r7, #0]
 80169b2:	6878      	ldr	r0, [r7, #4]
 80169b4:	f000 fd09 	bl	80173ca <USBD_ClrFeature>
          break;
 80169b8:	e004      	b.n	80169c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80169ba:	6839      	ldr	r1, [r7, #0]
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f000 fd60 	bl	8017482 <USBD_CtlError>
          break;
 80169c2:	bf00      	nop
      }
      break;
 80169c4:	e004      	b.n	80169d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80169c6:	6839      	ldr	r1, [r7, #0]
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	f000 fd5a 	bl	8017482 <USBD_CtlError>
      break;
 80169ce:	bf00      	nop
  }

  return ret;
 80169d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3710      	adds	r7, #16
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
 80169da:	bf00      	nop

080169dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b084      	sub	sp, #16
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
 80169e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80169e6:	2300      	movs	r3, #0
 80169e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80169ea:	683b      	ldr	r3, [r7, #0]
 80169ec:	781b      	ldrb	r3, [r3, #0]
 80169ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80169f2:	2b40      	cmp	r3, #64	@ 0x40
 80169f4:	d005      	beq.n	8016a02 <USBD_StdItfReq+0x26>
 80169f6:	2b40      	cmp	r3, #64	@ 0x40
 80169f8:	d852      	bhi.n	8016aa0 <USBD_StdItfReq+0xc4>
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d001      	beq.n	8016a02 <USBD_StdItfReq+0x26>
 80169fe:	2b20      	cmp	r3, #32
 8016a00:	d14e      	bne.n	8016aa0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a08:	b2db      	uxtb	r3, r3
 8016a0a:	3b01      	subs	r3, #1
 8016a0c:	2b02      	cmp	r3, #2
 8016a0e:	d840      	bhi.n	8016a92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	889b      	ldrh	r3, [r3, #4]
 8016a14:	b2db      	uxtb	r3, r3
 8016a16:	2b01      	cmp	r3, #1
 8016a18:	d836      	bhi.n	8016a88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	889b      	ldrh	r3, [r3, #4]
 8016a1e:	b2db      	uxtb	r3, r3
 8016a20:	4619      	mov	r1, r3
 8016a22:	6878      	ldr	r0, [r7, #4]
 8016a24:	f7ff feda 	bl	80167dc <USBD_CoreFindIF>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a2c:	7bbb      	ldrb	r3, [r7, #14]
 8016a2e:	2bff      	cmp	r3, #255	@ 0xff
 8016a30:	d01d      	beq.n	8016a6e <USBD_StdItfReq+0x92>
 8016a32:	7bbb      	ldrb	r3, [r7, #14]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d11a      	bne.n	8016a6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016a38:	7bba      	ldrb	r2, [r7, #14]
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	32ae      	adds	r2, #174	@ 0xae
 8016a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a42:	689b      	ldr	r3, [r3, #8]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d00f      	beq.n	8016a68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016a48:	7bba      	ldrb	r2, [r7, #14]
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016a50:	7bba      	ldrb	r2, [r7, #14]
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	32ae      	adds	r2, #174	@ 0xae
 8016a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a5a:	689b      	ldr	r3, [r3, #8]
 8016a5c:	6839      	ldr	r1, [r7, #0]
 8016a5e:	6878      	ldr	r0, [r7, #4]
 8016a60:	4798      	blx	r3
 8016a62:	4603      	mov	r3, r0
 8016a64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016a66:	e004      	b.n	8016a72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016a68:	2303      	movs	r3, #3
 8016a6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016a6c:	e001      	b.n	8016a72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016a6e:	2303      	movs	r3, #3
 8016a70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016a72:	683b      	ldr	r3, [r7, #0]
 8016a74:	88db      	ldrh	r3, [r3, #6]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d110      	bne.n	8016a9c <USBD_StdItfReq+0xc0>
 8016a7a:	7bfb      	ldrb	r3, [r7, #15]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d10d      	bne.n	8016a9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	f000 fddc 	bl	801763e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016a86:	e009      	b.n	8016a9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016a88:	6839      	ldr	r1, [r7, #0]
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	f000 fcf9 	bl	8017482 <USBD_CtlError>
          break;
 8016a90:	e004      	b.n	8016a9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016a92:	6839      	ldr	r1, [r7, #0]
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f000 fcf4 	bl	8017482 <USBD_CtlError>
          break;
 8016a9a:	e000      	b.n	8016a9e <USBD_StdItfReq+0xc2>
          break;
 8016a9c:	bf00      	nop
      }
      break;
 8016a9e:	e004      	b.n	8016aaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016aa0:	6839      	ldr	r1, [r7, #0]
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f000 fced 	bl	8017482 <USBD_CtlError>
      break;
 8016aa8:	bf00      	nop
  }

  return ret;
 8016aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aac:	4618      	mov	r0, r3
 8016aae:	3710      	adds	r7, #16
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	bd80      	pop	{r7, pc}

08016ab4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b084      	sub	sp, #16
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
 8016abc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016ac2:	683b      	ldr	r3, [r7, #0]
 8016ac4:	889b      	ldrh	r3, [r3, #4]
 8016ac6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	781b      	ldrb	r3, [r3, #0]
 8016acc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016ad0:	2b40      	cmp	r3, #64	@ 0x40
 8016ad2:	d007      	beq.n	8016ae4 <USBD_StdEPReq+0x30>
 8016ad4:	2b40      	cmp	r3, #64	@ 0x40
 8016ad6:	f200 8181 	bhi.w	8016ddc <USBD_StdEPReq+0x328>
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d02a      	beq.n	8016b34 <USBD_StdEPReq+0x80>
 8016ade:	2b20      	cmp	r3, #32
 8016ae0:	f040 817c 	bne.w	8016ddc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016ae4:	7bbb      	ldrb	r3, [r7, #14]
 8016ae6:	4619      	mov	r1, r3
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f7ff fe84 	bl	80167f6 <USBD_CoreFindEP>
 8016aee:	4603      	mov	r3, r0
 8016af0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016af2:	7b7b      	ldrb	r3, [r7, #13]
 8016af4:	2bff      	cmp	r3, #255	@ 0xff
 8016af6:	f000 8176 	beq.w	8016de6 <USBD_StdEPReq+0x332>
 8016afa:	7b7b      	ldrb	r3, [r7, #13]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	f040 8172 	bne.w	8016de6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8016b02:	7b7a      	ldrb	r2, [r7, #13]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016b0a:	7b7a      	ldrb	r2, [r7, #13]
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	32ae      	adds	r2, #174	@ 0xae
 8016b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b14:	689b      	ldr	r3, [r3, #8]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	f000 8165 	beq.w	8016de6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016b1c:	7b7a      	ldrb	r2, [r7, #13]
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	32ae      	adds	r2, #174	@ 0xae
 8016b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b26:	689b      	ldr	r3, [r3, #8]
 8016b28:	6839      	ldr	r1, [r7, #0]
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	4798      	blx	r3
 8016b2e:	4603      	mov	r3, r0
 8016b30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016b32:	e158      	b.n	8016de6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	785b      	ldrb	r3, [r3, #1]
 8016b38:	2b03      	cmp	r3, #3
 8016b3a:	d008      	beq.n	8016b4e <USBD_StdEPReq+0x9a>
 8016b3c:	2b03      	cmp	r3, #3
 8016b3e:	f300 8147 	bgt.w	8016dd0 <USBD_StdEPReq+0x31c>
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	f000 809b 	beq.w	8016c7e <USBD_StdEPReq+0x1ca>
 8016b48:	2b01      	cmp	r3, #1
 8016b4a:	d03c      	beq.n	8016bc6 <USBD_StdEPReq+0x112>
 8016b4c:	e140      	b.n	8016dd0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b54:	b2db      	uxtb	r3, r3
 8016b56:	2b02      	cmp	r3, #2
 8016b58:	d002      	beq.n	8016b60 <USBD_StdEPReq+0xac>
 8016b5a:	2b03      	cmp	r3, #3
 8016b5c:	d016      	beq.n	8016b8c <USBD_StdEPReq+0xd8>
 8016b5e:	e02c      	b.n	8016bba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016b60:	7bbb      	ldrb	r3, [r7, #14]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d00d      	beq.n	8016b82 <USBD_StdEPReq+0xce>
 8016b66:	7bbb      	ldrb	r3, [r7, #14]
 8016b68:	2b80      	cmp	r3, #128	@ 0x80
 8016b6a:	d00a      	beq.n	8016b82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016b6c:	7bbb      	ldrb	r3, [r7, #14]
 8016b6e:	4619      	mov	r1, r3
 8016b70:	6878      	ldr	r0, [r7, #4]
 8016b72:	f001 f96b 	bl	8017e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b76:	2180      	movs	r1, #128	@ 0x80
 8016b78:	6878      	ldr	r0, [r7, #4]
 8016b7a:	f001 f967 	bl	8017e4c <USBD_LL_StallEP>
 8016b7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016b80:	e020      	b.n	8016bc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016b82:	6839      	ldr	r1, [r7, #0]
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f000 fc7c 	bl	8017482 <USBD_CtlError>
              break;
 8016b8a:	e01b      	b.n	8016bc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	885b      	ldrh	r3, [r3, #2]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d10e      	bne.n	8016bb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016b94:	7bbb      	ldrb	r3, [r7, #14]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d00b      	beq.n	8016bb2 <USBD_StdEPReq+0xfe>
 8016b9a:	7bbb      	ldrb	r3, [r7, #14]
 8016b9c:	2b80      	cmp	r3, #128	@ 0x80
 8016b9e:	d008      	beq.n	8016bb2 <USBD_StdEPReq+0xfe>
 8016ba0:	683b      	ldr	r3, [r7, #0]
 8016ba2:	88db      	ldrh	r3, [r3, #6]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d104      	bne.n	8016bb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ba8:	7bbb      	ldrb	r3, [r7, #14]
 8016baa:	4619      	mov	r1, r3
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f001 f94d 	bl	8017e4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016bb2:	6878      	ldr	r0, [r7, #4]
 8016bb4:	f000 fd43 	bl	801763e <USBD_CtlSendStatus>

              break;
 8016bb8:	e004      	b.n	8016bc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016bba:	6839      	ldr	r1, [r7, #0]
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f000 fc60 	bl	8017482 <USBD_CtlError>
              break;
 8016bc2:	bf00      	nop
          }
          break;
 8016bc4:	e109      	b.n	8016dda <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016bcc:	b2db      	uxtb	r3, r3
 8016bce:	2b02      	cmp	r3, #2
 8016bd0:	d002      	beq.n	8016bd8 <USBD_StdEPReq+0x124>
 8016bd2:	2b03      	cmp	r3, #3
 8016bd4:	d016      	beq.n	8016c04 <USBD_StdEPReq+0x150>
 8016bd6:	e04b      	b.n	8016c70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016bd8:	7bbb      	ldrb	r3, [r7, #14]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d00d      	beq.n	8016bfa <USBD_StdEPReq+0x146>
 8016bde:	7bbb      	ldrb	r3, [r7, #14]
 8016be0:	2b80      	cmp	r3, #128	@ 0x80
 8016be2:	d00a      	beq.n	8016bfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016be4:	7bbb      	ldrb	r3, [r7, #14]
 8016be6:	4619      	mov	r1, r3
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f001 f92f 	bl	8017e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016bee:	2180      	movs	r1, #128	@ 0x80
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	f001 f92b 	bl	8017e4c <USBD_LL_StallEP>
 8016bf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016bf8:	e040      	b.n	8016c7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016bfa:	6839      	ldr	r1, [r7, #0]
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f000 fc40 	bl	8017482 <USBD_CtlError>
              break;
 8016c02:	e03b      	b.n	8016c7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	885b      	ldrh	r3, [r3, #2]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d136      	bne.n	8016c7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016c0c:	7bbb      	ldrb	r3, [r7, #14]
 8016c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d004      	beq.n	8016c20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016c16:	7bbb      	ldrb	r3, [r7, #14]
 8016c18:	4619      	mov	r1, r3
 8016c1a:	6878      	ldr	r0, [r7, #4]
 8016c1c:	f001 f935 	bl	8017e8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f000 fd0c 	bl	801763e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016c26:	7bbb      	ldrb	r3, [r7, #14]
 8016c28:	4619      	mov	r1, r3
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	f7ff fde3 	bl	80167f6 <USBD_CoreFindEP>
 8016c30:	4603      	mov	r3, r0
 8016c32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016c34:	7b7b      	ldrb	r3, [r7, #13]
 8016c36:	2bff      	cmp	r3, #255	@ 0xff
 8016c38:	d01f      	beq.n	8016c7a <USBD_StdEPReq+0x1c6>
 8016c3a:	7b7b      	ldrb	r3, [r7, #13]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d11c      	bne.n	8016c7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016c40:	7b7a      	ldrb	r2, [r7, #13]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016c48:	7b7a      	ldrb	r2, [r7, #13]
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	32ae      	adds	r2, #174	@ 0xae
 8016c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c52:	689b      	ldr	r3, [r3, #8]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d010      	beq.n	8016c7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016c58:	7b7a      	ldrb	r2, [r7, #13]
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	32ae      	adds	r2, #174	@ 0xae
 8016c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c62:	689b      	ldr	r3, [r3, #8]
 8016c64:	6839      	ldr	r1, [r7, #0]
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	4798      	blx	r3
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016c6e:	e004      	b.n	8016c7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016c70:	6839      	ldr	r1, [r7, #0]
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f000 fc05 	bl	8017482 <USBD_CtlError>
              break;
 8016c78:	e000      	b.n	8016c7c <USBD_StdEPReq+0x1c8>
              break;
 8016c7a:	bf00      	nop
          }
          break;
 8016c7c:	e0ad      	b.n	8016dda <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	2b02      	cmp	r3, #2
 8016c88:	d002      	beq.n	8016c90 <USBD_StdEPReq+0x1dc>
 8016c8a:	2b03      	cmp	r3, #3
 8016c8c:	d033      	beq.n	8016cf6 <USBD_StdEPReq+0x242>
 8016c8e:	e099      	b.n	8016dc4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c90:	7bbb      	ldrb	r3, [r7, #14]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d007      	beq.n	8016ca6 <USBD_StdEPReq+0x1f2>
 8016c96:	7bbb      	ldrb	r3, [r7, #14]
 8016c98:	2b80      	cmp	r3, #128	@ 0x80
 8016c9a:	d004      	beq.n	8016ca6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016c9c:	6839      	ldr	r1, [r7, #0]
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f000 fbef 	bl	8017482 <USBD_CtlError>
                break;
 8016ca4:	e093      	b.n	8016dce <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016ca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	da0b      	bge.n	8016cc6 <USBD_StdEPReq+0x212>
 8016cae:	7bbb      	ldrb	r3, [r7, #14]
 8016cb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	009b      	lsls	r3, r3, #2
 8016cb8:	4413      	add	r3, r2
 8016cba:	009b      	lsls	r3, r3, #2
 8016cbc:	3310      	adds	r3, #16
 8016cbe:	687a      	ldr	r2, [r7, #4]
 8016cc0:	4413      	add	r3, r2
 8016cc2:	3304      	adds	r3, #4
 8016cc4:	e00b      	b.n	8016cde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016cc6:	7bbb      	ldrb	r3, [r7, #14]
 8016cc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016ccc:	4613      	mov	r3, r2
 8016cce:	009b      	lsls	r3, r3, #2
 8016cd0:	4413      	add	r3, r2
 8016cd2:	009b      	lsls	r3, r3, #2
 8016cd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016cd8:	687a      	ldr	r2, [r7, #4]
 8016cda:	4413      	add	r3, r2
 8016cdc:	3304      	adds	r3, #4
 8016cde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016ce6:	68bb      	ldr	r3, [r7, #8]
 8016ce8:	330e      	adds	r3, #14
 8016cea:	2202      	movs	r2, #2
 8016cec:	4619      	mov	r1, r3
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f000 fc44 	bl	801757c <USBD_CtlSendData>
              break;
 8016cf4:	e06b      	b.n	8016dce <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	da11      	bge.n	8016d22 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016cfe:	7bbb      	ldrb	r3, [r7, #14]
 8016d00:	f003 020f 	and.w	r2, r3, #15
 8016d04:	6879      	ldr	r1, [r7, #4]
 8016d06:	4613      	mov	r3, r2
 8016d08:	009b      	lsls	r3, r3, #2
 8016d0a:	4413      	add	r3, r2
 8016d0c:	009b      	lsls	r3, r3, #2
 8016d0e:	440b      	add	r3, r1
 8016d10:	3323      	adds	r3, #35	@ 0x23
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d117      	bne.n	8016d48 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8016d18:	6839      	ldr	r1, [r7, #0]
 8016d1a:	6878      	ldr	r0, [r7, #4]
 8016d1c:	f000 fbb1 	bl	8017482 <USBD_CtlError>
                  break;
 8016d20:	e055      	b.n	8016dce <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016d22:	7bbb      	ldrb	r3, [r7, #14]
 8016d24:	f003 020f 	and.w	r2, r3, #15
 8016d28:	6879      	ldr	r1, [r7, #4]
 8016d2a:	4613      	mov	r3, r2
 8016d2c:	009b      	lsls	r3, r3, #2
 8016d2e:	4413      	add	r3, r2
 8016d30:	009b      	lsls	r3, r3, #2
 8016d32:	440b      	add	r3, r1
 8016d34:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d104      	bne.n	8016d48 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8016d3e:	6839      	ldr	r1, [r7, #0]
 8016d40:	6878      	ldr	r0, [r7, #4]
 8016d42:	f000 fb9e 	bl	8017482 <USBD_CtlError>
                  break;
 8016d46:	e042      	b.n	8016dce <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	da0b      	bge.n	8016d68 <USBD_StdEPReq+0x2b4>
 8016d50:	7bbb      	ldrb	r3, [r7, #14]
 8016d52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016d56:	4613      	mov	r3, r2
 8016d58:	009b      	lsls	r3, r3, #2
 8016d5a:	4413      	add	r3, r2
 8016d5c:	009b      	lsls	r3, r3, #2
 8016d5e:	3310      	adds	r3, #16
 8016d60:	687a      	ldr	r2, [r7, #4]
 8016d62:	4413      	add	r3, r2
 8016d64:	3304      	adds	r3, #4
 8016d66:	e00b      	b.n	8016d80 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016d68:	7bbb      	ldrb	r3, [r7, #14]
 8016d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d6e:	4613      	mov	r3, r2
 8016d70:	009b      	lsls	r3, r3, #2
 8016d72:	4413      	add	r3, r2
 8016d74:	009b      	lsls	r3, r3, #2
 8016d76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016d7a:	687a      	ldr	r2, [r7, #4]
 8016d7c:	4413      	add	r3, r2
 8016d7e:	3304      	adds	r3, #4
 8016d80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016d82:	7bbb      	ldrb	r3, [r7, #14]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d002      	beq.n	8016d8e <USBD_StdEPReq+0x2da>
 8016d88:	7bbb      	ldrb	r3, [r7, #14]
 8016d8a:	2b80      	cmp	r3, #128	@ 0x80
 8016d8c:	d103      	bne.n	8016d96 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	2200      	movs	r2, #0
 8016d92:	739a      	strb	r2, [r3, #14]
 8016d94:	e00e      	b.n	8016db4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016d96:	7bbb      	ldrb	r3, [r7, #14]
 8016d98:	4619      	mov	r1, r3
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f001 f894 	bl	8017ec8 <USBD_LL_IsStallEP>
 8016da0:	4603      	mov	r3, r0
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d003      	beq.n	8016dae <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	2201      	movs	r2, #1
 8016daa:	739a      	strb	r2, [r3, #14]
 8016dac:	e002      	b.n	8016db4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8016dae:	68bb      	ldr	r3, [r7, #8]
 8016db0:	2200      	movs	r2, #0
 8016db2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	330e      	adds	r3, #14
 8016db8:	2202      	movs	r2, #2
 8016dba:	4619      	mov	r1, r3
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f000 fbdd 	bl	801757c <USBD_CtlSendData>
              break;
 8016dc2:	e004      	b.n	8016dce <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8016dc4:	6839      	ldr	r1, [r7, #0]
 8016dc6:	6878      	ldr	r0, [r7, #4]
 8016dc8:	f000 fb5b 	bl	8017482 <USBD_CtlError>
              break;
 8016dcc:	bf00      	nop
          }
          break;
 8016dce:	e004      	b.n	8016dda <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8016dd0:	6839      	ldr	r1, [r7, #0]
 8016dd2:	6878      	ldr	r0, [r7, #4]
 8016dd4:	f000 fb55 	bl	8017482 <USBD_CtlError>
          break;
 8016dd8:	bf00      	nop
      }
      break;
 8016dda:	e005      	b.n	8016de8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8016ddc:	6839      	ldr	r1, [r7, #0]
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	f000 fb4f 	bl	8017482 <USBD_CtlError>
      break;
 8016de4:	e000      	b.n	8016de8 <USBD_StdEPReq+0x334>
      break;
 8016de6:	bf00      	nop
  }

  return ret;
 8016de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3710      	adds	r7, #16
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}
	...

08016df4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b084      	sub	sp, #16
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
 8016dfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016dfe:	2300      	movs	r3, #0
 8016e00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016e02:	2300      	movs	r3, #0
 8016e04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016e06:	2300      	movs	r3, #0
 8016e08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016e0a:	683b      	ldr	r3, [r7, #0]
 8016e0c:	885b      	ldrh	r3, [r3, #2]
 8016e0e:	0a1b      	lsrs	r3, r3, #8
 8016e10:	b29b      	uxth	r3, r3
 8016e12:	3b01      	subs	r3, #1
 8016e14:	2b06      	cmp	r3, #6
 8016e16:	f200 8128 	bhi.w	801706a <USBD_GetDescriptor+0x276>
 8016e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8016e20 <USBD_GetDescriptor+0x2c>)
 8016e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e20:	08016e3d 	.word	0x08016e3d
 8016e24:	08016e55 	.word	0x08016e55
 8016e28:	08016e95 	.word	0x08016e95
 8016e2c:	0801706b 	.word	0x0801706b
 8016e30:	0801706b 	.word	0x0801706b
 8016e34:	0801700b 	.word	0x0801700b
 8016e38:	08017037 	.word	0x08017037
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	687a      	ldr	r2, [r7, #4]
 8016e46:	7c12      	ldrb	r2, [r2, #16]
 8016e48:	f107 0108 	add.w	r1, r7, #8
 8016e4c:	4610      	mov	r0, r2
 8016e4e:	4798      	blx	r3
 8016e50:	60f8      	str	r0, [r7, #12]
      break;
 8016e52:	e112      	b.n	801707a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	7c1b      	ldrb	r3, [r3, #16]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d10d      	bne.n	8016e78 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e64:	f107 0208 	add.w	r2, r7, #8
 8016e68:	4610      	mov	r0, r2
 8016e6a:	4798      	blx	r3
 8016e6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	3301      	adds	r3, #1
 8016e72:	2202      	movs	r2, #2
 8016e74:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016e76:	e100      	b.n	801707a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e80:	f107 0208 	add.w	r2, r7, #8
 8016e84:	4610      	mov	r0, r2
 8016e86:	4798      	blx	r3
 8016e88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	3301      	adds	r3, #1
 8016e8e:	2202      	movs	r2, #2
 8016e90:	701a      	strb	r2, [r3, #0]
      break;
 8016e92:	e0f2      	b.n	801707a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	885b      	ldrh	r3, [r3, #2]
 8016e98:	b2db      	uxtb	r3, r3
 8016e9a:	2b05      	cmp	r3, #5
 8016e9c:	f200 80ac 	bhi.w	8016ff8 <USBD_GetDescriptor+0x204>
 8016ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8016ea8 <USBD_GetDescriptor+0xb4>)
 8016ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ea6:	bf00      	nop
 8016ea8:	08016ec1 	.word	0x08016ec1
 8016eac:	08016ef5 	.word	0x08016ef5
 8016eb0:	08016f29 	.word	0x08016f29
 8016eb4:	08016f5d 	.word	0x08016f5d
 8016eb8:	08016f91 	.word	0x08016f91
 8016ebc:	08016fc5 	.word	0x08016fc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d00b      	beq.n	8016ee4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	7c12      	ldrb	r2, [r2, #16]
 8016ed8:	f107 0108 	add.w	r1, r7, #8
 8016edc:	4610      	mov	r0, r2
 8016ede:	4798      	blx	r3
 8016ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016ee2:	e091      	b.n	8017008 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016ee4:	6839      	ldr	r1, [r7, #0]
 8016ee6:	6878      	ldr	r0, [r7, #4]
 8016ee8:	f000 facb 	bl	8017482 <USBD_CtlError>
            err++;
 8016eec:	7afb      	ldrb	r3, [r7, #11]
 8016eee:	3301      	adds	r3, #1
 8016ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8016ef2:	e089      	b.n	8017008 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016efa:	689b      	ldr	r3, [r3, #8]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d00b      	beq.n	8016f18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f06:	689b      	ldr	r3, [r3, #8]
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	7c12      	ldrb	r2, [r2, #16]
 8016f0c:	f107 0108 	add.w	r1, r7, #8
 8016f10:	4610      	mov	r0, r2
 8016f12:	4798      	blx	r3
 8016f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f16:	e077      	b.n	8017008 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f18:	6839      	ldr	r1, [r7, #0]
 8016f1a:	6878      	ldr	r0, [r7, #4]
 8016f1c:	f000 fab1 	bl	8017482 <USBD_CtlError>
            err++;
 8016f20:	7afb      	ldrb	r3, [r7, #11]
 8016f22:	3301      	adds	r3, #1
 8016f24:	72fb      	strb	r3, [r7, #11]
          break;
 8016f26:	e06f      	b.n	8017008 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f2e:	68db      	ldr	r3, [r3, #12]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d00b      	beq.n	8016f4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f3a:	68db      	ldr	r3, [r3, #12]
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	7c12      	ldrb	r2, [r2, #16]
 8016f40:	f107 0108 	add.w	r1, r7, #8
 8016f44:	4610      	mov	r0, r2
 8016f46:	4798      	blx	r3
 8016f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f4a:	e05d      	b.n	8017008 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f4c:	6839      	ldr	r1, [r7, #0]
 8016f4e:	6878      	ldr	r0, [r7, #4]
 8016f50:	f000 fa97 	bl	8017482 <USBD_CtlError>
            err++;
 8016f54:	7afb      	ldrb	r3, [r7, #11]
 8016f56:	3301      	adds	r3, #1
 8016f58:	72fb      	strb	r3, [r7, #11]
          break;
 8016f5a:	e055      	b.n	8017008 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f62:	691b      	ldr	r3, [r3, #16]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d00b      	beq.n	8016f80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f6e:	691b      	ldr	r3, [r3, #16]
 8016f70:	687a      	ldr	r2, [r7, #4]
 8016f72:	7c12      	ldrb	r2, [r2, #16]
 8016f74:	f107 0108 	add.w	r1, r7, #8
 8016f78:	4610      	mov	r0, r2
 8016f7a:	4798      	blx	r3
 8016f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f7e:	e043      	b.n	8017008 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f80:	6839      	ldr	r1, [r7, #0]
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f000 fa7d 	bl	8017482 <USBD_CtlError>
            err++;
 8016f88:	7afb      	ldrb	r3, [r7, #11]
 8016f8a:	3301      	adds	r3, #1
 8016f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8016f8e:	e03b      	b.n	8017008 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f96:	695b      	ldr	r3, [r3, #20]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d00b      	beq.n	8016fb4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fa2:	695b      	ldr	r3, [r3, #20]
 8016fa4:	687a      	ldr	r2, [r7, #4]
 8016fa6:	7c12      	ldrb	r2, [r2, #16]
 8016fa8:	f107 0108 	add.w	r1, r7, #8
 8016fac:	4610      	mov	r0, r2
 8016fae:	4798      	blx	r3
 8016fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fb2:	e029      	b.n	8017008 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016fb4:	6839      	ldr	r1, [r7, #0]
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	f000 fa63 	bl	8017482 <USBD_CtlError>
            err++;
 8016fbc:	7afb      	ldrb	r3, [r7, #11]
 8016fbe:	3301      	adds	r3, #1
 8016fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8016fc2:	e021      	b.n	8017008 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fca:	699b      	ldr	r3, [r3, #24]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d00b      	beq.n	8016fe8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fd6:	699b      	ldr	r3, [r3, #24]
 8016fd8:	687a      	ldr	r2, [r7, #4]
 8016fda:	7c12      	ldrb	r2, [r2, #16]
 8016fdc:	f107 0108 	add.w	r1, r7, #8
 8016fe0:	4610      	mov	r0, r2
 8016fe2:	4798      	blx	r3
 8016fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fe6:	e00f      	b.n	8017008 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016fe8:	6839      	ldr	r1, [r7, #0]
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	f000 fa49 	bl	8017482 <USBD_CtlError>
            err++;
 8016ff0:	7afb      	ldrb	r3, [r7, #11]
 8016ff2:	3301      	adds	r3, #1
 8016ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ff6:	e007      	b.n	8017008 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016ff8:	6839      	ldr	r1, [r7, #0]
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f000 fa41 	bl	8017482 <USBD_CtlError>
          err++;
 8017000:	7afb      	ldrb	r3, [r7, #11]
 8017002:	3301      	adds	r3, #1
 8017004:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017006:	bf00      	nop
      }
      break;
 8017008:	e037      	b.n	801707a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	7c1b      	ldrb	r3, [r3, #16]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d109      	bne.n	8017026 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801701a:	f107 0208 	add.w	r2, r7, #8
 801701e:	4610      	mov	r0, r2
 8017020:	4798      	blx	r3
 8017022:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017024:	e029      	b.n	801707a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017026:	6839      	ldr	r1, [r7, #0]
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f000 fa2a 	bl	8017482 <USBD_CtlError>
        err++;
 801702e:	7afb      	ldrb	r3, [r7, #11]
 8017030:	3301      	adds	r3, #1
 8017032:	72fb      	strb	r3, [r7, #11]
      break;
 8017034:	e021      	b.n	801707a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	7c1b      	ldrb	r3, [r3, #16]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d10d      	bne.n	801705a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017046:	f107 0208 	add.w	r2, r7, #8
 801704a:	4610      	mov	r0, r2
 801704c:	4798      	blx	r3
 801704e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	3301      	adds	r3, #1
 8017054:	2207      	movs	r2, #7
 8017056:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017058:	e00f      	b.n	801707a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801705a:	6839      	ldr	r1, [r7, #0]
 801705c:	6878      	ldr	r0, [r7, #4]
 801705e:	f000 fa10 	bl	8017482 <USBD_CtlError>
        err++;
 8017062:	7afb      	ldrb	r3, [r7, #11]
 8017064:	3301      	adds	r3, #1
 8017066:	72fb      	strb	r3, [r7, #11]
      break;
 8017068:	e007      	b.n	801707a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801706a:	6839      	ldr	r1, [r7, #0]
 801706c:	6878      	ldr	r0, [r7, #4]
 801706e:	f000 fa08 	bl	8017482 <USBD_CtlError>
      err++;
 8017072:	7afb      	ldrb	r3, [r7, #11]
 8017074:	3301      	adds	r3, #1
 8017076:	72fb      	strb	r3, [r7, #11]
      break;
 8017078:	bf00      	nop
  }

  if (err != 0U)
 801707a:	7afb      	ldrb	r3, [r7, #11]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d11e      	bne.n	80170be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8017080:	683b      	ldr	r3, [r7, #0]
 8017082:	88db      	ldrh	r3, [r3, #6]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d016      	beq.n	80170b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017088:	893b      	ldrh	r3, [r7, #8]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d00e      	beq.n	80170ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	88da      	ldrh	r2, [r3, #6]
 8017092:	893b      	ldrh	r3, [r7, #8]
 8017094:	4293      	cmp	r3, r2
 8017096:	bf28      	it	cs
 8017098:	4613      	movcs	r3, r2
 801709a:	b29b      	uxth	r3, r3
 801709c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801709e:	893b      	ldrh	r3, [r7, #8]
 80170a0:	461a      	mov	r2, r3
 80170a2:	68f9      	ldr	r1, [r7, #12]
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f000 fa69 	bl	801757c <USBD_CtlSendData>
 80170aa:	e009      	b.n	80170c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80170ac:	6839      	ldr	r1, [r7, #0]
 80170ae:	6878      	ldr	r0, [r7, #4]
 80170b0:	f000 f9e7 	bl	8017482 <USBD_CtlError>
 80170b4:	e004      	b.n	80170c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f000 fac1 	bl	801763e <USBD_CtlSendStatus>
 80170bc:	e000      	b.n	80170c0 <USBD_GetDescriptor+0x2cc>
    return;
 80170be:	bf00      	nop
  }
}
 80170c0:	3710      	adds	r7, #16
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}
 80170c6:	bf00      	nop

080170c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b084      	sub	sp, #16
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
 80170d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	889b      	ldrh	r3, [r3, #4]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d131      	bne.n	801713e <USBD_SetAddress+0x76>
 80170da:	683b      	ldr	r3, [r7, #0]
 80170dc:	88db      	ldrh	r3, [r3, #6]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d12d      	bne.n	801713e <USBD_SetAddress+0x76>
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	885b      	ldrh	r3, [r3, #2]
 80170e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80170e8:	d829      	bhi.n	801713e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80170ea:	683b      	ldr	r3, [r7, #0]
 80170ec:	885b      	ldrh	r3, [r3, #2]
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80170f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80170fc:	b2db      	uxtb	r3, r3
 80170fe:	2b03      	cmp	r3, #3
 8017100:	d104      	bne.n	801710c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017102:	6839      	ldr	r1, [r7, #0]
 8017104:	6878      	ldr	r0, [r7, #4]
 8017106:	f000 f9bc 	bl	8017482 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801710a:	e01d      	b.n	8017148 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	7bfa      	ldrb	r2, [r7, #15]
 8017110:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017114:	7bfb      	ldrb	r3, [r7, #15]
 8017116:	4619      	mov	r1, r3
 8017118:	6878      	ldr	r0, [r7, #4]
 801711a:	f000 ff01 	bl	8017f20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f000 fa8d 	bl	801763e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017124:	7bfb      	ldrb	r3, [r7, #15]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d004      	beq.n	8017134 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	2202      	movs	r2, #2
 801712e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017132:	e009      	b.n	8017148 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2201      	movs	r2, #1
 8017138:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801713c:	e004      	b.n	8017148 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801713e:	6839      	ldr	r1, [r7, #0]
 8017140:	6878      	ldr	r0, [r7, #4]
 8017142:	f000 f99e 	bl	8017482 <USBD_CtlError>
  }
}
 8017146:	bf00      	nop
 8017148:	bf00      	nop
 801714a:	3710      	adds	r7, #16
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}

08017150 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b084      	sub	sp, #16
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801715a:	2300      	movs	r3, #0
 801715c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	885b      	ldrh	r3, [r3, #2]
 8017162:	b2da      	uxtb	r2, r3
 8017164:	4b4e      	ldr	r3, [pc, #312]	@ (80172a0 <USBD_SetConfig+0x150>)
 8017166:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017168:	4b4d      	ldr	r3, [pc, #308]	@ (80172a0 <USBD_SetConfig+0x150>)
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	2b01      	cmp	r3, #1
 801716e:	d905      	bls.n	801717c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017170:	6839      	ldr	r1, [r7, #0]
 8017172:	6878      	ldr	r0, [r7, #4]
 8017174:	f000 f985 	bl	8017482 <USBD_CtlError>
    return USBD_FAIL;
 8017178:	2303      	movs	r3, #3
 801717a:	e08c      	b.n	8017296 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017182:	b2db      	uxtb	r3, r3
 8017184:	2b02      	cmp	r3, #2
 8017186:	d002      	beq.n	801718e <USBD_SetConfig+0x3e>
 8017188:	2b03      	cmp	r3, #3
 801718a:	d029      	beq.n	80171e0 <USBD_SetConfig+0x90>
 801718c:	e075      	b.n	801727a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801718e:	4b44      	ldr	r3, [pc, #272]	@ (80172a0 <USBD_SetConfig+0x150>)
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d020      	beq.n	80171d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017196:	4b42      	ldr	r3, [pc, #264]	@ (80172a0 <USBD_SetConfig+0x150>)
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	461a      	mov	r2, r3
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80171a0:	4b3f      	ldr	r3, [pc, #252]	@ (80172a0 <USBD_SetConfig+0x150>)
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	4619      	mov	r1, r3
 80171a6:	6878      	ldr	r0, [r7, #4]
 80171a8:	f7fe ffcd 	bl	8016146 <USBD_SetClassConfig>
 80171ac:	4603      	mov	r3, r0
 80171ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80171b0:	7bfb      	ldrb	r3, [r7, #15]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d008      	beq.n	80171c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80171b6:	6839      	ldr	r1, [r7, #0]
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f000 f962 	bl	8017482 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	2202      	movs	r2, #2
 80171c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80171c6:	e065      	b.n	8017294 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f000 fa38 	bl	801763e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2203      	movs	r2, #3
 80171d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80171d6:	e05d      	b.n	8017294 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f000 fa30 	bl	801763e <USBD_CtlSendStatus>
      break;
 80171de:	e059      	b.n	8017294 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80171e0:	4b2f      	ldr	r3, [pc, #188]	@ (80172a0 <USBD_SetConfig+0x150>)
 80171e2:	781b      	ldrb	r3, [r3, #0]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d112      	bne.n	801720e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	2202      	movs	r2, #2
 80171ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80171f0:	4b2b      	ldr	r3, [pc, #172]	@ (80172a0 <USBD_SetConfig+0x150>)
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	461a      	mov	r2, r3
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80171fa:	4b29      	ldr	r3, [pc, #164]	@ (80172a0 <USBD_SetConfig+0x150>)
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	4619      	mov	r1, r3
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f7fe ffbc 	bl	801617e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017206:	6878      	ldr	r0, [r7, #4]
 8017208:	f000 fa19 	bl	801763e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801720c:	e042      	b.n	8017294 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801720e:	4b24      	ldr	r3, [pc, #144]	@ (80172a0 <USBD_SetConfig+0x150>)
 8017210:	781b      	ldrb	r3, [r3, #0]
 8017212:	461a      	mov	r2, r3
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	685b      	ldr	r3, [r3, #4]
 8017218:	429a      	cmp	r2, r3
 801721a:	d02a      	beq.n	8017272 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	685b      	ldr	r3, [r3, #4]
 8017220:	b2db      	uxtb	r3, r3
 8017222:	4619      	mov	r1, r3
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f7fe ffaa 	bl	801617e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801722a:	4b1d      	ldr	r3, [pc, #116]	@ (80172a0 <USBD_SetConfig+0x150>)
 801722c:	781b      	ldrb	r3, [r3, #0]
 801722e:	461a      	mov	r2, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017234:	4b1a      	ldr	r3, [pc, #104]	@ (80172a0 <USBD_SetConfig+0x150>)
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	4619      	mov	r1, r3
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f7fe ff83 	bl	8016146 <USBD_SetClassConfig>
 8017240:	4603      	mov	r3, r0
 8017242:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017244:	7bfb      	ldrb	r3, [r7, #15]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d00f      	beq.n	801726a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801724a:	6839      	ldr	r1, [r7, #0]
 801724c:	6878      	ldr	r0, [r7, #4]
 801724e:	f000 f918 	bl	8017482 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	685b      	ldr	r3, [r3, #4]
 8017256:	b2db      	uxtb	r3, r3
 8017258:	4619      	mov	r1, r3
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f7fe ff8f 	bl	801617e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	2202      	movs	r2, #2
 8017264:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017268:	e014      	b.n	8017294 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f000 f9e7 	bl	801763e <USBD_CtlSendStatus>
      break;
 8017270:	e010      	b.n	8017294 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f000 f9e3 	bl	801763e <USBD_CtlSendStatus>
      break;
 8017278:	e00c      	b.n	8017294 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801727a:	6839      	ldr	r1, [r7, #0]
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f000 f900 	bl	8017482 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017282:	4b07      	ldr	r3, [pc, #28]	@ (80172a0 <USBD_SetConfig+0x150>)
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	4619      	mov	r1, r3
 8017288:	6878      	ldr	r0, [r7, #4]
 801728a:	f7fe ff78 	bl	801617e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801728e:	2303      	movs	r3, #3
 8017290:	73fb      	strb	r3, [r7, #15]
      break;
 8017292:	bf00      	nop
  }

  return ret;
 8017294:	7bfb      	ldrb	r3, [r7, #15]
}
 8017296:	4618      	mov	r0, r3
 8017298:	3710      	adds	r7, #16
 801729a:	46bd      	mov	sp, r7
 801729c:	bd80      	pop	{r7, pc}
 801729e:	bf00      	nop
 80172a0:	20000210 	.word	0x20000210

080172a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80172ae:	683b      	ldr	r3, [r7, #0]
 80172b0:	88db      	ldrh	r3, [r3, #6]
 80172b2:	2b01      	cmp	r3, #1
 80172b4:	d004      	beq.n	80172c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80172b6:	6839      	ldr	r1, [r7, #0]
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f000 f8e2 	bl	8017482 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80172be:	e023      	b.n	8017308 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80172c6:	b2db      	uxtb	r3, r3
 80172c8:	2b02      	cmp	r3, #2
 80172ca:	dc02      	bgt.n	80172d2 <USBD_GetConfig+0x2e>
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	dc03      	bgt.n	80172d8 <USBD_GetConfig+0x34>
 80172d0:	e015      	b.n	80172fe <USBD_GetConfig+0x5a>
 80172d2:	2b03      	cmp	r3, #3
 80172d4:	d00b      	beq.n	80172ee <USBD_GetConfig+0x4a>
 80172d6:	e012      	b.n	80172fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	2200      	movs	r2, #0
 80172dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	3308      	adds	r3, #8
 80172e2:	2201      	movs	r2, #1
 80172e4:	4619      	mov	r1, r3
 80172e6:	6878      	ldr	r0, [r7, #4]
 80172e8:	f000 f948 	bl	801757c <USBD_CtlSendData>
        break;
 80172ec:	e00c      	b.n	8017308 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	3304      	adds	r3, #4
 80172f2:	2201      	movs	r2, #1
 80172f4:	4619      	mov	r1, r3
 80172f6:	6878      	ldr	r0, [r7, #4]
 80172f8:	f000 f940 	bl	801757c <USBD_CtlSendData>
        break;
 80172fc:	e004      	b.n	8017308 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80172fe:	6839      	ldr	r1, [r7, #0]
 8017300:	6878      	ldr	r0, [r7, #4]
 8017302:	f000 f8be 	bl	8017482 <USBD_CtlError>
        break;
 8017306:	bf00      	nop
}
 8017308:	bf00      	nop
 801730a:	3708      	adds	r7, #8
 801730c:	46bd      	mov	sp, r7
 801730e:	bd80      	pop	{r7, pc}

08017310 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
 8017318:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017320:	b2db      	uxtb	r3, r3
 8017322:	3b01      	subs	r3, #1
 8017324:	2b02      	cmp	r3, #2
 8017326:	d81e      	bhi.n	8017366 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017328:	683b      	ldr	r3, [r7, #0]
 801732a:	88db      	ldrh	r3, [r3, #6]
 801732c:	2b02      	cmp	r3, #2
 801732e:	d004      	beq.n	801733a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017330:	6839      	ldr	r1, [r7, #0]
 8017332:	6878      	ldr	r0, [r7, #4]
 8017334:	f000 f8a5 	bl	8017482 <USBD_CtlError>
        break;
 8017338:	e01a      	b.n	8017370 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	2201      	movs	r2, #1
 801733e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017346:	2b00      	cmp	r3, #0
 8017348:	d005      	beq.n	8017356 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	68db      	ldr	r3, [r3, #12]
 801734e:	f043 0202 	orr.w	r2, r3, #2
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	330c      	adds	r3, #12
 801735a:	2202      	movs	r2, #2
 801735c:	4619      	mov	r1, r3
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f000 f90c 	bl	801757c <USBD_CtlSendData>
      break;
 8017364:	e004      	b.n	8017370 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017366:	6839      	ldr	r1, [r7, #0]
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f000 f88a 	bl	8017482 <USBD_CtlError>
      break;
 801736e:	bf00      	nop
  }
}
 8017370:	bf00      	nop
 8017372:	3708      	adds	r7, #8
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}

08017378 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	885b      	ldrh	r3, [r3, #2]
 8017386:	2b01      	cmp	r3, #1
 8017388:	d107      	bne.n	801739a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	2201      	movs	r2, #1
 801738e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f000 f953 	bl	801763e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017398:	e013      	b.n	80173c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	885b      	ldrh	r3, [r3, #2]
 801739e:	2b02      	cmp	r3, #2
 80173a0:	d10b      	bne.n	80173ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80173a2:	683b      	ldr	r3, [r7, #0]
 80173a4:	889b      	ldrh	r3, [r3, #4]
 80173a6:	0a1b      	lsrs	r3, r3, #8
 80173a8:	b29b      	uxth	r3, r3
 80173aa:	b2da      	uxtb	r2, r3
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80173b2:	6878      	ldr	r0, [r7, #4]
 80173b4:	f000 f943 	bl	801763e <USBD_CtlSendStatus>
}
 80173b8:	e003      	b.n	80173c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80173ba:	6839      	ldr	r1, [r7, #0]
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f000 f860 	bl	8017482 <USBD_CtlError>
}
 80173c2:	bf00      	nop
 80173c4:	3708      	adds	r7, #8
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}

080173ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173ca:	b580      	push	{r7, lr}
 80173cc:	b082      	sub	sp, #8
 80173ce:	af00      	add	r7, sp, #0
 80173d0:	6078      	str	r0, [r7, #4]
 80173d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	3b01      	subs	r3, #1
 80173de:	2b02      	cmp	r3, #2
 80173e0:	d80b      	bhi.n	80173fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	885b      	ldrh	r3, [r3, #2]
 80173e6:	2b01      	cmp	r3, #1
 80173e8:	d10c      	bne.n	8017404 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	2200      	movs	r2, #0
 80173ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80173f2:	6878      	ldr	r0, [r7, #4]
 80173f4:	f000 f923 	bl	801763e <USBD_CtlSendStatus>
      }
      break;
 80173f8:	e004      	b.n	8017404 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80173fa:	6839      	ldr	r1, [r7, #0]
 80173fc:	6878      	ldr	r0, [r7, #4]
 80173fe:	f000 f840 	bl	8017482 <USBD_CtlError>
      break;
 8017402:	e000      	b.n	8017406 <USBD_ClrFeature+0x3c>
      break;
 8017404:	bf00      	nop
  }
}
 8017406:	bf00      	nop
 8017408:	3708      	adds	r7, #8
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}

0801740e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801740e:	b580      	push	{r7, lr}
 8017410:	b084      	sub	sp, #16
 8017412:	af00      	add	r7, sp, #0
 8017414:	6078      	str	r0, [r7, #4]
 8017416:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017418:	683b      	ldr	r3, [r7, #0]
 801741a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	781a      	ldrb	r2, [r3, #0]
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	3301      	adds	r3, #1
 8017428:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	781a      	ldrb	r2, [r3, #0]
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	3301      	adds	r3, #1
 8017436:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017438:	68f8      	ldr	r0, [r7, #12]
 801743a:	f7ff fa3d 	bl	80168b8 <SWAPBYTE>
 801743e:	4603      	mov	r3, r0
 8017440:	461a      	mov	r2, r3
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	3301      	adds	r3, #1
 801744a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	3301      	adds	r3, #1
 8017450:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017452:	68f8      	ldr	r0, [r7, #12]
 8017454:	f7ff fa30 	bl	80168b8 <SWAPBYTE>
 8017458:	4603      	mov	r3, r0
 801745a:	461a      	mov	r2, r3
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	3301      	adds	r3, #1
 8017464:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	3301      	adds	r3, #1
 801746a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801746c:	68f8      	ldr	r0, [r7, #12]
 801746e:	f7ff fa23 	bl	80168b8 <SWAPBYTE>
 8017472:	4603      	mov	r3, r0
 8017474:	461a      	mov	r2, r3
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	80da      	strh	r2, [r3, #6]
}
 801747a:	bf00      	nop
 801747c:	3710      	adds	r7, #16
 801747e:	46bd      	mov	sp, r7
 8017480:	bd80      	pop	{r7, pc}

08017482 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017482:	b580      	push	{r7, lr}
 8017484:	b082      	sub	sp, #8
 8017486:	af00      	add	r7, sp, #0
 8017488:	6078      	str	r0, [r7, #4]
 801748a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801748c:	2180      	movs	r1, #128	@ 0x80
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	f000 fcdc 	bl	8017e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017494:	2100      	movs	r1, #0
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f000 fcd8 	bl	8017e4c <USBD_LL_StallEP>
}
 801749c:	bf00      	nop
 801749e:	3708      	adds	r7, #8
 80174a0:	46bd      	mov	sp, r7
 80174a2:	bd80      	pop	{r7, pc}

080174a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b086      	sub	sp, #24
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	60f8      	str	r0, [r7, #12]
 80174ac:	60b9      	str	r1, [r7, #8]
 80174ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80174b0:	2300      	movs	r3, #0
 80174b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d042      	beq.n	8017540 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80174be:	6938      	ldr	r0, [r7, #16]
 80174c0:	f000 f842 	bl	8017548 <USBD_GetLen>
 80174c4:	4603      	mov	r3, r0
 80174c6:	3301      	adds	r3, #1
 80174c8:	005b      	lsls	r3, r3, #1
 80174ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80174ce:	d808      	bhi.n	80174e2 <USBD_GetString+0x3e>
 80174d0:	6938      	ldr	r0, [r7, #16]
 80174d2:	f000 f839 	bl	8017548 <USBD_GetLen>
 80174d6:	4603      	mov	r3, r0
 80174d8:	3301      	adds	r3, #1
 80174da:	b29b      	uxth	r3, r3
 80174dc:	005b      	lsls	r3, r3, #1
 80174de:	b29a      	uxth	r2, r3
 80174e0:	e001      	b.n	80174e6 <USBD_GetString+0x42>
 80174e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80174ea:	7dfb      	ldrb	r3, [r7, #23]
 80174ec:	68ba      	ldr	r2, [r7, #8]
 80174ee:	4413      	add	r3, r2
 80174f0:	687a      	ldr	r2, [r7, #4]
 80174f2:	7812      	ldrb	r2, [r2, #0]
 80174f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80174f6:	7dfb      	ldrb	r3, [r7, #23]
 80174f8:	3301      	adds	r3, #1
 80174fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80174fc:	7dfb      	ldrb	r3, [r7, #23]
 80174fe:	68ba      	ldr	r2, [r7, #8]
 8017500:	4413      	add	r3, r2
 8017502:	2203      	movs	r2, #3
 8017504:	701a      	strb	r2, [r3, #0]
  idx++;
 8017506:	7dfb      	ldrb	r3, [r7, #23]
 8017508:	3301      	adds	r3, #1
 801750a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801750c:	e013      	b.n	8017536 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801750e:	7dfb      	ldrb	r3, [r7, #23]
 8017510:	68ba      	ldr	r2, [r7, #8]
 8017512:	4413      	add	r3, r2
 8017514:	693a      	ldr	r2, [r7, #16]
 8017516:	7812      	ldrb	r2, [r2, #0]
 8017518:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801751a:	693b      	ldr	r3, [r7, #16]
 801751c:	3301      	adds	r3, #1
 801751e:	613b      	str	r3, [r7, #16]
    idx++;
 8017520:	7dfb      	ldrb	r3, [r7, #23]
 8017522:	3301      	adds	r3, #1
 8017524:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017526:	7dfb      	ldrb	r3, [r7, #23]
 8017528:	68ba      	ldr	r2, [r7, #8]
 801752a:	4413      	add	r3, r2
 801752c:	2200      	movs	r2, #0
 801752e:	701a      	strb	r2, [r3, #0]
    idx++;
 8017530:	7dfb      	ldrb	r3, [r7, #23]
 8017532:	3301      	adds	r3, #1
 8017534:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017536:	693b      	ldr	r3, [r7, #16]
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d1e7      	bne.n	801750e <USBD_GetString+0x6a>
 801753e:	e000      	b.n	8017542 <USBD_GetString+0x9e>
    return;
 8017540:	bf00      	nop
  }
}
 8017542:	3718      	adds	r7, #24
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}

08017548 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017548:	b480      	push	{r7}
 801754a:	b085      	sub	sp, #20
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017550:	2300      	movs	r3, #0
 8017552:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017558:	e005      	b.n	8017566 <USBD_GetLen+0x1e>
  {
    len++;
 801755a:	7bfb      	ldrb	r3, [r7, #15]
 801755c:	3301      	adds	r3, #1
 801755e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017560:	68bb      	ldr	r3, [r7, #8]
 8017562:	3301      	adds	r3, #1
 8017564:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	781b      	ldrb	r3, [r3, #0]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d1f5      	bne.n	801755a <USBD_GetLen+0x12>
  }

  return len;
 801756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017570:	4618      	mov	r0, r3
 8017572:	3714      	adds	r7, #20
 8017574:	46bd      	mov	sp, r7
 8017576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757a:	4770      	bx	lr

0801757c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b084      	sub	sp, #16
 8017580:	af00      	add	r7, sp, #0
 8017582:	60f8      	str	r0, [r7, #12]
 8017584:	60b9      	str	r1, [r7, #8]
 8017586:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	2202      	movs	r2, #2
 801758c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	687a      	ldr	r2, [r7, #4]
 8017594:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	68ba      	ldr	r2, [r7, #8]
 801759a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	687a      	ldr	r2, [r7, #4]
 80175a0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	68ba      	ldr	r2, [r7, #8]
 80175a6:	2100      	movs	r1, #0
 80175a8:	68f8      	ldr	r0, [r7, #12]
 80175aa:	f000 fcd8 	bl	8017f5e <USBD_LL_Transmit>

  return USBD_OK;
 80175ae:	2300      	movs	r3, #0
}
 80175b0:	4618      	mov	r0, r3
 80175b2:	3710      	adds	r7, #16
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b084      	sub	sp, #16
 80175bc:	af00      	add	r7, sp, #0
 80175be:	60f8      	str	r0, [r7, #12]
 80175c0:	60b9      	str	r1, [r7, #8]
 80175c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	68ba      	ldr	r2, [r7, #8]
 80175c8:	2100      	movs	r1, #0
 80175ca:	68f8      	ldr	r0, [r7, #12]
 80175cc:	f000 fcc7 	bl	8017f5e <USBD_LL_Transmit>

  return USBD_OK;
 80175d0:	2300      	movs	r3, #0
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3710      	adds	r7, #16
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}

080175da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80175da:	b580      	push	{r7, lr}
 80175dc:	b084      	sub	sp, #16
 80175de:	af00      	add	r7, sp, #0
 80175e0:	60f8      	str	r0, [r7, #12]
 80175e2:	60b9      	str	r1, [r7, #8]
 80175e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	2203      	movs	r2, #3
 80175ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	687a      	ldr	r2, [r7, #4]
 80175f2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	68ba      	ldr	r2, [r7, #8]
 80175fa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	687a      	ldr	r2, [r7, #4]
 8017602:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	68ba      	ldr	r2, [r7, #8]
 801760a:	2100      	movs	r1, #0
 801760c:	68f8      	ldr	r0, [r7, #12]
 801760e:	f000 fcc7 	bl	8017fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017612:	2300      	movs	r3, #0
}
 8017614:	4618      	mov	r0, r3
 8017616:	3710      	adds	r7, #16
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}

0801761c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b084      	sub	sp, #16
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	68ba      	ldr	r2, [r7, #8]
 801762c:	2100      	movs	r1, #0
 801762e:	68f8      	ldr	r0, [r7, #12]
 8017630:	f000 fcb6 	bl	8017fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017634:	2300      	movs	r3, #0
}
 8017636:	4618      	mov	r0, r3
 8017638:	3710      	adds	r7, #16
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}

0801763e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801763e:	b580      	push	{r7, lr}
 8017640:	b082      	sub	sp, #8
 8017642:	af00      	add	r7, sp, #0
 8017644:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2204      	movs	r2, #4
 801764a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801764e:	2300      	movs	r3, #0
 8017650:	2200      	movs	r2, #0
 8017652:	2100      	movs	r1, #0
 8017654:	6878      	ldr	r0, [r7, #4]
 8017656:	f000 fc82 	bl	8017f5e <USBD_LL_Transmit>

  return USBD_OK;
 801765a:	2300      	movs	r3, #0
}
 801765c:	4618      	mov	r0, r3
 801765e:	3708      	adds	r7, #8
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}

08017664 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b082      	sub	sp, #8
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2205      	movs	r2, #5
 8017670:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017674:	2300      	movs	r3, #0
 8017676:	2200      	movs	r2, #0
 8017678:	2100      	movs	r1, #0
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f000 fc90 	bl	8017fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017680:	2300      	movs	r3, #0
}
 8017682:	4618      	mov	r0, r3
 8017684:	3708      	adds	r7, #8
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}
	...

0801768c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017690:	2200      	movs	r2, #0
 8017692:	4912      	ldr	r1, [pc, #72]	@ (80176dc <MX_USB_DEVICE_Init+0x50>)
 8017694:	4812      	ldr	r0, [pc, #72]	@ (80176e0 <MX_USB_DEVICE_Init+0x54>)
 8017696:	f7fe fcd9 	bl	801604c <USBD_Init>
 801769a:	4603      	mov	r3, r0
 801769c:	2b00      	cmp	r3, #0
 801769e:	d001      	beq.n	80176a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80176a0:	f7f9 f940 	bl	8010924 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80176a4:	490f      	ldr	r1, [pc, #60]	@ (80176e4 <MX_USB_DEVICE_Init+0x58>)
 80176a6:	480e      	ldr	r0, [pc, #56]	@ (80176e0 <MX_USB_DEVICE_Init+0x54>)
 80176a8:	f7fe fd00 	bl	80160ac <USBD_RegisterClass>
 80176ac:	4603      	mov	r3, r0
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d001      	beq.n	80176b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80176b2:	f7f9 f937 	bl	8010924 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80176b6:	490c      	ldr	r1, [pc, #48]	@ (80176e8 <MX_USB_DEVICE_Init+0x5c>)
 80176b8:	4809      	ldr	r0, [pc, #36]	@ (80176e0 <MX_USB_DEVICE_Init+0x54>)
 80176ba:	f7fe fc37 	bl	8015f2c <USBD_CDC_RegisterInterface>
 80176be:	4603      	mov	r3, r0
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d001      	beq.n	80176c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80176c4:	f7f9 f92e 	bl	8010924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80176c8:	4805      	ldr	r0, [pc, #20]	@ (80176e0 <MX_USB_DEVICE_Init+0x54>)
 80176ca:	f7fe fd25 	bl	8016118 <USBD_Start>
 80176ce:	4603      	mov	r3, r0
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d001      	beq.n	80176d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80176d4:	f7f9 f926 	bl	8010924 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80176d8:	bf00      	nop
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	200000ac 	.word	0x200000ac
 80176e0:	20000214 	.word	0x20000214
 80176e4:	20000018 	.word	0x20000018
 80176e8:	20000098 	.word	0x20000098

080176ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80176f0:	2200      	movs	r2, #0
 80176f2:	4905      	ldr	r1, [pc, #20]	@ (8017708 <CDC_Init_FS+0x1c>)
 80176f4:	4805      	ldr	r0, [pc, #20]	@ (801770c <CDC_Init_FS+0x20>)
 80176f6:	f7fe fc33 	bl	8015f60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80176fa:	4905      	ldr	r1, [pc, #20]	@ (8017710 <CDC_Init_FS+0x24>)
 80176fc:	4803      	ldr	r0, [pc, #12]	@ (801770c <CDC_Init_FS+0x20>)
 80176fe:	f7fe fc51 	bl	8015fa4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017702:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017704:	4618      	mov	r0, r3
 8017706:	bd80      	pop	{r7, pc}
 8017708:	20000cf0 	.word	0x20000cf0
 801770c:	20000214 	.word	0x20000214
 8017710:	200004f0 	.word	0x200004f0

08017714 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017714:	b480      	push	{r7}
 8017716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017718:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801771a:	4618      	mov	r0, r3
 801771c:	46bd      	mov	sp, r7
 801771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017722:	4770      	bx	lr

08017724 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017724:	b480      	push	{r7}
 8017726:	b083      	sub	sp, #12
 8017728:	af00      	add	r7, sp, #0
 801772a:	4603      	mov	r3, r0
 801772c:	6039      	str	r1, [r7, #0]
 801772e:	71fb      	strb	r3, [r7, #7]
 8017730:	4613      	mov	r3, r2
 8017732:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017734:	79fb      	ldrb	r3, [r7, #7]
 8017736:	2b23      	cmp	r3, #35	@ 0x23
 8017738:	d84a      	bhi.n	80177d0 <CDC_Control_FS+0xac>
 801773a:	a201      	add	r2, pc, #4	@ (adr r2, 8017740 <CDC_Control_FS+0x1c>)
 801773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017740:	080177d1 	.word	0x080177d1
 8017744:	080177d1 	.word	0x080177d1
 8017748:	080177d1 	.word	0x080177d1
 801774c:	080177d1 	.word	0x080177d1
 8017750:	080177d1 	.word	0x080177d1
 8017754:	080177d1 	.word	0x080177d1
 8017758:	080177d1 	.word	0x080177d1
 801775c:	080177d1 	.word	0x080177d1
 8017760:	080177d1 	.word	0x080177d1
 8017764:	080177d1 	.word	0x080177d1
 8017768:	080177d1 	.word	0x080177d1
 801776c:	080177d1 	.word	0x080177d1
 8017770:	080177d1 	.word	0x080177d1
 8017774:	080177d1 	.word	0x080177d1
 8017778:	080177d1 	.word	0x080177d1
 801777c:	080177d1 	.word	0x080177d1
 8017780:	080177d1 	.word	0x080177d1
 8017784:	080177d1 	.word	0x080177d1
 8017788:	080177d1 	.word	0x080177d1
 801778c:	080177d1 	.word	0x080177d1
 8017790:	080177d1 	.word	0x080177d1
 8017794:	080177d1 	.word	0x080177d1
 8017798:	080177d1 	.word	0x080177d1
 801779c:	080177d1 	.word	0x080177d1
 80177a0:	080177d1 	.word	0x080177d1
 80177a4:	080177d1 	.word	0x080177d1
 80177a8:	080177d1 	.word	0x080177d1
 80177ac:	080177d1 	.word	0x080177d1
 80177b0:	080177d1 	.word	0x080177d1
 80177b4:	080177d1 	.word	0x080177d1
 80177b8:	080177d1 	.word	0x080177d1
 80177bc:	080177d1 	.word	0x080177d1
 80177c0:	080177d1 	.word	0x080177d1
 80177c4:	080177d1 	.word	0x080177d1
 80177c8:	080177d1 	.word	0x080177d1
 80177cc:	080177d1 	.word	0x080177d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80177d0:	bf00      	nop
  }

  return (USBD_OK);
 80177d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	370c      	adds	r7, #12
 80177d8:	46bd      	mov	sp, r7
 80177da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177de:	4770      	bx	lr

080177e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b082      	sub	sp, #8
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80177ea:	6879      	ldr	r1, [r7, #4]
 80177ec:	4805      	ldr	r0, [pc, #20]	@ (8017804 <CDC_Receive_FS+0x24>)
 80177ee:	f7fe fbd9 	bl	8015fa4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80177f2:	4804      	ldr	r0, [pc, #16]	@ (8017804 <CDC_Receive_FS+0x24>)
 80177f4:	f7fe fbf4 	bl	8015fe0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80177f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80177fa:	4618      	mov	r0, r3
 80177fc:	3708      	adds	r7, #8
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}
 8017802:	bf00      	nop
 8017804:	20000214 	.word	0x20000214

08017808 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017808:	b480      	push	{r7}
 801780a:	b087      	sub	sp, #28
 801780c:	af00      	add	r7, sp, #0
 801780e:	60f8      	str	r0, [r7, #12]
 8017810:	60b9      	str	r1, [r7, #8]
 8017812:	4613      	mov	r3, r2
 8017814:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017816:	2300      	movs	r3, #0
 8017818:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801781a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801781e:	4618      	mov	r0, r3
 8017820:	371c      	adds	r7, #28
 8017822:	46bd      	mov	sp, r7
 8017824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017828:	4770      	bx	lr
	...

0801782c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801782c:	b480      	push	{r7}
 801782e:	b083      	sub	sp, #12
 8017830:	af00      	add	r7, sp, #0
 8017832:	4603      	mov	r3, r0
 8017834:	6039      	str	r1, [r7, #0]
 8017836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017838:	683b      	ldr	r3, [r7, #0]
 801783a:	2212      	movs	r2, #18
 801783c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801783e:	4b03      	ldr	r3, [pc, #12]	@ (801784c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017840:	4618      	mov	r0, r3
 8017842:	370c      	adds	r7, #12
 8017844:	46bd      	mov	sp, r7
 8017846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784a:	4770      	bx	lr
 801784c:	200000c8 	.word	0x200000c8

08017850 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017850:	b480      	push	{r7}
 8017852:	b083      	sub	sp, #12
 8017854:	af00      	add	r7, sp, #0
 8017856:	4603      	mov	r3, r0
 8017858:	6039      	str	r1, [r7, #0]
 801785a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	2204      	movs	r2, #4
 8017860:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017862:	4b03      	ldr	r3, [pc, #12]	@ (8017870 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017864:	4618      	mov	r0, r3
 8017866:	370c      	adds	r7, #12
 8017868:	46bd      	mov	sp, r7
 801786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786e:	4770      	bx	lr
 8017870:	200000dc 	.word	0x200000dc

08017874 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	af00      	add	r7, sp, #0
 801787a:	4603      	mov	r3, r0
 801787c:	6039      	str	r1, [r7, #0]
 801787e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017880:	79fb      	ldrb	r3, [r7, #7]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d105      	bne.n	8017892 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017886:	683a      	ldr	r2, [r7, #0]
 8017888:	4907      	ldr	r1, [pc, #28]	@ (80178a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801788a:	4808      	ldr	r0, [pc, #32]	@ (80178ac <USBD_FS_ProductStrDescriptor+0x38>)
 801788c:	f7ff fe0a 	bl	80174a4 <USBD_GetString>
 8017890:	e004      	b.n	801789c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017892:	683a      	ldr	r2, [r7, #0]
 8017894:	4904      	ldr	r1, [pc, #16]	@ (80178a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8017896:	4805      	ldr	r0, [pc, #20]	@ (80178ac <USBD_FS_ProductStrDescriptor+0x38>)
 8017898:	f7ff fe04 	bl	80174a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801789c:	4b02      	ldr	r3, [pc, #8]	@ (80178a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3708      	adds	r7, #8
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}
 80178a6:	bf00      	nop
 80178a8:	200014f0 	.word	0x200014f0
 80178ac:	08018100 	.word	0x08018100

080178b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b082      	sub	sp, #8
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	4603      	mov	r3, r0
 80178b8:	6039      	str	r1, [r7, #0]
 80178ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80178bc:	683a      	ldr	r2, [r7, #0]
 80178be:	4904      	ldr	r1, [pc, #16]	@ (80178d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80178c0:	4804      	ldr	r0, [pc, #16]	@ (80178d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80178c2:	f7ff fdef 	bl	80174a4 <USBD_GetString>
  return USBD_StrDesc;
 80178c6:	4b02      	ldr	r3, [pc, #8]	@ (80178d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3708      	adds	r7, #8
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}
 80178d0:	200014f0 	.word	0x200014f0
 80178d4:	08018118 	.word	0x08018118

080178d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b082      	sub	sp, #8
 80178dc:	af00      	add	r7, sp, #0
 80178de:	4603      	mov	r3, r0
 80178e0:	6039      	str	r1, [r7, #0]
 80178e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80178e4:	683b      	ldr	r3, [r7, #0]
 80178e6:	221a      	movs	r2, #26
 80178e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80178ea:	f000 f843 	bl	8017974 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80178ee:	4b02      	ldr	r3, [pc, #8]	@ (80178f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80178f0:	4618      	mov	r0, r3
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}
 80178f8:	200000e0 	.word	0x200000e0

080178fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	4603      	mov	r3, r0
 8017904:	6039      	str	r1, [r7, #0]
 8017906:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017908:	79fb      	ldrb	r3, [r7, #7]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d105      	bne.n	801791a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801790e:	683a      	ldr	r2, [r7, #0]
 8017910:	4907      	ldr	r1, [pc, #28]	@ (8017930 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017912:	4808      	ldr	r0, [pc, #32]	@ (8017934 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017914:	f7ff fdc6 	bl	80174a4 <USBD_GetString>
 8017918:	e004      	b.n	8017924 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801791a:	683a      	ldr	r2, [r7, #0]
 801791c:	4904      	ldr	r1, [pc, #16]	@ (8017930 <USBD_FS_ConfigStrDescriptor+0x34>)
 801791e:	4805      	ldr	r0, [pc, #20]	@ (8017934 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017920:	f7ff fdc0 	bl	80174a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017924:	4b02      	ldr	r3, [pc, #8]	@ (8017930 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017926:	4618      	mov	r0, r3
 8017928:	3708      	adds	r7, #8
 801792a:	46bd      	mov	sp, r7
 801792c:	bd80      	pop	{r7, pc}
 801792e:	bf00      	nop
 8017930:	200014f0 	.word	0x200014f0
 8017934:	0801812c 	.word	0x0801812c

08017938 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
 801793e:	4603      	mov	r3, r0
 8017940:	6039      	str	r1, [r7, #0]
 8017942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017944:	79fb      	ldrb	r3, [r7, #7]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d105      	bne.n	8017956 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801794a:	683a      	ldr	r2, [r7, #0]
 801794c:	4907      	ldr	r1, [pc, #28]	@ (801796c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801794e:	4808      	ldr	r0, [pc, #32]	@ (8017970 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017950:	f7ff fda8 	bl	80174a4 <USBD_GetString>
 8017954:	e004      	b.n	8017960 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017956:	683a      	ldr	r2, [r7, #0]
 8017958:	4904      	ldr	r1, [pc, #16]	@ (801796c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801795a:	4805      	ldr	r0, [pc, #20]	@ (8017970 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801795c:	f7ff fda2 	bl	80174a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017960:	4b02      	ldr	r3, [pc, #8]	@ (801796c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017962:	4618      	mov	r0, r3
 8017964:	3708      	adds	r7, #8
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}
 801796a:	bf00      	nop
 801796c:	200014f0 	.word	0x200014f0
 8017970:	08018138 	.word	0x08018138

08017974 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b084      	sub	sp, #16
 8017978:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801797a:	4b0f      	ldr	r3, [pc, #60]	@ (80179b8 <Get_SerialNum+0x44>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017980:	4b0e      	ldr	r3, [pc, #56]	@ (80179bc <Get_SerialNum+0x48>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017986:	4b0e      	ldr	r3, [pc, #56]	@ (80179c0 <Get_SerialNum+0x4c>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801798c:	68fa      	ldr	r2, [r7, #12]
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	4413      	add	r3, r2
 8017992:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d009      	beq.n	80179ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801799a:	2208      	movs	r2, #8
 801799c:	4909      	ldr	r1, [pc, #36]	@ (80179c4 <Get_SerialNum+0x50>)
 801799e:	68f8      	ldr	r0, [r7, #12]
 80179a0:	f000 f814 	bl	80179cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80179a4:	2204      	movs	r2, #4
 80179a6:	4908      	ldr	r1, [pc, #32]	@ (80179c8 <Get_SerialNum+0x54>)
 80179a8:	68b8      	ldr	r0, [r7, #8]
 80179aa:	f000 f80f 	bl	80179cc <IntToUnicode>
  }
}
 80179ae:	bf00      	nop
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}
 80179b6:	bf00      	nop
 80179b8:	1fff7a10 	.word	0x1fff7a10
 80179bc:	1fff7a14 	.word	0x1fff7a14
 80179c0:	1fff7a18 	.word	0x1fff7a18
 80179c4:	200000e2 	.word	0x200000e2
 80179c8:	200000f2 	.word	0x200000f2

080179cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80179cc:	b480      	push	{r7}
 80179ce:	b087      	sub	sp, #28
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	60f8      	str	r0, [r7, #12]
 80179d4:	60b9      	str	r1, [r7, #8]
 80179d6:	4613      	mov	r3, r2
 80179d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80179da:	2300      	movs	r3, #0
 80179dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80179de:	2300      	movs	r3, #0
 80179e0:	75fb      	strb	r3, [r7, #23]
 80179e2:	e027      	b.n	8017a34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	0f1b      	lsrs	r3, r3, #28
 80179e8:	2b09      	cmp	r3, #9
 80179ea:	d80b      	bhi.n	8017a04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	0f1b      	lsrs	r3, r3, #28
 80179f0:	b2da      	uxtb	r2, r3
 80179f2:	7dfb      	ldrb	r3, [r7, #23]
 80179f4:	005b      	lsls	r3, r3, #1
 80179f6:	4619      	mov	r1, r3
 80179f8:	68bb      	ldr	r3, [r7, #8]
 80179fa:	440b      	add	r3, r1
 80179fc:	3230      	adds	r2, #48	@ 0x30
 80179fe:	b2d2      	uxtb	r2, r2
 8017a00:	701a      	strb	r2, [r3, #0]
 8017a02:	e00a      	b.n	8017a1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	0f1b      	lsrs	r3, r3, #28
 8017a08:	b2da      	uxtb	r2, r3
 8017a0a:	7dfb      	ldrb	r3, [r7, #23]
 8017a0c:	005b      	lsls	r3, r3, #1
 8017a0e:	4619      	mov	r1, r3
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	440b      	add	r3, r1
 8017a14:	3237      	adds	r2, #55	@ 0x37
 8017a16:	b2d2      	uxtb	r2, r2
 8017a18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	011b      	lsls	r3, r3, #4
 8017a1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017a20:	7dfb      	ldrb	r3, [r7, #23]
 8017a22:	005b      	lsls	r3, r3, #1
 8017a24:	3301      	adds	r3, #1
 8017a26:	68ba      	ldr	r2, [r7, #8]
 8017a28:	4413      	add	r3, r2
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017a2e:	7dfb      	ldrb	r3, [r7, #23]
 8017a30:	3301      	adds	r3, #1
 8017a32:	75fb      	strb	r3, [r7, #23]
 8017a34:	7dfa      	ldrb	r2, [r7, #23]
 8017a36:	79fb      	ldrb	r3, [r7, #7]
 8017a38:	429a      	cmp	r2, r3
 8017a3a:	d3d3      	bcc.n	80179e4 <IntToUnicode+0x18>
  }
}
 8017a3c:	bf00      	nop
 8017a3e:	bf00      	nop
 8017a40:	371c      	adds	r7, #28
 8017a42:	46bd      	mov	sp, r7
 8017a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a48:	4770      	bx	lr
	...

08017a4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b08a      	sub	sp, #40	@ 0x28
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a54:	f107 0314 	add.w	r3, r7, #20
 8017a58:	2200      	movs	r2, #0
 8017a5a:	601a      	str	r2, [r3, #0]
 8017a5c:	605a      	str	r2, [r3, #4]
 8017a5e:	609a      	str	r2, [r3, #8]
 8017a60:	60da      	str	r2, [r3, #12]
 8017a62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017a6c:	d147      	bne.n	8017afe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017a6e:	2300      	movs	r3, #0
 8017a70:	613b      	str	r3, [r7, #16]
 8017a72:	4b25      	ldr	r3, [pc, #148]	@ (8017b08 <HAL_PCD_MspInit+0xbc>)
 8017a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a76:	4a24      	ldr	r2, [pc, #144]	@ (8017b08 <HAL_PCD_MspInit+0xbc>)
 8017a78:	f043 0301 	orr.w	r3, r3, #1
 8017a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8017a7e:	4b22      	ldr	r3, [pc, #136]	@ (8017b08 <HAL_PCD_MspInit+0xbc>)
 8017a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a82:	f003 0301 	and.w	r3, r3, #1
 8017a86:	613b      	str	r3, [r7, #16]
 8017a88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8017a8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017a90:	2300      	movs	r3, #0
 8017a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a94:	2300      	movs	r3, #0
 8017a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8017a98:	f107 0314 	add.w	r3, r7, #20
 8017a9c:	4619      	mov	r1, r3
 8017a9e:	481b      	ldr	r0, [pc, #108]	@ (8017b0c <HAL_PCD_MspInit+0xc0>)
 8017aa0:	f7f9 faa0 	bl	8010fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8017aa4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8017aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017aaa:	2302      	movs	r3, #2
 8017aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017ab6:	230a      	movs	r3, #10
 8017ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017aba:	f107 0314 	add.w	r3, r7, #20
 8017abe:	4619      	mov	r1, r3
 8017ac0:	4812      	ldr	r0, [pc, #72]	@ (8017b0c <HAL_PCD_MspInit+0xc0>)
 8017ac2:	f7f9 fa8f 	bl	8010fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017ac6:	4b10      	ldr	r3, [pc, #64]	@ (8017b08 <HAL_PCD_MspInit+0xbc>)
 8017ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017aca:	4a0f      	ldr	r2, [pc, #60]	@ (8017b08 <HAL_PCD_MspInit+0xbc>)
 8017acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017ad0:	6353      	str	r3, [r2, #52]	@ 0x34
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	60fb      	str	r3, [r7, #12]
 8017ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8017b08 <HAL_PCD_MspInit+0xbc>)
 8017ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ada:	4a0b      	ldr	r2, [pc, #44]	@ (8017b08 <HAL_PCD_MspInit+0xbc>)
 8017adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8017ae2:	4b09      	ldr	r3, [pc, #36]	@ (8017b08 <HAL_PCD_MspInit+0xbc>)
 8017ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017aea:	60fb      	str	r3, [r7, #12]
 8017aec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017aee:	2200      	movs	r2, #0
 8017af0:	2100      	movs	r1, #0
 8017af2:	2043      	movs	r0, #67	@ 0x43
 8017af4:	f7f9 fa3f 	bl	8010f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017af8:	2043      	movs	r0, #67	@ 0x43
 8017afa:	f7f9 fa58 	bl	8010fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017afe:	bf00      	nop
 8017b00:	3728      	adds	r7, #40	@ 0x28
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}
 8017b06:	bf00      	nop
 8017b08:	40023800 	.word	0x40023800
 8017b0c:	40020000 	.word	0x40020000

08017b10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b082      	sub	sp, #8
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017b24:	4619      	mov	r1, r3
 8017b26:	4610      	mov	r0, r2
 8017b28:	f7fe fb43 	bl	80161b2 <USBD_LL_SetupStage>
}
 8017b2c:	bf00      	nop
 8017b2e:	3708      	adds	r7, #8
 8017b30:	46bd      	mov	sp, r7
 8017b32:	bd80      	pop	{r7, pc}

08017b34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b082      	sub	sp, #8
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
 8017b3c:	460b      	mov	r3, r1
 8017b3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017b46:	78fa      	ldrb	r2, [r7, #3]
 8017b48:	6879      	ldr	r1, [r7, #4]
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	00db      	lsls	r3, r3, #3
 8017b4e:	4413      	add	r3, r2
 8017b50:	009b      	lsls	r3, r3, #2
 8017b52:	440b      	add	r3, r1
 8017b54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017b58:	681a      	ldr	r2, [r3, #0]
 8017b5a:	78fb      	ldrb	r3, [r7, #3]
 8017b5c:	4619      	mov	r1, r3
 8017b5e:	f7fe fb7d 	bl	801625c <USBD_LL_DataOutStage>
}
 8017b62:	bf00      	nop
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b6a:	b580      	push	{r7, lr}
 8017b6c:	b082      	sub	sp, #8
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
 8017b72:	460b      	mov	r3, r1
 8017b74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017b7c:	78fa      	ldrb	r2, [r7, #3]
 8017b7e:	6879      	ldr	r1, [r7, #4]
 8017b80:	4613      	mov	r3, r2
 8017b82:	00db      	lsls	r3, r3, #3
 8017b84:	4413      	add	r3, r2
 8017b86:	009b      	lsls	r3, r3, #2
 8017b88:	440b      	add	r3, r1
 8017b8a:	3320      	adds	r3, #32
 8017b8c:	681a      	ldr	r2, [r3, #0]
 8017b8e:	78fb      	ldrb	r3, [r7, #3]
 8017b90:	4619      	mov	r1, r3
 8017b92:	f7fe fc1f 	bl	80163d4 <USBD_LL_DataInStage>
}
 8017b96:	bf00      	nop
 8017b98:	3708      	adds	r7, #8
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}

08017b9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b9e:	b580      	push	{r7, lr}
 8017ba0:	b082      	sub	sp, #8
 8017ba2:	af00      	add	r7, sp, #0
 8017ba4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bac:	4618      	mov	r0, r3
 8017bae:	f7fe fd63 	bl	8016678 <USBD_LL_SOF>
}
 8017bb2:	bf00      	nop
 8017bb4:	3708      	adds	r7, #8
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}

08017bba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bba:	b580      	push	{r7, lr}
 8017bbc:	b084      	sub	sp, #16
 8017bbe:	af00      	add	r7, sp, #0
 8017bc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	79db      	ldrb	r3, [r3, #7]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d102      	bne.n	8017bd4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017bce:	2300      	movs	r3, #0
 8017bd0:	73fb      	strb	r3, [r7, #15]
 8017bd2:	e008      	b.n	8017be6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	79db      	ldrb	r3, [r3, #7]
 8017bd8:	2b02      	cmp	r3, #2
 8017bda:	d102      	bne.n	8017be2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017bdc:	2301      	movs	r3, #1
 8017bde:	73fb      	strb	r3, [r7, #15]
 8017be0:	e001      	b.n	8017be6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017be2:	f7f8 fe9f 	bl	8010924 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bec:	7bfa      	ldrb	r2, [r7, #15]
 8017bee:	4611      	mov	r1, r2
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7fe fcfd 	bl	80165f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f7fe fca4 	bl	801654a <USBD_LL_Reset>
}
 8017c02:	bf00      	nop
 8017c04:	3710      	adds	r7, #16
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}
	...

08017c0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b082      	sub	sp, #8
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f7fe fcf8 	bl	8016610 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	687a      	ldr	r2, [r7, #4]
 8017c2c:	6812      	ldr	r2, [r2, #0]
 8017c2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017c32:	f043 0301 	orr.w	r3, r3, #1
 8017c36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	7adb      	ldrb	r3, [r3, #11]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d005      	beq.n	8017c4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c40:	4b04      	ldr	r3, [pc, #16]	@ (8017c54 <HAL_PCD_SuspendCallback+0x48>)
 8017c42:	691b      	ldr	r3, [r3, #16]
 8017c44:	4a03      	ldr	r2, [pc, #12]	@ (8017c54 <HAL_PCD_SuspendCallback+0x48>)
 8017c46:	f043 0306 	orr.w	r3, r3, #6
 8017c4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017c4c:	bf00      	nop
 8017c4e:	3708      	adds	r7, #8
 8017c50:	46bd      	mov	sp, r7
 8017c52:	bd80      	pop	{r7, pc}
 8017c54:	e000ed00 	.word	0xe000ed00

08017c58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7fe fcee 	bl	8016648 <USBD_LL_Resume>
}
 8017c6c:	bf00      	nop
 8017c6e:	3708      	adds	r7, #8
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd80      	pop	{r7, pc}

08017c74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b082      	sub	sp, #8
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
 8017c7c:	460b      	mov	r3, r1
 8017c7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c86:	78fa      	ldrb	r2, [r7, #3]
 8017c88:	4611      	mov	r1, r2
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f7fe fd46 	bl	801671c <USBD_LL_IsoOUTIncomplete>
}
 8017c90:	bf00      	nop
 8017c92:	3708      	adds	r7, #8
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}

08017c98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b082      	sub	sp, #8
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
 8017ca0:	460b      	mov	r3, r1
 8017ca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017caa:	78fa      	ldrb	r2, [r7, #3]
 8017cac:	4611      	mov	r1, r2
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7fe fd02 	bl	80166b8 <USBD_LL_IsoINIncomplete>
}
 8017cb4:	bf00      	nop
 8017cb6:	3708      	adds	r7, #8
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	bd80      	pop	{r7, pc}

08017cbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b082      	sub	sp, #8
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cca:	4618      	mov	r0, r3
 8017ccc:	f7fe fd58 	bl	8016780 <USBD_LL_DevConnected>
}
 8017cd0:	bf00      	nop
 8017cd2:	3708      	adds	r7, #8
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}

08017cd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	f7fe fd55 	bl	8016796 <USBD_LL_DevDisconnected>
}
 8017cec:	bf00      	nop
 8017cee:	3708      	adds	r7, #8
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	bd80      	pop	{r7, pc}

08017cf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b082      	sub	sp, #8
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	781b      	ldrb	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d13c      	bne.n	8017d7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017d04:	4a20      	ldr	r2, [pc, #128]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d10:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017d14:	4b1c      	ldr	r3, [pc, #112]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8017d1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d1e:	2204      	movs	r2, #4
 8017d20:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017d22:	4b19      	ldr	r3, [pc, #100]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d24:	2202      	movs	r2, #2
 8017d26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017d28:	4b17      	ldr	r3, [pc, #92]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017d2e:	4b16      	ldr	r3, [pc, #88]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d30:	2202      	movs	r2, #2
 8017d32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017d34:	4b14      	ldr	r3, [pc, #80]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d36:	2200      	movs	r2, #0
 8017d38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017d3a:	4b13      	ldr	r3, [pc, #76]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017d40:	4b11      	ldr	r3, [pc, #68]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d42:	2200      	movs	r2, #0
 8017d44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8017d46:	4b10      	ldr	r3, [pc, #64]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d48:	2201      	movs	r2, #1
 8017d4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d4e:	2200      	movs	r2, #0
 8017d50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017d52:	480d      	ldr	r0, [pc, #52]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d54:	f7fa f8fa 	bl	8011f4c <HAL_PCD_Init>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d001      	beq.n	8017d62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017d5e:	f7f8 fde1 	bl	8010924 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017d62:	2180      	movs	r1, #128	@ 0x80
 8017d64:	4808      	ldr	r0, [pc, #32]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d66:	f7fb fb26 	bl	80133b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017d6a:	2240      	movs	r2, #64	@ 0x40
 8017d6c:	2100      	movs	r1, #0
 8017d6e:	4806      	ldr	r0, [pc, #24]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d70:	f7fb fada 	bl	8013328 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017d74:	2280      	movs	r2, #128	@ 0x80
 8017d76:	2101      	movs	r1, #1
 8017d78:	4803      	ldr	r0, [pc, #12]	@ (8017d88 <USBD_LL_Init+0x94>)
 8017d7a:	f7fb fad5 	bl	8013328 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017d7e:	2300      	movs	r3, #0
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3708      	adds	r7, #8
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}
 8017d88:	200016f0 	.word	0x200016f0

08017d8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b084      	sub	sp, #16
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d94:	2300      	movs	r3, #0
 8017d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d98:	2300      	movs	r3, #0
 8017d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fa f9e1 	bl	801216a <HAL_PCD_Start>
 8017da8:	4603      	mov	r3, r0
 8017daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dac:	7bfb      	ldrb	r3, [r7, #15]
 8017dae:	4618      	mov	r0, r3
 8017db0:	f000 f942 	bl	8018038 <USBD_Get_USB_Status>
 8017db4:	4603      	mov	r3, r0
 8017db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dba:	4618      	mov	r0, r3
 8017dbc:	3710      	adds	r7, #16
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	bd80      	pop	{r7, pc}

08017dc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017dc2:	b580      	push	{r7, lr}
 8017dc4:	b084      	sub	sp, #16
 8017dc6:	af00      	add	r7, sp, #0
 8017dc8:	6078      	str	r0, [r7, #4]
 8017dca:	4608      	mov	r0, r1
 8017dcc:	4611      	mov	r1, r2
 8017dce:	461a      	mov	r2, r3
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	70fb      	strb	r3, [r7, #3]
 8017dd4:	460b      	mov	r3, r1
 8017dd6:	70bb      	strb	r3, [r7, #2]
 8017dd8:	4613      	mov	r3, r2
 8017dda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ddc:	2300      	movs	r3, #0
 8017dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017de0:	2300      	movs	r3, #0
 8017de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017dea:	78bb      	ldrb	r3, [r7, #2]
 8017dec:	883a      	ldrh	r2, [r7, #0]
 8017dee:	78f9      	ldrb	r1, [r7, #3]
 8017df0:	f7fa feb5 	bl	8012b5e <HAL_PCD_EP_Open>
 8017df4:	4603      	mov	r3, r0
 8017df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017df8:	7bfb      	ldrb	r3, [r7, #15]
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f000 f91c 	bl	8018038 <USBD_Get_USB_Status>
 8017e00:	4603      	mov	r3, r0
 8017e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3710      	adds	r7, #16
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}

08017e0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e0e:	b580      	push	{r7, lr}
 8017e10:	b084      	sub	sp, #16
 8017e12:	af00      	add	r7, sp, #0
 8017e14:	6078      	str	r0, [r7, #4]
 8017e16:	460b      	mov	r3, r1
 8017e18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e28:	78fa      	ldrb	r2, [r7, #3]
 8017e2a:	4611      	mov	r1, r2
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f7fa ff00 	bl	8012c32 <HAL_PCD_EP_Close>
 8017e32:	4603      	mov	r3, r0
 8017e34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e36:	7bfb      	ldrb	r3, [r7, #15]
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f000 f8fd 	bl	8018038 <USBD_Get_USB_Status>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	3710      	adds	r7, #16
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}

08017e4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b084      	sub	sp, #16
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	460b      	mov	r3, r1
 8017e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e58:	2300      	movs	r3, #0
 8017e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e66:	78fa      	ldrb	r2, [r7, #3]
 8017e68:	4611      	mov	r1, r2
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f7fa ffb8 	bl	8012de0 <HAL_PCD_EP_SetStall>
 8017e70:	4603      	mov	r3, r0
 8017e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e74:	7bfb      	ldrb	r3, [r7, #15]
 8017e76:	4618      	mov	r0, r3
 8017e78:	f000 f8de 	bl	8018038 <USBD_Get_USB_Status>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e82:	4618      	mov	r0, r3
 8017e84:	3710      	adds	r7, #16
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}

08017e8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e8a:	b580      	push	{r7, lr}
 8017e8c:	b084      	sub	sp, #16
 8017e8e:	af00      	add	r7, sp, #0
 8017e90:	6078      	str	r0, [r7, #4]
 8017e92:	460b      	mov	r3, r1
 8017e94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e96:	2300      	movs	r3, #0
 8017e98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ea4:	78fa      	ldrb	r2, [r7, #3]
 8017ea6:	4611      	mov	r1, r2
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f7fa fffc 	bl	8012ea6 <HAL_PCD_EP_ClrStall>
 8017eae:	4603      	mov	r3, r0
 8017eb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017eb2:	7bfb      	ldrb	r3, [r7, #15]
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f000 f8bf 	bl	8018038 <USBD_Get_USB_Status>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ebe:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	3710      	adds	r7, #16
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	bd80      	pop	{r7, pc}

08017ec8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ec8:	b480      	push	{r7}
 8017eca:	b085      	sub	sp, #20
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
 8017ed0:	460b      	mov	r3, r1
 8017ed2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017eda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	da0b      	bge.n	8017efc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017ee4:	78fb      	ldrb	r3, [r7, #3]
 8017ee6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017eea:	68f9      	ldr	r1, [r7, #12]
 8017eec:	4613      	mov	r3, r2
 8017eee:	00db      	lsls	r3, r3, #3
 8017ef0:	4413      	add	r3, r2
 8017ef2:	009b      	lsls	r3, r3, #2
 8017ef4:	440b      	add	r3, r1
 8017ef6:	3316      	adds	r3, #22
 8017ef8:	781b      	ldrb	r3, [r3, #0]
 8017efa:	e00b      	b.n	8017f14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017efc:	78fb      	ldrb	r3, [r7, #3]
 8017efe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017f02:	68f9      	ldr	r1, [r7, #12]
 8017f04:	4613      	mov	r3, r2
 8017f06:	00db      	lsls	r3, r3, #3
 8017f08:	4413      	add	r3, r2
 8017f0a:	009b      	lsls	r3, r3, #2
 8017f0c:	440b      	add	r3, r1
 8017f0e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017f12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017f14:	4618      	mov	r0, r3
 8017f16:	3714      	adds	r7, #20
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1e:	4770      	bx	lr

08017f20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b084      	sub	sp, #16
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	460b      	mov	r3, r1
 8017f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f30:	2300      	movs	r3, #0
 8017f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f3a:	78fa      	ldrb	r2, [r7, #3]
 8017f3c:	4611      	mov	r1, r2
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7fa fde9 	bl	8012b16 <HAL_PCD_SetAddress>
 8017f44:	4603      	mov	r3, r0
 8017f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f48:	7bfb      	ldrb	r3, [r7, #15]
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f000 f874 	bl	8018038 <USBD_Get_USB_Status>
 8017f50:	4603      	mov	r3, r0
 8017f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f56:	4618      	mov	r0, r3
 8017f58:	3710      	adds	r7, #16
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}

08017f5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017f5e:	b580      	push	{r7, lr}
 8017f60:	b086      	sub	sp, #24
 8017f62:	af00      	add	r7, sp, #0
 8017f64:	60f8      	str	r0, [r7, #12]
 8017f66:	607a      	str	r2, [r7, #4]
 8017f68:	603b      	str	r3, [r7, #0]
 8017f6a:	460b      	mov	r3, r1
 8017f6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f6e:	2300      	movs	r3, #0
 8017f70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f72:	2300      	movs	r3, #0
 8017f74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f7c:	7af9      	ldrb	r1, [r7, #11]
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	687a      	ldr	r2, [r7, #4]
 8017f82:	f7fa fef3 	bl	8012d6c <HAL_PCD_EP_Transmit>
 8017f86:	4603      	mov	r3, r0
 8017f88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f8a:	7dfb      	ldrb	r3, [r7, #23]
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f000 f853 	bl	8018038 <USBD_Get_USB_Status>
 8017f92:	4603      	mov	r3, r0
 8017f94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017f96:	7dbb      	ldrb	r3, [r7, #22]
}
 8017f98:	4618      	mov	r0, r3
 8017f9a:	3718      	adds	r7, #24
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	bd80      	pop	{r7, pc}

08017fa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b086      	sub	sp, #24
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	60f8      	str	r0, [r7, #12]
 8017fa8:	607a      	str	r2, [r7, #4]
 8017faa:	603b      	str	r3, [r7, #0]
 8017fac:	460b      	mov	r3, r1
 8017fae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017fbe:	7af9      	ldrb	r1, [r7, #11]
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	687a      	ldr	r2, [r7, #4]
 8017fc4:	f7fa fe7f 	bl	8012cc6 <HAL_PCD_EP_Receive>
 8017fc8:	4603      	mov	r3, r0
 8017fca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017fcc:	7dfb      	ldrb	r3, [r7, #23]
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f000 f832 	bl	8018038 <USBD_Get_USB_Status>
 8017fd4:	4603      	mov	r3, r0
 8017fd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017fd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	3718      	adds	r7, #24
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}

08017fe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017fe2:	b580      	push	{r7, lr}
 8017fe4:	b082      	sub	sp, #8
 8017fe6:	af00      	add	r7, sp, #0
 8017fe8:	6078      	str	r0, [r7, #4]
 8017fea:	460b      	mov	r3, r1
 8017fec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ff4:	78fa      	ldrb	r2, [r7, #3]
 8017ff6:	4611      	mov	r1, r2
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f7fa fe9f 	bl	8012d3c <HAL_PCD_EP_GetRxCount>
 8017ffe:	4603      	mov	r3, r0
}
 8018000:	4618      	mov	r0, r3
 8018002:	3708      	adds	r7, #8
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}

08018008 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018008:	b480      	push	{r7}
 801800a:	b083      	sub	sp, #12
 801800c:	af00      	add	r7, sp, #0
 801800e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018010:	4b03      	ldr	r3, [pc, #12]	@ (8018020 <USBD_static_malloc+0x18>)
}
 8018012:	4618      	mov	r0, r3
 8018014:	370c      	adds	r7, #12
 8018016:	46bd      	mov	sp, r7
 8018018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801c:	4770      	bx	lr
 801801e:	bf00      	nop
 8018020:	20001bd4 	.word	0x20001bd4

08018024 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018024:	b480      	push	{r7}
 8018026:	b083      	sub	sp, #12
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]

}
 801802c:	bf00      	nop
 801802e:	370c      	adds	r7, #12
 8018030:	46bd      	mov	sp, r7
 8018032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018036:	4770      	bx	lr

08018038 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018038:	b480      	push	{r7}
 801803a:	b085      	sub	sp, #20
 801803c:	af00      	add	r7, sp, #0
 801803e:	4603      	mov	r3, r0
 8018040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018042:	2300      	movs	r3, #0
 8018044:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018046:	79fb      	ldrb	r3, [r7, #7]
 8018048:	2b03      	cmp	r3, #3
 801804a:	d817      	bhi.n	801807c <USBD_Get_USB_Status+0x44>
 801804c:	a201      	add	r2, pc, #4	@ (adr r2, 8018054 <USBD_Get_USB_Status+0x1c>)
 801804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018052:	bf00      	nop
 8018054:	08018065 	.word	0x08018065
 8018058:	0801806b 	.word	0x0801806b
 801805c:	08018071 	.word	0x08018071
 8018060:	08018077 	.word	0x08018077
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018064:	2300      	movs	r3, #0
 8018066:	73fb      	strb	r3, [r7, #15]
    break;
 8018068:	e00b      	b.n	8018082 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801806a:	2303      	movs	r3, #3
 801806c:	73fb      	strb	r3, [r7, #15]
    break;
 801806e:	e008      	b.n	8018082 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018070:	2301      	movs	r3, #1
 8018072:	73fb      	strb	r3, [r7, #15]
    break;
 8018074:	e005      	b.n	8018082 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018076:	2303      	movs	r3, #3
 8018078:	73fb      	strb	r3, [r7, #15]
    break;
 801807a:	e002      	b.n	8018082 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801807c:	2303      	movs	r3, #3
 801807e:	73fb      	strb	r3, [r7, #15]
    break;
 8018080:	bf00      	nop
  }
  return usb_status;
 8018082:	7bfb      	ldrb	r3, [r7, #15]
}
 8018084:	4618      	mov	r0, r3
 8018086:	3714      	adds	r7, #20
 8018088:	46bd      	mov	sp, r7
 801808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808e:	4770      	bx	lr

08018090 <memset>:
 8018090:	4402      	add	r2, r0
 8018092:	4603      	mov	r3, r0
 8018094:	4293      	cmp	r3, r2
 8018096:	d100      	bne.n	801809a <memset+0xa>
 8018098:	4770      	bx	lr
 801809a:	f803 1b01 	strb.w	r1, [r3], #1
 801809e:	e7f9      	b.n	8018094 <memset+0x4>

080180a0 <__libc_init_array>:
 80180a0:	b570      	push	{r4, r5, r6, lr}
 80180a2:	4d0d      	ldr	r5, [pc, #52]	@ (80180d8 <__libc_init_array+0x38>)
 80180a4:	4c0d      	ldr	r4, [pc, #52]	@ (80180dc <__libc_init_array+0x3c>)
 80180a6:	1b64      	subs	r4, r4, r5
 80180a8:	10a4      	asrs	r4, r4, #2
 80180aa:	2600      	movs	r6, #0
 80180ac:	42a6      	cmp	r6, r4
 80180ae:	d109      	bne.n	80180c4 <__libc_init_array+0x24>
 80180b0:	4d0b      	ldr	r5, [pc, #44]	@ (80180e0 <__libc_init_array+0x40>)
 80180b2:	4c0c      	ldr	r4, [pc, #48]	@ (80180e4 <__libc_init_array+0x44>)
 80180b4:	f000 f818 	bl	80180e8 <_init>
 80180b8:	1b64      	subs	r4, r4, r5
 80180ba:	10a4      	asrs	r4, r4, #2
 80180bc:	2600      	movs	r6, #0
 80180be:	42a6      	cmp	r6, r4
 80180c0:	d105      	bne.n	80180ce <__libc_init_array+0x2e>
 80180c2:	bd70      	pop	{r4, r5, r6, pc}
 80180c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80180c8:	4798      	blx	r3
 80180ca:	3601      	adds	r6, #1
 80180cc:	e7ee      	b.n	80180ac <__libc_init_array+0xc>
 80180ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80180d2:	4798      	blx	r3
 80180d4:	3601      	adds	r6, #1
 80180d6:	e7f2      	b.n	80180be <__libc_init_array+0x1e>
 80180d8:	08018168 	.word	0x08018168
 80180dc:	08018168 	.word	0x08018168
 80180e0:	08018168 	.word	0x08018168
 80180e4:	0801816c 	.word	0x0801816c

080180e8 <_init>:
 80180e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ea:	bf00      	nop
 80180ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180ee:	bc08      	pop	{r3}
 80180f0:	469e      	mov	lr, r3
 80180f2:	4770      	bx	lr

080180f4 <_fini>:
 80180f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180f6:	bf00      	nop
 80180f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180fa:	bc08      	pop	{r3}
 80180fc:	469e      	mov	lr, r3
 80180fe:	4770      	bx	lr
