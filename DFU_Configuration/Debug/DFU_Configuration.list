
DFU_Configuration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006454  08006454  00007454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  0000813c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800655c  0800655c  0000813c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800655c  0800655c  0000755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006560  08006560  00007560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  08006564  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000813c  2**0
                  CONTENTS
 10 .bss          00001174  2000013c  2000013c  0000813c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200012b0  200012b0  0000813c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000813c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af3b  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004415  00000000  00000000  000230a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000d087  00000000  00000000  000274bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013f0  00000000  00000000  00034548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f29  00000000  00000000  00035938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025508  00000000  00000000  00036861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020eeb  00000000  00000000  0005bd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd651  00000000  00000000  0007cc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014a2a5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003e0c  00000000  00000000  0014a2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  0014e0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000013c 	.word	0x2000013c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800643c 	.word	0x0800643c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000140 	.word	0x20000140
 80001cc:	0800643c 	.word	0x0800643c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005a0:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	2400      	movs	r4, #0
 80005a4:	9407      	str	r4, [sp, #28]
 80005a6:	9408      	str	r4, [sp, #32]
 80005a8:	9409      	str	r4, [sp, #36]	@ 0x24
 80005aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80005ac:	940b      	str	r4, [sp, #44]	@ 0x2c
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ae:	9401      	str	r4, [sp, #4]
 80005b0:	4b5a      	ldr	r3, [pc, #360]	@ (800071c <MX_GPIO_Init+0x180>)
 80005b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b4:	f042 0210 	orr.w	r2, r2, #16
 80005b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80005ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005bc:	f002 0210 	and.w	r2, r2, #16
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	9402      	str	r4, [sp, #8]
 80005c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c8:	f042 0204 	orr.w	r2, r2, #4
 80005cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80005ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d0:	f002 0204 	and.w	r2, r2, #4
 80005d4:	9202      	str	r2, [sp, #8]
 80005d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d8:	9403      	str	r4, [sp, #12]
 80005da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80005e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005e8:	9203      	str	r2, [sp, #12]
 80005ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	9404      	str	r4, [sp, #16]
 80005ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f0:	f042 0201 	orr.w	r2, r2, #1
 80005f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f8:	f002 0201 	and.w	r2, r2, #1
 80005fc:	9204      	str	r2, [sp, #16]
 80005fe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	9405      	str	r4, [sp, #20]
 8000602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000604:	f042 0202 	orr.w	r2, r2, #2
 8000608:	631a      	str	r2, [r3, #48]	@ 0x30
 800060a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060c:	f002 0202 	and.w	r2, r2, #2
 8000610:	9205      	str	r2, [sp, #20]
 8000612:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000614:	9406      	str	r4, [sp, #24]
 8000616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000618:	f042 0208 	orr.w	r2, r2, #8
 800061c:	631a      	str	r2, [r3, #48]	@ 0x30
 800061e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000620:	f003 0308 	and.w	r3, r3, #8
 8000624:	9306      	str	r3, [sp, #24]
 8000626:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000628:	4e3d      	ldr	r6, [pc, #244]	@ (8000720 <MX_GPIO_Init+0x184>)
 800062a:	4622      	mov	r2, r4
 800062c:	2108      	movs	r1, #8
 800062e:	4630      	mov	r0, r6
 8000630:	f000 ff02 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000634:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8000728 <MX_GPIO_Init+0x18c>
 8000638:	2201      	movs	r2, #1
 800063a:	4611      	mov	r1, r2
 800063c:	4648      	mov	r0, r9
 800063e:	f000 fefb 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 800072c <MX_GPIO_Init+0x190>
 8000646:	4622      	mov	r2, r4
 8000648:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800064c:	4640      	mov	r0, r8
 800064e:	f000 fef3 	bl	8001438 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000652:	2708      	movs	r7, #8
 8000654:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2501      	movs	r5, #1
 8000658:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065e:	a907      	add	r1, sp, #28
 8000660:	4630      	mov	r0, r6
 8000662:	f000 fdf3 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000666:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800066e:	a907      	add	r1, sp, #28
 8000670:	4648      	mov	r0, r9
 8000672:	f000 fdeb 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000676:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2702      	movs	r7, #2
 800067a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000680:	f04f 0a05 	mov.w	sl, #5
 8000684:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000688:	a907      	add	r1, sp, #28
 800068a:	4648      	mov	r0, r9
 800068c:	f000 fdde 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000690:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000692:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000696:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000698:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	a907      	add	r1, sp, #28
 800069c:	4821      	ldr	r0, [pc, #132]	@ (8000724 <MX_GPIO_Init+0x188>)
 800069e:	f000 fdd5 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006a2:	2304      	movs	r3, #4
 80006a4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f5a9 6980 	sub.w	r9, r9, #1024	@ 0x400
 80006ae:	a907      	add	r1, sp, #28
 80006b0:	4648      	mov	r0, r9
 80006b2:	f000 fdcb 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006c2:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006c6:	a907      	add	r1, sp, #28
 80006c8:	4648      	mov	r0, r9
 80006ca:	f000 fdbf 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|LD3_Pin|LD5_Pin|LD6_Pin
 80006ce:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80006d2:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006da:	a907      	add	r1, sp, #28
 80006dc:	4640      	mov	r0, r8
 80006de:	f000 fdb5 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006e2:	2320      	movs	r3, #32
 80006e4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006ea:	a907      	add	r1, sp, #28
 80006ec:	4640      	mov	r0, r8
 80006ee:	f000 fdad 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006f2:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006f4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006f8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006fc:	a907      	add	r1, sp, #28
 80006fe:	4630      	mov	r0, r6
 8000700:	f000 fda4 	bl	800124c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000704:	4622      	mov	r2, r4
 8000706:	4621      	mov	r1, r4
 8000708:	2006      	movs	r0, #6
 800070a:	f000 fba3 	bl	8000e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800070e:	2006      	movs	r0, #6
 8000710:	f000 fbb0 	bl	8000e74 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000714:	b00c      	add	sp, #48	@ 0x30
 8000716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40021000 	.word	0x40021000
 8000724:	40020000 	.word	0x40020000
 8000728:	40020800 	.word	0x40020800
 800072c:	40020c00 	.word	0x40020c00

08000730 <HAL_GPIO_EXTI_Callback>:
    if (GPIO_Pin == GPIO_PIN_0) // If the button
 8000730:	2801      	cmp	r0, #1
 8000732:	d000      	beq.n	8000736 <HAL_GPIO_EXTI_Callback+0x6>
 8000734:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000736:	b508      	push	{r3, lr}
        printf("Trigger\n\r");
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <HAL_GPIO_EXTI_Callback+0x18>)
 800073a:	f005 f813 	bl	8005764 <iprintf>
        doJump = 1;
 800073e:	4b03      	ldr	r3, [pc, #12]	@ (800074c <HAL_GPIO_EXTI_Callback+0x1c>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bd08      	pop	{r3, pc}
 8000746:	bf00      	nop
 8000748:	08006454 	.word	0x08006454
 800074c:	20000000 	.word	0x20000000

08000750 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000752:	e7fe      	b.n	8000752 <Error_Handler+0x2>

08000754 <MX_I2C1_Init>:
{
 8000754:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <MX_I2C1_Init+0x2c>)
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_I2C1_Init+0x30>)
 800075a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <MX_I2C1_Init+0x34>)
 800075e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	2300      	movs	r3, #0
 8000762:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000764:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800076a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000774:	f000 fe7e 	bl	8001474 <HAL_I2C_Init>
 8000778:	b900      	cbnz	r0, 800077c <MX_I2C1_Init+0x28>
}
 800077a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800077c:	f7ff ffe8 	bl	8000750 <Error_Handler>
 8000780:	20000204 	.word	0x20000204
 8000784:	40005400 	.word	0x40005400
 8000788:	000186a0 	.word	0x000186a0

0800078c <MX_I2S3_Init>:
{
 800078c:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 800078e:	480a      	ldr	r0, [pc, #40]	@ (80007b8 <MX_I2S3_Init+0x2c>)
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_I2S3_Init+0x30>)
 8000792:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000798:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800079a:	2300      	movs	r3, #0
 800079c:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800079e:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007a0:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a2:	4a07      	ldr	r2, [pc, #28]	@ (80007c0 <MX_I2S3_Init+0x34>)
 80007a4:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007a6:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007a8:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007aa:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ac:	f000 ff40 	bl	8001630 <HAL_I2S_Init>
 80007b0:	b900      	cbnz	r0, 80007b4 <MX_I2S3_Init+0x28>
}
 80007b2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007b4:	f7ff ffcc 	bl	8000750 <Error_Handler>
 80007b8:	200001bc 	.word	0x200001bc
 80007bc:	40003c00 	.word	0x40003c00
 80007c0:	00017700 	.word	0x00017700

080007c4 <MX_SPI1_Init>:
{
 80007c4:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80007c6:	480d      	ldr	r0, [pc, #52]	@ (80007fc <MX_SPI1_Init+0x38>)
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <MX_SPI1_Init+0x3c>)
 80007ca:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007cc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80007d0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	2300      	movs	r3, #0
 80007d4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007da:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007e0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e8:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ea:	230a      	movs	r3, #10
 80007ec:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ee:	f002 fc4f 	bl	8003090 <HAL_SPI_Init>
 80007f2:	b900      	cbnz	r0, 80007f6 <MX_SPI1_Init+0x32>
}
 80007f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007f6:	f7ff ffab 	bl	8000750 <Error_Handler>
 80007fa:	bf00      	nop
 80007fc:	20000164 	.word	0x20000164
 8000800:	40013000 	.word	0x40013000

08000804 <SystemClock_Config>:
{
 8000804:	b500      	push	{lr}
 8000806:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000808:	2230      	movs	r2, #48	@ 0x30
 800080a:	2100      	movs	r1, #0
 800080c:	a808      	add	r0, sp, #32
 800080e:	f004 fffe 	bl	800580e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000812:	2300      	movs	r3, #0
 8000814:	9303      	str	r3, [sp, #12]
 8000816:	9304      	str	r3, [sp, #16]
 8000818:	9305      	str	r3, [sp, #20]
 800081a:	9306      	str	r3, [sp, #24]
 800081c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <SystemClock_Config+0xa4>)
 8000822:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000824:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000828:	6411      	str	r1, [r2, #64]	@ 0x40
 800082a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800082c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000830:	9201      	str	r2, [sp, #4]
 8000832:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	9302      	str	r3, [sp, #8]
 8000836:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <SystemClock_Config+0xa8>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084a:	2301      	movs	r3, #1
 800084c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800084e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000852:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000854:	2302      	movs	r3, #2
 8000856:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000858:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800085c:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800085e:	2208      	movs	r2, #8
 8000860:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000862:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000866:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800086a:	2307      	movs	r3, #7
 800086c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	a808      	add	r0, sp, #32
 8000870:	f001 fffc 	bl	800286c <HAL_RCC_OscConfig>
 8000874:	b998      	cbnz	r0, 800089e <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000882:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000886:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088e:	2105      	movs	r1, #5
 8000890:	a803      	add	r0, sp, #12
 8000892:	f002 fa55 	bl	8002d40 <HAL_RCC_ClockConfig>
 8000896:	b920      	cbnz	r0, 80008a2 <SystemClock_Config+0x9e>
}
 8000898:	b015      	add	sp, #84	@ 0x54
 800089a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800089e:	f7ff ff57 	bl	8000750 <Error_Handler>
    Error_Handler();
 80008a2:	f7ff ff55 	bl	8000750 <Error_Handler>
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <main>:
{
 80008b0:	b508      	push	{r3, lr}
	 doJump = 0;
 80008b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <main+0xc0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
  HAL_Init();
 80008b8:	f000 fa38 	bl	8000d2c <HAL_Init>
  SystemClock_Config();
 80008bc:	f7ff ffa2 	bl	8000804 <SystemClock_Config>
  MX_GPIO_Init();
 80008c0:	f7ff fe6c 	bl	800059c <MX_GPIO_Init>
  MX_I2C1_Init();
 80008c4:	f7ff ff46 	bl	8000754 <MX_I2C1_Init>
  MX_I2S3_Init();
 80008c8:	f7ff ff60 	bl	800078c <MX_I2S3_Init>
  MX_SPI1_Init();
 80008cc:	f7ff ff7a 	bl	80007c4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80008d0:	f004 fbb0 	bl	8005034 <MX_USB_DEVICE_Init>
  printf("Boot loader Start\n\r");
 80008d4:	4827      	ldr	r0, [pc, #156]	@ (8000974 <main+0xc4>)
 80008d6:	f004 ff45 	bl	8005764 <iprintf>
 80008da:	e003      	b.n	80008e4 <main+0x34>
		  	    *dfu_boot_flag = 0; // So next boot won't be affected
 80008dc:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <main+0xc8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80008e4:	4c25      	ldr	r4, [pc, #148]	@ (800097c <main+0xcc>)
 80008e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ea:	4620      	mov	r0, r4
 80008ec:	f000 fdaa 	bl	8001444 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80008f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f4:	f000 fa46 	bl	8000d84 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80008f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008fc:	4620      	mov	r0, r4
 80008fe:	f000 fda1 	bl	8001444 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000902:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000906:	f000 fa3d 	bl	8000d84 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800090a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800090e:	4620      	mov	r0, r4
 8000910:	f000 fd98 	bl	8001444 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000914:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000918:	f000 fa34 	bl	8000d84 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800091c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000920:	4620      	mov	r0, r4
 8000922:	f000 fd8f 	bl	8001444 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000926:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800092a:	f000 fa2b 	bl	8000d84 <HAL_Delay>
	  if(doJump){
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <main+0xc0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0d6      	beq.n	80008e4 <main+0x34>
		  doJump=0;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <main+0xc0>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
		  dfu_boot_flag = (uint32_t*) (&_bflag); // set in linker script
 800093c:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <main+0xd0>)
 800093e:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <main+0xc8>)
 8000940:	6013      	str	r3, [r2, #0]
		  	    if (*dfu_boot_flag != DFU_BOOT_FLAG) {
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <main+0xd4>)
 8000946:	429a      	cmp	r2, r3
 8000948:	d0c8      	beq.n	80008dc <main+0x2c>
		  	        if (((*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD) & 0x2FFC0000)
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <main+0xd8>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <main+0xdc>)
 8000950:	4013      	ands	r3, r2
 8000952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000956:	d1c1      	bne.n	80008dc <main+0x2c>
		  	            JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 8000958:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <main+0xd8>)
 800095a:	6853      	ldr	r3, [r2, #4]
 800095c:	490c      	ldr	r1, [pc, #48]	@ (8000990 <main+0xe0>)
 800095e:	600b      	str	r3, [r1, #0]
		  	            JumpToApplication = (pFunction) JumpAddress;
 8000960:	490c      	ldr	r1, [pc, #48]	@ (8000994 <main+0xe4>)
 8000962:	600b      	str	r3, [r1, #0]
		  	            __set_MSP(*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD);
 8000964:	6812      	ldr	r2, [r2, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000966:	f382 8808 	msr	MSP, r2
		  	            JumpToApplication();
 800096a:	4798      	blx	r3
 800096c:	e7b6      	b.n	80008dc <main+0x2c>
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000
 8000974:	08006460 	.word	0x08006460
 8000978:	20000160 	.word	0x20000160
 800097c:	40020c00 	.word	0x40020c00
 8000980:	2001fffc 	.word	0x2001fffc
 8000984:	deadbeef 	.word	0xdeadbeef
 8000988:	08010000 	.word	0x08010000
 800098c:	2ffc0000 	.word	0x2ffc0000
 8000990:	20000158 	.word	0x20000158
 8000994:	2000015c 	.word	0x2000015c

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b500      	push	{lr}
 800099a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099c:	2100      	movs	r1, #0
 800099e:	9100      	str	r1, [sp, #0]
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <HAL_MspInit+0x3c>)
 80009a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80009a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80009aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009ac:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80009b0:	9200      	str	r2, [sp, #0]
 80009b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b4:	9101      	str	r1, [sp, #4]
 80009b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80009bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009c8:	2007      	movs	r0, #7
 80009ca:	f000 fa31 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	b003      	add	sp, #12
 80009d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d8:	b530      	push	{r4, r5, lr}
 80009da:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	2300      	movs	r3, #0
 80009de:	9303      	str	r3, [sp, #12]
 80009e0:	9304      	str	r3, [sp, #16]
 80009e2:	9305      	str	r3, [sp, #20]
 80009e4:	9306      	str	r3, [sp, #24]
 80009e6:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80009e8:	6802      	ldr	r2, [r0, #0]
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <HAL_I2C_MspInit+0x64>)
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d001      	beq.n	80009f4 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009f0:	b009      	add	sp, #36	@ 0x24
 80009f2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	2500      	movs	r5, #0
 80009f6:	9501      	str	r5, [sp, #4]
 80009f8:	4c11      	ldr	r4, [pc, #68]	@ (8000a40 <HAL_I2C_MspInit+0x68>)
 80009fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a0c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a12:	2312      	movs	r3, #18
 8000a14:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	a903      	add	r1, sp, #12
 8000a20:	4808      	ldr	r0, [pc, #32]	@ (8000a44 <HAL_I2C_MspInit+0x6c>)
 8000a22:	f000 fc13 	bl	800124c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a26:	9502      	str	r5, [sp, #8]
 8000a28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a2e:	6423      	str	r3, [r4, #64]	@ 0x40
 8000a30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a36:	9302      	str	r3, [sp, #8]
 8000a38:	9b02      	ldr	r3, [sp, #8]
}
 8000a3a:	e7d9      	b.n	80009f0 <HAL_I2C_MspInit+0x18>
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400

08000a48 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9307      	str	r3, [sp, #28]
 8000a50:	9308      	str	r3, [sp, #32]
 8000a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a54:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a56:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	9303      	str	r3, [sp, #12]
 8000a5a:	9304      	str	r3, [sp, #16]
 8000a5c:	9305      	str	r3, [sp, #20]
 8000a5e:	9306      	str	r3, [sp, #24]
  if(hi2s->Instance==SPI3)
 8000a60:	6802      	ldr	r2, [r0, #0]
 8000a62:	4b25      	ldr	r3, [pc, #148]	@ (8000af8 <HAL_I2S_MspInit+0xb0>)
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d001      	beq.n	8000a6c <HAL_I2S_MspInit+0x24>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000a68:	b00c      	add	sp, #48	@ 0x30
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a70:	23c0      	movs	r3, #192	@ 0xc0
 8000a72:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a78:	a803      	add	r0, sp, #12
 8000a7a:	f002 fa27 	bl	8002ecc <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d137      	bne.n	8000af2 <HAL_I2S_MspInit+0xaa>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a82:	2400      	movs	r4, #0
 8000a84:	9400      	str	r4, [sp, #0]
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <HAL_I2S_MspInit+0xb4>)
 8000a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000a8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a92:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8000a96:	9200      	str	r2, [sp, #0]
 8000a98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	9401      	str	r4, [sp, #4]
 8000a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
 8000aa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000aa6:	f002 0201 	and.w	r2, r2, #1
 8000aaa:	9201      	str	r2, [sp, #4]
 8000aac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	9402      	str	r4, [sp, #8]
 8000ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ab2:	f042 0204 	orr.w	r2, r2, #4
 8000ab6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2602      	movs	r6, #2
 8000ac8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ace:	2506      	movs	r5, #6
 8000ad0:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	a907      	add	r1, sp, #28
 8000ad4:	480a      	ldr	r0, [pc, #40]	@ (8000b00 <HAL_I2S_MspInit+0xb8>)
 8000ad6:	f000 fbb9 	bl	800124c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ada:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ade:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae6:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	a907      	add	r1, sp, #28
 8000aea:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <HAL_I2S_MspInit+0xbc>)
 8000aec:	f000 fbae 	bl	800124c <HAL_GPIO_Init>
}
 8000af0:	e7ba      	b.n	8000a68 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8000af2:	f7ff fe2d 	bl	8000750 <Error_Handler>
 8000af6:	e7c4      	b.n	8000a82 <HAL_I2S_MspInit+0x3a>
 8000af8:	40003c00 	.word	0x40003c00
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b500      	push	{lr}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9303      	str	r3, [sp, #12]
 8000b10:	9304      	str	r3, [sp, #16]
 8000b12:	9305      	str	r3, [sp, #20]
 8000b14:	9306      	str	r3, [sp, #24]
 8000b16:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000b18:	6802      	ldr	r2, [r0, #0]
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <HAL_SPI_MspInit+0x64>)
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d002      	beq.n	8000b26 <HAL_SPI_MspInit+0x1e>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b20:	b009      	add	sp, #36	@ 0x24
 8000b22:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b26:	2100      	movs	r1, #0
 8000b28:	9101      	str	r1, [sp, #4]
 8000b2a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8000b2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000b34:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b38:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000b3c:	9201      	str	r2, [sp, #4]
 8000b3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	9102      	str	r1, [sp, #8]
 8000b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b44:	f042 0201 	orr.w	r2, r2, #1
 8000b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	9302      	str	r3, [sp, #8]
 8000b52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b54:	23e0      	movs	r3, #224	@ 0xe0
 8000b56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	a903      	add	r1, sp, #12
 8000b62:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <HAL_SPI_MspInit+0x68>)
 8000b64:	f000 fb72 	bl	800124c <HAL_GPIO_Init>
}
 8000b68:	e7da      	b.n	8000b20 <HAL_SPI_MspInit+0x18>
 8000b6a:	bf00      	nop
 8000b6c:	40013000 	.word	0x40013000
 8000b70:	40020000 	.word	0x40020000

08000b74 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler>

08000b76 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler>

08000b78 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler>

08000b7a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler>

08000b7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler>

08000b7e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b86:	f000 f8eb 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8a:	bd08      	pop	{r3, pc}

08000b8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 fc62 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b94:	bd08      	pop	{r3, pc}
	...

08000b98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b9a:	4802      	ldr	r0, [pc, #8]	@ (8000ba4 <OTG_FS_IRQHandler+0xc>)
 8000b9c:	f001 fb5c 	bl	8002258 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ba0:	bd08      	pop	{r3, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000c80 	.word	0x20000c80

08000ba8 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000ba8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000bac:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 8000bb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bb4:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000bb8:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000bbc:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000bc8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f013 0f01 	tst.w	r3, #1
 8000bd2:	d0f9      	beq.n	8000bc8 <ITM_SendChar+0x20>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000bd4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000bd8:	6018      	str	r0, [r3, #0]
}
 8000bda:	4770      	bx	lr

08000bdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bdc:	b570      	push	{r4, r5, r6, lr}
 8000bde:	460c      	mov	r4, r1
 8000be0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	2500      	movs	r5, #0
 8000be4:	e006      	b.n	8000bf4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000be6:	f3af 8000 	nop.w
 8000bea:	4621      	mov	r1, r4
 8000bec:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000bf2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	42b5      	cmp	r5, r6
 8000bf6:	dbf6      	blt.n	8000be6 <_read+0xa>
  }

  return len;
}
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}

08000bfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfc:	b570      	push	{r4, r5, r6, lr}
 8000bfe:	460c      	mov	r4, r1
 8000c00:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	2500      	movs	r5, #0
 8000c04:	e004      	b.n	8000c10 <_write+0x14>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++); // in __attribute__((weak)) int _write function
 8000c06:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000c0a:	f7ff ffcd 	bl	8000ba8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	3501      	adds	r5, #1
 8000c10:	42b5      	cmp	r5, r6
 8000c12:	dbf8      	blt.n	8000c06 <_write+0xa>
  }
  return len;
}
 8000c14:	4630      	mov	r0, r6
 8000c16:	bd70      	pop	{r4, r5, r6, pc}

08000c18 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	4770      	bx	lr

08000c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c22:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000c24:	2000      	movs	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000c28:	2001      	movs	r0, #1
 8000c2a:	4770      	bx	lr

08000c2c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b510      	push	{r4, lr}
 8000c32:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a0c      	ldr	r2, [pc, #48]	@ (8000c68 <_sbrk+0x38>)
 8000c36:	490d      	ldr	r1, [pc, #52]	@ (8000c6c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <_sbrk+0x40>)
 8000c3a:	6800      	ldr	r0, [r0, #0]
 8000c3c:	b140      	cbz	r0, 8000c50 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <_sbrk+0x40>)
 8000c40:	6800      	ldr	r0, [r0, #0]
 8000c42:	4403      	add	r3, r0
 8000c44:	1a52      	subs	r2, r2, r1
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d806      	bhi.n	8000c58 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000c4a:	4a09      	ldr	r2, [pc, #36]	@ (8000c70 <_sbrk+0x40>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000c4e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <_sbrk+0x40>)
 8000c52:	4c08      	ldr	r4, [pc, #32]	@ (8000c74 <_sbrk+0x44>)
 8000c54:	6004      	str	r4, [r0, #0]
 8000c56:	e7f2      	b.n	8000c3e <_sbrk+0xe>
    errno = ENOMEM;
 8000c58:	f004 fe28 	bl	80058ac <__errno>
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	e7f3      	b.n	8000c4e <_sbrk+0x1e>
 8000c66:	bf00      	nop
 8000c68:	2001fffc 	.word	0x2001fffc
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	20000258 	.word	0x20000258
 8000c74:	200012b0 	.word	0x200012b0

08000c78 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4a03      	ldr	r2, [pc, #12]	@ (8000c88 <SystemInit+0x10>)
 8000c7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000c7e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c90:	f7ff fff2 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cba:	f004 fdfd 	bl	80058b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fdf7 	bl	80008b0 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	2001fffc 	.word	0x2001fffc
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8000cd0:	08006564 	.word	0x08006564
  ldr r2, =_sbss
 8000cd4:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8000cd8:	200012b0 	.word	0x200012b0

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b510      	push	{r4, lr}
 8000ce2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <HAL_InitTick+0x40>)
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d24 <HAL_InitTick+0x44>)
 8000cf2:	6810      	ldr	r0, [r2, #0]
 8000cf4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cf8:	f000 f8c0 	bl	8000e7c <HAL_SYSTICK_Config>
 8000cfc:	b968      	cbnz	r0, 8000d1a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	2c0f      	cmp	r4, #15
 8000d00:	d901      	bls.n	8000d06 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d02:	2001      	movs	r0, #1
 8000d04:	e00a      	b.n	8000d1c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d06:	2200      	movs	r2, #0
 8000d08:	4621      	mov	r1, r4
 8000d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0e:	f000 f8a1 	bl	8000e54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d12:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <HAL_InitTick+0x48>)
 8000d14:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2000      	movs	r0, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d1a:	2001      	movs	r0, #1
}
 8000d1c:	bd10      	pop	{r4, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004
 8000d28:	2000000c 	.word	0x2000000c

08000d2c <HAL_Init>:
{
 8000d2c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <HAL_Init+0x30>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f871 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff ffc6 	bl	8000ce0 <HAL_InitTick>
  HAL_MspInit();
 8000d54:	f7ff fe20 	bl	8000998 <HAL_MspInit>
}
 8000d58:	2000      	movs	r0, #0
 8000d5a:	bd08      	pop	{r3, pc}
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d60:	4a03      	ldr	r2, [pc, #12]	@ (8000d70 <HAL_IncTick+0x10>)
 8000d62:	6811      	ldr	r1, [r2, #0]
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <HAL_IncTick+0x14>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	440b      	add	r3, r1
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000025c 	.word	0x2000025c
 8000d74:	20000008 	.word	0x20000008

08000d78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d78:	4b01      	ldr	r3, [pc, #4]	@ (8000d80 <HAL_GetTick+0x8>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2000025c 	.word	0x2000025c

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff fff6 	bl	8000d78 <HAL_GetTick>
 8000d8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000d92:	d002      	beq.n	8000d9a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <HAL_Delay+0x24>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9a:	f7ff ffed 	bl	8000d78 <HAL_GetTick>
 8000d9e:	1b40      	subs	r0, r0, r5
 8000da0:	42a0      	cmp	r0, r4
 8000da2:	d3fa      	bcc.n	8000d9a <HAL_Delay+0x16>
  {
  }
}
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008

08000dac <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000dac:	2800      	cmp	r0, #0
 8000dae:	db07      	blt.n	8000dc0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db0:	f000 021f 	and.w	r2, r0, #31
 8000db4:	0940      	lsrs	r0, r0, #5
 8000db6:	2301      	movs	r3, #1
 8000db8:	4093      	lsls	r3, r2
 8000dba:	4a02      	ldr	r2, [pc, #8]	@ (8000dc4 <__NVIC_EnableIRQ+0x18>)
 8000dbc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	db08      	blt.n	8000dde <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	0109      	lsls	r1, r1, #4
 8000dce:	b2c9      	uxtb	r1, r1
 8000dd0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000dd4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000dd8:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000ddc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	f000 000f 	and.w	r0, r0, #15
 8000de2:	0109      	lsls	r1, r1, #4
 8000de4:	b2c9      	uxtb	r1, r1
 8000de6:	4b01      	ldr	r3, [pc, #4]	@ (8000dec <__NVIC_SetPriority+0x24>)
 8000de8:	5419      	strb	r1, [r3, r0]
  }
}
 8000dea:	4770      	bx	lr
 8000dec:	e000ed14 	.word	0xe000ed14

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df6:	f1c0 0c07 	rsb	ip, r0, #7
 8000dfa:	f1bc 0f04 	cmp.w	ip, #4
 8000dfe:	bf28      	it	cs
 8000e00:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e04:	1d03      	adds	r3, r0, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d90f      	bls.n	8000e2a <NVIC_EncodePriority+0x3a>
 8000e0a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 3eff 	mov.w	lr, #4294967295
 8000e10:	fa0e f00c 	lsl.w	r0, lr, ip
 8000e14:	ea21 0100 	bic.w	r1, r1, r0
 8000e18:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e1e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000e22:	ea41 0002 	orr.w	r0, r1, r2
 8000e26:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e7ee      	b.n	8000e0c <NVIC_EncodePriority+0x1c>
	...

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e32:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e34:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	0200      	lsls	r0, r0, #8
 8000e3e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e42:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e4c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e54:	b510      	push	{r4, lr}
 8000e56:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <HAL_NVIC_SetPriority+0x1c>)
 8000e5a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000e60:	f7ff ffc6 	bl	8000df0 <NVIC_EncodePriority>
 8000e64:	4601      	mov	r1, r0
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff ffae 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000e6c:	bd10      	pop	{r4, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e76:	f7ff ff99 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000e7a:	bd08      	pop	{r3, pc}

08000e7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e82:	d20b      	bcs.n	8000e9c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e88:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <HAL_SYSTICK_Config+0x24>)
 8000e8c:	21f0      	movs	r1, #240	@ 0xf0
 8000e8e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e92:	2000      	movs	r0, #0
 8000e94:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	2207      	movs	r2, #7
 8000e98:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e9c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000ea4:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ea6:	490a      	ldr	r1, [pc, #40]	@ (8000ed0 <FLASH_Program_DoubleWord+0x2c>)
 8000ea8:	690c      	ldr	r4, [r1, #16]
 8000eaa:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 8000eae:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000eb0:	690c      	ldr	r4, [r1, #16]
 8000eb2:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8000eb6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000eb8:	690c      	ldr	r4, [r1, #16]
 8000eba:	f044 0401 	orr.w	r4, r4, #1
 8000ebe:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8000ec0:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000ec2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8000ec6:	6043      	str	r3, [r0, #4]
}
 8000ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <FLASH_Program_Word+0x20>)
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000edc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ee4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	f042 0201 	orr.w	r2, r2, #1
 8000eec:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t *)Address = Data;
 8000eee:	6001      	str	r1, [r0, #0]
}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <FLASH_Program_HalfWord+0x20>)
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000f00:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f08:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	f042 0201 	orr.w	r2, r2, #1
 8000f10:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t *)Address = Data;
 8000f12:	8001      	strh	r1, [r0, #0]
}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <FLASH_Program_Byte+0x1c>)
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000f24:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	f042 0201 	orr.w	r2, r2, #1
 8000f30:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t *)Address = Data;
 8000f32:	7001      	strb	r1, [r0, #0]
}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000f3c:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f013 0f10 	tst.w	r3, #16
 8000f44:	d007      	beq.n	8000f56 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f46:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc4 <FLASH_SetErrorCode+0x88>)
 8000f48:	69d3      	ldr	r3, [r2, #28]
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000f50:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f013 0f20 	tst.w	r3, #32
 8000f5e:	d007      	beq.n	8000f70 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000f60:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <FLASH_SetErrorCode+0x88>)
 8000f62:	69d3      	ldr	r3, [r2, #28]
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8000f78:	d007      	beq.n	8000f8a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <FLASH_SetErrorCode+0x88>)
 8000f7c:	69d3      	ldr	r3, [r2, #28]
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000f86:	2240      	movs	r2, #64	@ 0x40
 8000f88:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000f92:	d007      	beq.n	8000fa4 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000f94:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <FLASH_SetErrorCode+0x88>)
 8000f96:	69d3      	ldr	r3, [r2, #28]
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000fa0:	2280      	movs	r2, #128	@ 0x80
 8000fa2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f013 0f02 	tst.w	r3, #2
 8000fac:	d007      	beq.n	8000fbe <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <FLASH_SetErrorCode+0x88>)
 8000fb0:	69d3      	ldr	r3, [r2, #28]
 8000fb2:	f043 0320 	orr.w	r3, r3, #32
 8000fb6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000fb8:	4b01      	ldr	r3, [pc, #4]	@ (8000fc0 <FLASH_SetErrorCode+0x84>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	60da      	str	r2, [r3, #12]
  }
}
 8000fbe:	4770      	bx	lr
 8000fc0:	40023c00 	.word	0x40023c00
 8000fc4:	20000260 	.word	0x20000260

08000fc8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_FLASH_Unlock+0x28>)
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db01      	blt.n	8000fd4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_FLASH_Unlock+0x28>)
 8000fd6:	4a07      	ldr	r2, [pc, #28]	@ (8000ff4 <HAL_FLASH_Unlock+0x2c>)
 8000fd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fda:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8000fde:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db01      	blt.n	8000fea <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	4770      	bx	lr
      status = HAL_ERROR;
 8000fea:	2001      	movs	r0, #1
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00
 8000ff4:	45670123 	.word	0x45670123

08000ff8 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000ff8:	4a03      	ldr	r2, [pc, #12]	@ (8001008 <HAL_FLASH_Lock+0x10>)
 8000ffa:	6913      	ldr	r3, [r2, #16]
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	6113      	str	r3, [r2, #16]
}
 8001002:	2000      	movs	r0, #0
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <FLASH_WaitForLastOperation>:
{
 800100c:	b538      	push	{r3, r4, r5, lr}
 800100e:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <FLASH_WaitForLastOperation+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8001016:	f7ff feaf 	bl	8000d78 <HAL_GetTick>
 800101a:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <FLASH_WaitForLastOperation+0x5c>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001024:	d00a      	beq.n	800103c <FLASH_WaitForLastOperation+0x30>
    if (Timeout != HAL_MAX_DELAY)
 8001026:	f1b4 3fff 	cmp.w	r4, #4294967295
 800102a:	d0f7      	beq.n	800101c <FLASH_WaitForLastOperation+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800102c:	b124      	cbz	r4, 8001038 <FLASH_WaitForLastOperation+0x2c>
 800102e:	f7ff fea3 	bl	8000d78 <HAL_GetTick>
 8001032:	1b40      	subs	r0, r0, r5
 8001034:	42a0      	cmp	r0, r4
 8001036:	d9f1      	bls.n	800101c <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8001038:	2003      	movs	r0, #3
 800103a:	e00d      	b.n	8001058 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <FLASH_WaitForLastOperation+0x5c>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	f013 0f01 	tst.w	r3, #1
 8001044:	d002      	beq.n	800104c <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <FLASH_WaitForLastOperation+0x5c>)
 8001048:	2201      	movs	r2, #1
 800104a:	60da      	str	r2, [r3, #12]
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <FLASH_WaitForLastOperation+0x5c>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f013 0ff2 	tst.w	r3, #242	@ 0xf2
 8001054:	d101      	bne.n	800105a <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8001056:	2000      	movs	r0, #0
}
 8001058:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 800105a:	f7ff ff6f 	bl	8000f3c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800105e:	2001      	movs	r0, #1
 8001060:	e7fa      	b.n	8001058 <FLASH_WaitForLastOperation+0x4c>
 8001062:	bf00      	nop
 8001064:	20000260 	.word	0x20000260
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_FLASH_Program>:
{
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106e:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8001070:	4a1b      	ldr	r2, [pc, #108]	@ (80010e0 <HAL_FLASH_Program+0x74>)
 8001072:	7e12      	ldrb	r2, [r2, #24]
 8001074:	2a01      	cmp	r2, #1
 8001076:	d030      	beq.n	80010da <HAL_FLASH_Program+0x6e>
 8001078:	4604      	mov	r4, r0
 800107a:	460d      	mov	r5, r1
 800107c:	461f      	mov	r7, r3
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_FLASH_Program+0x74>)
 8001080:	2201      	movs	r2, #1
 8001082:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001084:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001088:	f7ff ffc0 	bl	800100c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800108c:	b990      	cbnz	r0, 80010b4 <HAL_FLASH_Program+0x48>
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800108e:	b1ac      	cbz	r4, 80010bc <HAL_FLASH_Program+0x50>
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001090:	2c01      	cmp	r4, #1
 8001092:	d018      	beq.n	80010c6 <HAL_FLASH_Program+0x5a>
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001094:	2c02      	cmp	r4, #2
 8001096:	d01b      	beq.n	80010d0 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8001098:	4632      	mov	r2, r6
 800109a:	463b      	mov	r3, r7
 800109c:	4628      	mov	r0, r5
 800109e:	f7ff ff01 	bl	8000ea4 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010a6:	f7ff ffb1 	bl	800100c <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 80010aa:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_FLASH_Program+0x78>)
 80010ac:	6913      	ldr	r3, [r2, #16]
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <HAL_FLASH_Program+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	761a      	strb	r2, [r3, #24]
}
 80010ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80010bc:	b2f1      	uxtb	r1, r6
 80010be:	4628      	mov	r0, r5
 80010c0:	f7ff ff2c 	bl	8000f1c <FLASH_Program_Byte>
 80010c4:	e7ed      	b.n	80010a2 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80010c6:	b2b1      	uxth	r1, r6
 80010c8:	4628      	mov	r0, r5
 80010ca:	f7ff ff15 	bl	8000ef8 <FLASH_Program_HalfWord>
 80010ce:	e7e8      	b.n	80010a2 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80010d0:	4631      	mov	r1, r6
 80010d2:	4628      	mov	r0, r5
 80010d4:	f7ff fefe 	bl	8000ed4 <FLASH_Program_Word>
 80010d8:	e7e3      	b.n	80010a2 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80010da:	2002      	movs	r0, #2
 80010dc:	e7ed      	b.n	80010ba <HAL_FLASH_Program+0x4e>
 80010de:	bf00      	nop
 80010e0:	20000260 	.word	0x20000260
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <FLASH_MassErase+0x20>)
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80010f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	f042 0204 	orr.w	r2, r2, #4
 80010f8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001100:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001104:	611a      	str	r2, [r3, #16]
}
 8001106:	4770      	bx	lr
 8001108:	40023c00 	.word	0x40023c00

0800110c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800110c:	2901      	cmp	r1, #1
 800110e:	d005      	beq.n	800111c <FLASH_Erase_Sector+0x10>
 8001110:	2902      	cmp	r1, #2
 8001112:	d006      	beq.n	8001122 <FLASH_Erase_Sector+0x16>
 8001114:	b139      	cbz	r1, 8001126 <FLASH_Erase_Sector+0x1a>
{
 8001116:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800111a:	e004      	b.n	8001126 <FLASH_Erase_Sector+0x1a>
 800111c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001120:	e001      	b.n	8001126 <FLASH_Erase_Sector+0x1a>
 8001122:	f44f 7100 	mov.w	r1, #512	@ 0x200
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <FLASH_Erase_Sector+0x48>)
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800112e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	430a      	orrs	r2, r1
 8001134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	f022 0278 	bic.w	r2, r2, #120	@ 0x78
 800113c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001144:	f040 0002 	orr.w	r0, r0, #2
 8001148:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001150:	611a      	str	r2, [r3, #16]
}
 8001152:	4770      	bx	lr
 8001154:	40023c00 	.word	0x40023c00

08001158 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001158:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <FLASH_FlushCaches+0x5c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001160:	d010      	beq.n	8001184 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <FLASH_FlushCaches+0x5c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800116a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800117a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001182:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <FLASH_FlushCaches+0x5c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800118c:	d010      	beq.n	80011b0 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <FLASH_FlushCaches+0x5c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001196:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011a6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80011ae:	601a      	str	r2, [r3, #0]
  }
}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_FLASHEx_Erase>:
{
 80011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80011ba:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <HAL_FLASHEx_Erase+0x8c>)
 80011bc:	7e1b      	ldrb	r3, [r3, #24]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d03e      	beq.n	8001240 <HAL_FLASHEx_Erase+0x88>
 80011c2:	4604      	mov	r4, r0
 80011c4:	460e      	mov	r6, r1
 80011c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <HAL_FLASHEx_Erase+0x8c>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011d0:	f7ff ff1c 	bl	800100c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80011d4:	4607      	mov	r7, r0
 80011d6:	bb70      	cbnz	r0, 8001236 <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	6033      	str	r3, [r6, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d016      	beq.n	8001212 <HAL_FLASHEx_Erase+0x5a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80011e4:	68a5      	ldr	r5, [r4, #8]
 80011e6:	68e3      	ldr	r3, [r4, #12]
 80011e8:	68a2      	ldr	r2, [r4, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	42ab      	cmp	r3, r5
 80011ee:	d920      	bls.n	8001232 <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80011f0:	7c21      	ldrb	r1, [r4, #16]
 80011f2:	4628      	mov	r0, r5
 80011f4:	f7ff ff8a 	bl	800110c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011fc:	f7ff ff06 	bl	800100c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001200:	4a11      	ldr	r2, [pc, #68]	@ (8001248 <HAL_FLASHEx_Erase+0x90>)
 8001202:	6913      	ldr	r3, [r2, #16]
 8001204:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 8001208:	6113      	str	r3, [r2, #16]
        if (status != HAL_OK)
 800120a:	4607      	mov	r7, r0
 800120c:	b980      	cbnz	r0, 8001230 <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800120e:	3501      	adds	r5, #1
 8001210:	e7e9      	b.n	80011e6 <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001212:	6861      	ldr	r1, [r4, #4]
 8001214:	7c20      	ldrb	r0, [r4, #16]
 8001216:	f7ff ff67 	bl	80010e8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800121a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800121e:	f7ff fef5 	bl	800100c <FLASH_WaitForLastOperation>
 8001222:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001224:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <HAL_FLASHEx_Erase+0x90>)
 8001226:	6913      	ldr	r3, [r2, #16]
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	6113      	str	r3, [r2, #16]
 800122e:	e000      	b.n	8001232 <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8001230:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8001232:	f7ff ff91 	bl	8001158 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001236:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <HAL_FLASHEx_Erase+0x8c>)
 8001238:	2200      	movs	r2, #0
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	4638      	mov	r0, r7
 800123e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001240:	2702      	movs	r7, #2
 8001242:	e7fb      	b.n	800123c <HAL_FLASHEx_Erase+0x84>
 8001244:	20000260 	.word	0x20000260
 8001248:	40023c00 	.word	0x40023c00

0800124c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124c:	2300      	movs	r3, #0
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f200 80e9 	bhi.w	8001426 <HAL_GPIO_Init+0x1da>
{
 8001254:	b570      	push	{r4, r5, r6, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	e065      	b.n	8001326 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800125c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001260:	2403      	movs	r4, #3
 8001262:	fa04 f40e 	lsl.w	r4, r4, lr
 8001266:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126a:	68cc      	ldr	r4, [r1, #12]
 800126c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001270:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001272:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001274:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001276:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127a:	684a      	ldr	r2, [r1, #4]
 800127c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001280:	409a      	lsls	r2, r3
 8001282:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001284:	6042      	str	r2, [r0, #4]
 8001286:	e05c      	b.n	8001342 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	08dc      	lsrs	r4, r3, #3
 800128a:	3408      	adds	r4, #8
 800128c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001290:	f003 0507 	and.w	r5, r3, #7
 8001294:	00ad      	lsls	r5, r5, #2
 8001296:	f04f 0e0f 	mov.w	lr, #15
 800129a:	fa0e fe05 	lsl.w	lr, lr, r5
 800129e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a2:	690a      	ldr	r2, [r1, #16]
 80012a4:	40aa      	lsls	r2, r5
 80012a6:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80012aa:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80012ae:	e05c      	b.n	800136a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b0:	2207      	movs	r2, #7
 80012b2:	e000      	b.n	80012b6 <HAL_GPIO_Init+0x6a>
 80012b4:	2200      	movs	r2, #0
 80012b6:	fa02 f20e 	lsl.w	r2, r2, lr
 80012ba:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	3402      	adds	r4, #2
 80012be:	4d5a      	ldr	r5, [pc, #360]	@ (8001428 <HAL_GPIO_Init+0x1dc>)
 80012c0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c4:	4a59      	ldr	r2, [pc, #356]	@ (800142c <HAL_GPIO_Init+0x1e0>)
 80012c6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	ea6f 020c 	mvn.w	r2, ip
 80012cc:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d0:	684e      	ldr	r6, [r1, #4]
 80012d2:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80012d6:	d001      	beq.n	80012dc <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80012d8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80012dc:	4c53      	ldr	r4, [pc, #332]	@ (800142c <HAL_GPIO_Init+0x1e0>)
 80012de:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80012e0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e6:	684e      	ldr	r6, [r1, #4]
 80012e8:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80012ec:	d001      	beq.n	80012f2 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80012ee:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80012f2:	4c4e      	ldr	r4, [pc, #312]	@ (800142c <HAL_GPIO_Init+0x1e0>)
 80012f4:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80012f6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fc:	684e      	ldr	r6, [r1, #4]
 80012fe:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001302:	d001      	beq.n	8001308 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001304:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001308:	4c48      	ldr	r4, [pc, #288]	@ (800142c <HAL_GPIO_Init+0x1e0>)
 800130a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800130e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001310:	684d      	ldr	r5, [r1, #4]
 8001312:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001316:	d001      	beq.n	800131c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001318:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800131c:	4c43      	ldr	r4, [pc, #268]	@ (800142c <HAL_GPIO_Init+0x1e0>)
 800131e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001320:	3301      	adds	r3, #1
 8001322:	2b0f      	cmp	r3, #15
 8001324:	d87d      	bhi.n	8001422 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001326:	2201      	movs	r2, #1
 8001328:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	680c      	ldr	r4, [r1, #0]
 800132c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001330:	ea32 0404 	bics.w	r4, r2, r4
 8001334:	d1f4      	bne.n	8001320 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	684c      	ldr	r4, [r1, #4]
 8001338:	f004 0403 	and.w	r4, r4, #3
 800133c:	3c01      	subs	r4, #1
 800133e:	2c01      	cmp	r4, #1
 8001340:	d98b      	bls.n	800125a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001342:	684a      	ldr	r2, [r1, #4]
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	2a03      	cmp	r2, #3
 800134a:	d009      	beq.n	8001360 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800134c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134e:	005d      	lsls	r5, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	40aa      	lsls	r2, r5
 8001354:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	688a      	ldr	r2, [r1, #8]
 800135a:	40aa      	lsls	r2, r5
 800135c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800135e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001360:	684a      	ldr	r2, [r1, #4]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	2a02      	cmp	r2, #2
 8001368:	d08e      	beq.n	8001288 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800136a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800136c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f20e 	lsl.w	r2, r2, lr
 8001376:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800137a:	684a      	ldr	r2, [r1, #4]
 800137c:	f002 0203 	and.w	r2, r2, #3
 8001380:	fa02 f20e 	lsl.w	r2, r2, lr
 8001384:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001386:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001388:	684a      	ldr	r2, [r1, #4]
 800138a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800138e:	d0c7      	beq.n	8001320 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	2200      	movs	r2, #0
 8001392:	9201      	str	r2, [sp, #4]
 8001394:	4a26      	ldr	r2, [pc, #152]	@ (8001430 <HAL_GPIO_Init+0x1e4>)
 8001396:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001398:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800139c:	6454      	str	r4, [r2, #68]	@ 0x44
 800139e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80013a0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80013a4:	9201      	str	r2, [sp, #4]
 80013a6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80013a8:	089c      	lsrs	r4, r3, #2
 80013aa:	1ca5      	adds	r5, r4, #2
 80013ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001428 <HAL_GPIO_Init+0x1dc>)
 80013ae:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b2:	f003 0e03 	and.w	lr, r3, #3
 80013b6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f20e 	lsl.w	r2, r2, lr
 80013c0:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001434 <HAL_GPIO_Init+0x1e8>)
 80013c6:	4290      	cmp	r0, r2
 80013c8:	f43f af74 	beq.w	80012b4 <HAL_GPIO_Init+0x68>
 80013cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013d0:	4290      	cmp	r0, r2
 80013d2:	d01a      	beq.n	800140a <HAL_GPIO_Init+0x1be>
 80013d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013d8:	4290      	cmp	r0, r2
 80013da:	d018      	beq.n	800140e <HAL_GPIO_Init+0x1c2>
 80013dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013e0:	4290      	cmp	r0, r2
 80013e2:	d016      	beq.n	8001412 <HAL_GPIO_Init+0x1c6>
 80013e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013e8:	4290      	cmp	r0, r2
 80013ea:	d014      	beq.n	8001416 <HAL_GPIO_Init+0x1ca>
 80013ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013f0:	4290      	cmp	r0, r2
 80013f2:	d012      	beq.n	800141a <HAL_GPIO_Init+0x1ce>
 80013f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013f8:	4290      	cmp	r0, r2
 80013fa:	d010      	beq.n	800141e <HAL_GPIO_Init+0x1d2>
 80013fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001400:	4290      	cmp	r0, r2
 8001402:	f43f af55 	beq.w	80012b0 <HAL_GPIO_Init+0x64>
 8001406:	2208      	movs	r2, #8
 8001408:	e755      	b.n	80012b6 <HAL_GPIO_Init+0x6a>
 800140a:	2201      	movs	r2, #1
 800140c:	e753      	b.n	80012b6 <HAL_GPIO_Init+0x6a>
 800140e:	2202      	movs	r2, #2
 8001410:	e751      	b.n	80012b6 <HAL_GPIO_Init+0x6a>
 8001412:	2203      	movs	r2, #3
 8001414:	e74f      	b.n	80012b6 <HAL_GPIO_Init+0x6a>
 8001416:	2204      	movs	r2, #4
 8001418:	e74d      	b.n	80012b6 <HAL_GPIO_Init+0x6a>
 800141a:	2205      	movs	r2, #5
 800141c:	e74b      	b.n	80012b6 <HAL_GPIO_Init+0x6a>
 800141e:	2206      	movs	r2, #6
 8001420:	e749      	b.n	80012b6 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001422:	b002      	add	sp, #8
 8001424:	bd70      	pop	{r4, r5, r6, pc}
 8001426:	4770      	bx	lr
 8001428:	40013800 	.word	0x40013800
 800142c:	40013c00 	.word	0x40013c00
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	b10a      	cbz	r2, 800143e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143a:	6181      	str	r1, [r0, #24]
 800143c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800143e:	0409      	lsls	r1, r1, #16
 8001440:	6181      	str	r1, [r0, #24]
  }
}
 8001442:	4770      	bx	lr

08001444 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001444:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001446:	ea01 0203 	and.w	r2, r1, r3
 800144a:	ea21 0103 	bic.w	r1, r1, r3
 800144e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001452:	6181      	str	r1, [r0, #24]
}
 8001454:	4770      	bx	lr
	...

08001458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001458:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800145a:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4203      	tst	r3, r0
 8001460:	d100      	bne.n	8001464 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001462:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001464:	4b02      	ldr	r3, [pc, #8]	@ (8001470 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001466:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001468:	f7ff f962 	bl	8000730 <HAL_GPIO_EXTI_Callback>
}
 800146c:	e7f9      	b.n	8001462 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800146e:	bf00      	nop
 8001470:	40013c00 	.word	0x40013c00

08001474 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001474:	2800      	cmp	r0, #0
 8001476:	f000 80cc 	beq.w	8001612 <HAL_I2C_Init+0x19e>
{
 800147a:	b570      	push	{r4, r5, r6, lr}
 800147c:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800147e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001482:	2b00      	cmp	r3, #0
 8001484:	d077      	beq.n	8001576 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001486:	2324      	movs	r3, #36	@ 0x24
 8001488:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800149e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014a0:	6822      	ldr	r2, [r4, #0]
 80014a2:	6813      	ldr	r3, [r2, #0]
 80014a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80014a8:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014aa:	f001 fcff 	bl	8002eac <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ae:	6862      	ldr	r2, [r4, #4]
 80014b0:	4b5a      	ldr	r3, [pc, #360]	@ (800161c <HAL_I2C_Init+0x1a8>)
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d864      	bhi.n	8001580 <HAL_I2C_Init+0x10c>
 80014b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001620 <HAL_I2C_Init+0x1ac>)
 80014b8:	4298      	cmp	r0, r3
 80014ba:	bf8c      	ite	hi
 80014bc:	2300      	movhi	r3, #0
 80014be:	2301      	movls	r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f040 80a8 	bne.w	8001616 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014c6:	4957      	ldr	r1, [pc, #348]	@ (8001624 <HAL_I2C_Init+0x1b0>)
 80014c8:	fba1 3100 	umull	r3, r1, r1, r0
 80014cc:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ce:	6825      	ldr	r5, [r4, #0]
 80014d0:	686a      	ldr	r2, [r5, #4]
 80014d2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80014d6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80014da:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014dc:	6821      	ldr	r1, [r4, #0]
 80014de:	6a0a      	ldr	r2, [r1, #32]
 80014e0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80014e4:	6866      	ldr	r6, [r4, #4]
 80014e6:	4d4d      	ldr	r5, [pc, #308]	@ (800161c <HAL_I2C_Init+0x1a8>)
 80014e8:	42ae      	cmp	r6, r5
 80014ea:	d84f      	bhi.n	800158c <HAL_I2C_Init+0x118>
 80014ec:	3301      	adds	r3, #1
 80014ee:	4313      	orrs	r3, r2
 80014f0:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014f2:	6821      	ldr	r1, [r4, #0]
 80014f4:	69ca      	ldr	r2, [r1, #28]
 80014f6:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80014fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014fe:	6865      	ldr	r5, [r4, #4]
 8001500:	4b46      	ldr	r3, [pc, #280]	@ (800161c <HAL_I2C_Init+0x1a8>)
 8001502:	429d      	cmp	r5, r3
 8001504:	d84c      	bhi.n	80015a0 <HAL_I2C_Init+0x12c>
 8001506:	1e43      	subs	r3, r0, #1
 8001508:	006d      	lsls	r5, r5, #1
 800150a:	fbb3 f3f5 	udiv	r3, r3, r5
 800150e:	3301      	adds	r3, #1
 8001510:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001514:	4203      	tst	r3, r0
 8001516:	d078      	beq.n	800160a <HAL_I2C_Init+0x196>
 8001518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151c:	431a      	orrs	r2, r3
 800151e:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001520:	6821      	ldr	r1, [r4, #0]
 8001522:	680b      	ldr	r3, [r1, #0]
 8001524:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001528:	69e2      	ldr	r2, [r4, #28]
 800152a:	6a20      	ldr	r0, [r4, #32]
 800152c:	4302      	orrs	r2, r0
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001532:	6821      	ldr	r1, [r4, #0]
 8001534:	688b      	ldr	r3, [r1, #8]
 8001536:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800153a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800153e:	6922      	ldr	r2, [r4, #16]
 8001540:	68e0      	ldr	r0, [r4, #12]
 8001542:	4302      	orrs	r2, r0
 8001544:	4313      	orrs	r3, r2
 8001546:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001548:	6821      	ldr	r1, [r4, #0]
 800154a:	68cb      	ldr	r3, [r1, #12]
 800154c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001550:	6962      	ldr	r2, [r4, #20]
 8001552:	69a0      	ldr	r0, [r4, #24]
 8001554:	4302      	orrs	r2, r0
 8001556:	4313      	orrs	r3, r2
 8001558:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800155a:	6822      	ldr	r2, [r4, #0]
 800155c:	6813      	ldr	r3, [r2, #0]
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001564:	2000      	movs	r0, #0
 8001566:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001568:	2320      	movs	r3, #32
 800156a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800156e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001570:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8001574:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001576:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800157a:	f7ff fa2d 	bl	80009d8 <HAL_I2C_MspInit>
 800157e:	e782      	b.n	8001486 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001580:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <HAL_I2C_Init+0x1b4>)
 8001582:	4298      	cmp	r0, r3
 8001584:	bf8c      	ite	hi
 8001586:	2300      	movhi	r3, #0
 8001588:	2301      	movls	r3, #1
 800158a:	e799      	b.n	80014c0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800158c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001590:	fb05 f303 	mul.w	r3, r5, r3
 8001594:	4d25      	ldr	r5, [pc, #148]	@ (800162c <HAL_I2C_Init+0x1b8>)
 8001596:	fba5 5303 	umull	r5, r3, r5, r3
 800159a:	099b      	lsrs	r3, r3, #6
 800159c:	3301      	adds	r3, #1
 800159e:	e7a6      	b.n	80014ee <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015a0:	68a6      	ldr	r6, [r4, #8]
 80015a2:	b9be      	cbnz	r6, 80015d4 <HAL_I2C_Init+0x160>
 80015a4:	1e43      	subs	r3, r0, #1
 80015a6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80015aa:	fbb3 f3fc 	udiv	r3, r3, ip
 80015ae:	3301      	adds	r3, #1
 80015b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	095b      	lsrs	r3, r3, #5
 80015ba:	bb43      	cbnz	r3, 800160e <HAL_I2C_Init+0x19a>
 80015bc:	b9c6      	cbnz	r6, 80015f0 <HAL_I2C_Init+0x17c>
 80015be:	1e43      	subs	r3, r0, #1
 80015c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80015c4:	fbb3 f3f5 	udiv	r3, r3, r5
 80015c8:	3301      	adds	r3, #1
 80015ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d2:	e7a3      	b.n	800151c <HAL_I2C_Init+0xa8>
 80015d4:	1e43      	subs	r3, r0, #1
 80015d6:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80015da:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80015de:	fbb3 f3fc 	udiv	r3, r3, ip
 80015e2:	3301      	adds	r3, #1
 80015e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	e7e4      	b.n	80015ba <HAL_I2C_Init+0x146>
 80015f0:	1e43      	subs	r3, r0, #1
 80015f2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80015f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80015fa:	fbb3 f3f5 	udiv	r3, r3, r5
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001608:	e788      	b.n	800151c <HAL_I2C_Init+0xa8>
 800160a:	2304      	movs	r3, #4
 800160c:	e786      	b.n	800151c <HAL_I2C_Init+0xa8>
 800160e:	2301      	movs	r3, #1
 8001610:	e784      	b.n	800151c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001612:	2001      	movs	r0, #1
}
 8001614:	4770      	bx	lr
    return HAL_ERROR;
 8001616:	2001      	movs	r0, #1
 8001618:	e7ac      	b.n	8001574 <HAL_I2C_Init+0x100>
 800161a:	bf00      	nop
 800161c:	000186a0 	.word	0x000186a0
 8001620:	001e847f 	.word	0x001e847f
 8001624:	431bde83 	.word	0x431bde83
 8001628:	003d08ff 	.word	0x003d08ff
 800162c:	10624dd3 	.word	0x10624dd3

08001630 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001630:	2800      	cmp	r0, #0
 8001632:	f000 80be 	beq.w	80017b2 <HAL_I2S_Init+0x182>
{
 8001636:	b538      	push	{r3, r4, r5, lr}
 8001638:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800163a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800163e:	2b00      	cmp	r3, #0
 8001640:	d051      	beq.n	80016e6 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001642:	2202      	movs	r2, #2
 8001644:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001648:	6821      	ldr	r1, [r4, #0]
 800164a:	69cb      	ldr	r3, [r1, #28]
 800164c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001650:	f023 030f 	bic.w	r3, r3, #15
 8001654:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800165a:	6963      	ldr	r3, [r4, #20]
 800165c:	4293      	cmp	r3, r2
 800165e:	d069      	beq.n	8001734 <HAL_I2S_Init+0x104>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001660:	68e3      	ldr	r3, [r4, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d146      	bne.n	80016f4 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001666:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001668:	68a3      	ldr	r3, [r4, #8]
 800166a:	2b20      	cmp	r3, #32
 800166c:	d800      	bhi.n	8001670 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800166e:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001670:	2001      	movs	r0, #1
 8001672:	f001 fcd5 	bl	8003020 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001676:	6923      	ldr	r3, [r4, #16]
 8001678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800167c:	d03c      	beq.n	80016f8 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800167e:	fbb0 f0f5 	udiv	r0, r0, r5
 8001682:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001686:	0043      	lsls	r3, r0, #1
 8001688:	6962      	ldr	r2, [r4, #20]
 800168a:	fbb3 f3f2 	udiv	r3, r3, r2
 800168e:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001690:	4a49      	ldr	r2, [pc, #292]	@ (80017b8 <HAL_I2S_Init+0x188>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001696:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800169a:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 800169e:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016a0:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016a2:	1e9a      	subs	r2, r3, #2
 80016a4:	2afd      	cmp	r2, #253	@ 0xfd
 80016a6:	d83f      	bhi.n	8001728 <HAL_I2S_Init+0xf8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016a8:	6922      	ldr	r2, [r4, #16]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	6821      	ldr	r1, [r4, #0]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	620a      	str	r2, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016b2:	6821      	ldr	r1, [r4, #0]
 80016b4:	69cb      	ldr	r3, [r1, #28]
 80016b6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80016ba:	f023 030f 	bic.w	r3, r3, #15
 80016be:	6862      	ldr	r2, [r4, #4]
 80016c0:	68a0      	ldr	r0, [r4, #8]
 80016c2:	4302      	orrs	r2, r0
 80016c4:	68e0      	ldr	r0, [r4, #12]
 80016c6:	4302      	orrs	r2, r0
 80016c8:	69a0      	ldr	r0, [r4, #24]
 80016ca:	4302      	orrs	r2, r0
 80016cc:	4313      	orrs	r3, r2
 80016ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016d2:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80016d4:	6a23      	ldr	r3, [r4, #32]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d02e      	beq.n	8001738 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80016da:	2000      	movs	r0, #0
 80016dc:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80016de:	2301      	movs	r3, #1
 80016e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  return HAL_OK;
}
 80016e4:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->Lock = HAL_UNLOCKED;
 80016e6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80016ea:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <HAL_I2S_Init+0x18c>)
 80016ec:	6343      	str	r3, [r0, #52]	@ 0x34
    HAL_I2S_MspInit(hi2s);
 80016ee:	f7ff f9ab 	bl	8000a48 <HAL_I2S_MspInit>
 80016f2:	e7a6      	b.n	8001642 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 80016f4:	2520      	movs	r5, #32
 80016f6:	e7b7      	b.n	8001668 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80016f8:	68e3      	ldr	r3, [r4, #12]
 80016fa:	b153      	cbz	r3, 8001712 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016fc:	00ad      	lsls	r5, r5, #2
 80016fe:	fbb0 f0f5 	udiv	r0, r0, r5
 8001702:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001706:	0043      	lsls	r3, r0, #1
 8001708:	6962      	ldr	r2, [r4, #20]
 800170a:	fbb3 f3f2 	udiv	r3, r3, r2
 800170e:	3305      	adds	r3, #5
 8001710:	e7be      	b.n	8001690 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001712:	00ed      	lsls	r5, r5, #3
 8001714:	fbb0 f0f5 	udiv	r0, r0, r5
 8001718:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800171c:	0043      	lsls	r3, r0, #1
 800171e:	6962      	ldr	r2, [r4, #20]
 8001720:	fbb3 f3f2 	udiv	r3, r3, r2
 8001724:	3305      	adds	r3, #5
 8001726:	e7b3      	b.n	8001690 <HAL_I2S_Init+0x60>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001728:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6463      	str	r3, [r4, #68]	@ 0x44
    return  HAL_ERROR;
 8001730:	2001      	movs	r0, #1
 8001732:	e7d7      	b.n	80016e4 <HAL_I2S_Init+0xb4>
    i2sodd = 0U;
 8001734:	2100      	movs	r1, #0
 8001736:	e7b7      	b.n	80016a8 <HAL_I2S_Init+0x78>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <HAL_I2S_Init+0x190>)
 800173a:	6363      	str	r3, [r4, #52]	@ 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_I2S_Init+0x194>)
 8001740:	429a      	cmp	r2, r3
 8001742:	d01f      	beq.n	8001784 <HAL_I2S_Init+0x154>
 8001744:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001748:	69d3      	ldr	r3, [r2, #28]
 800174a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800174e:	f023 030f 	bic.w	r3, r3, #15
 8001752:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <HAL_I2S_Init+0x194>)
 8001758:	429a      	cmp	r2, r3
 800175a:	d015      	beq.n	8001788 <HAL_I2S_Init+0x158>
 800175c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001760:	2302      	movs	r3, #2
 8001762:	6213      	str	r3, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001764:	6822      	ldr	r2, [r4, #0]
 8001766:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <HAL_I2S_Init+0x194>)
 8001768:	429a      	cmp	r2, r3
 800176a:	d00f      	beq.n	800178c <HAL_I2S_Init+0x15c>
 800176c:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
 8001770:	69eb      	ldr	r3, [r5, #28]
 8001772:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001774:	6862      	ldr	r2, [r4, #4]
 8001776:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800177a:	d009      	beq.n	8001790 <HAL_I2S_Init+0x160>
 800177c:	b9ba      	cbnz	r2, 80017ae <HAL_I2S_Init+0x17e>
      tmp = I2S_MODE_SLAVE_RX;
 800177e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001782:	e007      	b.n	8001794 <HAL_I2S_Init+0x164>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001784:	4a10      	ldr	r2, [pc, #64]	@ (80017c8 <HAL_I2S_Init+0x198>)
 8001786:	e7df      	b.n	8001748 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001788:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <HAL_I2S_Init+0x198>)
 800178a:	e7e9      	b.n	8001760 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800178c:	4d0e      	ldr	r5, [pc, #56]	@ (80017c8 <HAL_I2S_Init+0x198>)
 800178e:	e7ef      	b.n	8001770 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8001790:	f44f 7080 	mov.w	r0, #256	@ 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 8001794:	f8b4 c008 	ldrh.w	ip, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 8001798:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 800179a:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800179c:	ea40 000c 	orr.w	r0, r0, ip
 80017a0:	4301      	orrs	r1, r0
 80017a2:	430a      	orrs	r2, r1
 80017a4:	4313      	orrs	r3, r2
 80017a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80017aa:	61eb      	str	r3, [r5, #28]
 80017ac:	e795      	b.n	80016da <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 80017ae:	2000      	movs	r0, #0
 80017b0:	e7f0      	b.n	8001794 <HAL_I2S_Init+0x164>
    return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	cccccccd 	.word	0xcccccccd
 80017bc:	08001843 	.word	0x08001843
 80017c0:	08001a55 	.word	0x08001a55
 80017c4:	40003800 	.word	0x40003800
 80017c8:	40003400 	.word	0x40003400

080017cc <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80017cc:	4770      	bx	lr

080017ce <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80017ce:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80017d0:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80017d2:	6803      	ldr	r3, [r0, #0]
 80017d4:	8812      	ldrh	r2, [r2, #0]
 80017d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80017d8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80017da:	3302      	adds	r3, #2
 80017dc:	6243      	str	r3, [r0, #36]	@ 0x24
  hi2s->TxXferCount--;
 80017de:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80017e8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	b103      	cbz	r3, 80017f0 <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80017ee:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80017f0:	6802      	ldr	r2, [r0, #0]
 80017f2:	6853      	ldr	r3, [r2, #4]
 80017f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80017f8:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001800:	f7ff ffe4 	bl	80017cc <HAL_I2S_TxCpltCallback>
}
 8001804:	e7f3      	b.n	80017ee <I2S_Transmit_IT+0x20>

08001806 <HAL_I2S_RxCpltCallback>:
}
 8001806:	4770      	bx	lr

08001808 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001808:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800180a:	6803      	ldr	r3, [r0, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001810:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001812:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001814:	3302      	adds	r3, #2
 8001816:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001818:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800181a:	b29b      	uxth	r3, r3
 800181c:	3b01      	subs	r3, #1
 800181e:	b29b      	uxth	r3, r3
 8001820:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001822:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001824:	b29b      	uxth	r3, r3
 8001826:	b103      	cbz	r3, 800182a <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001828:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800182a:	6802      	ldr	r2, [r0, #0]
 800182c:	6853      	ldr	r3, [r2, #4]
 800182e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001832:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001834:	2301      	movs	r3, #1
 8001836:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 800183a:	f7ff ffe4 	bl	8001806 <HAL_I2S_RxCpltCallback>
}
 800183e:	e7f3      	b.n	8001828 <I2S_Receive_IT+0x20>

08001840 <HAL_I2S_ErrorCallback>:
}
 8001840:	4770      	bx	lr

08001842 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001842:	b510      	push	{r4, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001848:	6802      	ldr	r2, [r0, #0]
 800184a:	6893      	ldr	r3, [r2, #8]
 800184c:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800184e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b04      	cmp	r3, #4
 8001856:	d006      	beq.n	8001866 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001858:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b03      	cmp	r3, #3
 8001860:	d02c      	beq.n	80018bc <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001862:	b004      	add	sp, #16
 8001864:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001866:	9b03      	ldr	r3, [sp, #12]
 8001868:	f013 0f01 	tst.w	r3, #1
 800186c:	d003      	beq.n	8001876 <I2S_IRQHandler+0x34>
 800186e:	6853      	ldr	r3, [r2, #4]
 8001870:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001874:	d11f      	bne.n	80018b6 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001876:	9b03      	ldr	r3, [sp, #12]
 8001878:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800187c:	d0ec      	beq.n	8001858 <I2S_IRQHandler+0x16>
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	f012 0f20 	tst.w	r2, #32
 8001886:	d0e7      	beq.n	8001858 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800188e:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001890:	2300      	movs	r3, #0
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	9201      	str	r2, [sp, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80018a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff ffc6 	bl	8001840 <HAL_I2S_ErrorCallback>
 80018b4:	e7d0      	b.n	8001858 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 80018b6:	f7ff ffa7 	bl	8001808 <I2S_Receive_IT>
 80018ba:	e7dc      	b.n	8001876 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80018bc:	9b03      	ldr	r3, [sp, #12]
 80018be:	f013 0f02 	tst.w	r3, #2
 80018c2:	d004      	beq.n	80018ce <I2S_IRQHandler+0x8c>
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80018cc:	d11d      	bne.n	800190a <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80018ce:	9b03      	ldr	r3, [sp, #12]
 80018d0:	f013 0f08 	tst.w	r3, #8
 80018d4:	d0c5      	beq.n	8001862 <I2S_IRQHandler+0x20>
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	f012 0f20 	tst.w	r2, #32
 80018de:	d0c0      	beq.n	8001862 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80018e6:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80018e8:	2300      	movs	r3, #0
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80018fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff ff9c 	bl	8001840 <HAL_I2S_ErrorCallback>
}
 8001908:	e7ab      	b.n	8001862 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 800190a:	4620      	mov	r0, r4
 800190c:	f7ff ff5f 	bl	80017ce <I2S_Transmit_IT>
 8001910:	e7dd      	b.n	80018ce <I2S_IRQHandler+0x8c>

08001912 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001912:	4770      	bx	lr

08001914 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001914:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001916:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001918:	1c9a      	adds	r2, r3, #2
 800191a:	6242      	str	r2, [r0, #36]	@ 0x24
 800191c:	6802      	ldr	r2, [r0, #0]
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001922:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	3b01      	subs	r3, #1
 8001928:	b29b      	uxth	r3, r3
 800192a:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800192c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800192e:	b29b      	uxth	r3, r3
 8001930:	b93b      	cbnz	r3, 8001942 <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001932:	6802      	ldr	r2, [r0, #0]
 8001934:	6853      	ldr	r3, [r2, #4]
 8001936:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800193a:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 800193c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800193e:	b29b      	uxth	r3, r3
 8001940:	b103      	cbz	r3, 8001944 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001942:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001944:	2301      	movs	r3, #1
 8001946:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800194a:	f7ff ffe2 	bl	8001912 <HAL_I2SEx_TxRxCpltCallback>
}
 800194e:	e7f8      	b.n	8001942 <I2SEx_TxISR_I2S+0x2e>

08001950 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001950:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001952:	6802      	ldr	r2, [r0, #0]
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <I2SEx_RxISR_I2SExt+0x5c>)
 8001956:	429a      	cmp	r2, r3
 8001958:	d01c      	beq.n	8001994 <I2SEx_RxISR_I2SExt+0x44>
 800195a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001962:	1c99      	adds	r1, r3, #2
 8001964:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8001966:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001968:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29b      	uxth	r3, r3
 8001970:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001972:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001974:	b29b      	uxth	r3, r3
 8001976:	b963      	cbnz	r3, 8001992 <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001978:	6802      	ldr	r2, [r0, #0]
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <I2SEx_RxISR_I2SExt+0x5c>)
 800197c:	429a      	cmp	r2, r3
 800197e:	d00c      	beq.n	800199a <I2SEx_RxISR_I2SExt+0x4a>
 8001980:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001984:	6853      	ldr	r3, [r2, #4]
 8001986:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800198a:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 800198c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	b12b      	cbz	r3, 800199e <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001992:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001994:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001998:	e7e1      	b.n	800195e <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <I2SEx_RxISR_I2SExt+0x60>)
 800199c:	e7f2      	b.n	8001984 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 800199e:	2301      	movs	r3, #1
 80019a0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80019a4:	f7ff ffb5 	bl	8001912 <HAL_I2SEx_TxRxCpltCallback>
}
 80019a8:	e7f3      	b.n	8001992 <I2SEx_RxISR_I2SExt+0x42>
 80019aa:	bf00      	nop
 80019ac:	40003800 	.word	0x40003800
 80019b0:	40003400 	.word	0x40003400

080019b4 <I2SEx_TxISR_I2SExt>:
{
 80019b4:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80019b6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80019b8:	1c9a      	adds	r2, r3, #2
 80019ba:	6242      	str	r2, [r0, #36]	@ 0x24
 80019bc:	881a      	ldrh	r2, [r3, #0]
 80019be:	6801      	ldr	r1, [r0, #0]
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <I2SEx_TxISR_I2SExt+0x5c>)
 80019c2:	4299      	cmp	r1, r3
 80019c4:	d018      	beq.n	80019f8 <I2SEx_TxISR_I2SExt+0x44>
 80019c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80019ca:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80019cc:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2s->TxXferCount == 0U)
 80019d6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b963      	cbnz	r3, 80019f6 <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019dc:	6802      	ldr	r2, [r0, #0]
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <I2SEx_TxISR_I2SExt+0x5c>)
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d00c      	beq.n	80019fe <I2SEx_TxISR_I2SExt+0x4a>
 80019e4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80019e8:	6853      	ldr	r3, [r2, #4]
 80019ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80019ee:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 80019f0:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b12b      	cbz	r3, 8001a02 <I2SEx_TxISR_I2SExt+0x4e>
}
 80019f6:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80019f8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80019fc:	e7e5      	b.n	80019ca <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <I2SEx_TxISR_I2SExt+0x60>)
 8001a00:	e7f2      	b.n	80019e8 <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001a08:	f7ff ff83 	bl	8001912 <HAL_I2SEx_TxRxCpltCallback>
}
 8001a0c:	e7f3      	b.n	80019f6 <I2SEx_TxISR_I2SExt+0x42>
 8001a0e:	bf00      	nop
 8001a10:	40003800 	.word	0x40003800
 8001a14:	40003400 	.word	0x40003400

08001a18 <I2SEx_RxISR_I2S>:
{
 8001a18:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001a1a:	6803      	ldr	r3, [r0, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a20:	1c99      	adds	r1, r3, #2
 8001a22:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8001a24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001a26:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	8643      	strh	r3, [r0, #50]	@ 0x32
  if (hi2s->RxXferCount == 0U)
 8001a30:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	b93b      	cbnz	r3, 8001a46 <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a36:	6802      	ldr	r2, [r0, #0]
 8001a38:	6853      	ldr	r3, [r2, #4]
 8001a3a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001a3e:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001a40:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b103      	cbz	r3, 8001a48 <I2SEx_RxISR_I2S+0x30>
}
 8001a46:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001a4e:	f7ff ff60 	bl	8001912 <HAL_I2SEx_TxRxCpltCallback>
}
 8001a52:	e7f8      	b.n	8001a46 <I2SEx_RxISR_I2S+0x2e>

08001a54 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001a54:	b510      	push	{r4, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001a5a:	6803      	ldr	r3, [r0, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a60:	4a70      	ldr	r2, [pc, #448]	@ (8001c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d06f      	beq.n	8001b46 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8001a66:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001a6a:	6891      	ldr	r1, [r2, #8]
 8001a6c:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001a72:	6853      	ldr	r3, [r2, #4]
 8001a74:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a76:	6863      	ldr	r3, [r4, #4]
 8001a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d170      	bne.n	8001b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001a82:	9b05      	ldr	r3, [sp, #20]
 8001a84:	f013 0f02 	tst.w	r3, #2
 8001a88:	d003      	beq.n	8001a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 8001a8a:	9b03      	ldr	r3, [sp, #12]
 8001a8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a90:	d15c      	bne.n	8001b4c <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001a92:	9b04      	ldr	r3, [sp, #16]
 8001a94:	f013 0f01 	tst.w	r3, #1
 8001a98:	d003      	beq.n	8001aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8001a9a:	9b02      	ldr	r3, [sp, #8]
 8001a9c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001aa0:	d158      	bne.n	8001b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001aa2:	9b04      	ldr	r3, [sp, #16]
 8001aa4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001aa8:	d024      	beq.n	8001af4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 8001aaa:	9b02      	ldr	r3, [sp, #8]
 8001aac:	f013 0f20 	tst.w	r3, #32
 8001ab0:	d020      	beq.n	8001af4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ab2:	6822      	ldr	r2, [r4, #0]
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d050      	beq.n	8001b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8001aba:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001abe:	6853      	ldr	r3, [r2, #4]
 8001ac0:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001ac4:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	6853      	ldr	r3, [r2, #4]
 8001aca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001ace:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	9200      	str	r2, [sp, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ae6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff fea6 	bl	8001840 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001af4:	9b05      	ldr	r3, [sp, #20]
 8001af6:	f013 0f08 	tst.w	r3, #8
 8001afa:	d022      	beq.n	8001b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001afc:	9b03      	ldr	r3, [sp, #12]
 8001afe:	f013 0f20 	tst.w	r3, #32
 8001b02:	d01e      	beq.n	8001b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b04:	6822      	ldr	r2, [r4, #0]
 8001b06:	6853      	ldr	r3, [r2, #4]
 8001b08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001b0c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	4b44      	ldr	r3, [pc, #272]	@ (8001c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d024      	beq.n	8001b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001b16:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001b1a:	6853      	ldr	r3, [r2, #4]
 8001b1c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001b20:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b22:	2300      	movs	r3, #0
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b34:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff fe7f 	bl	8001840 <HAL_I2S_ErrorCallback>
}
 8001b42:	b006      	add	sp, #24
 8001b44:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001b46:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8001b4a:	e78e      	b.n	8001a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f7ff fee1 	bl	8001914 <I2SEx_TxISR_I2S>
 8001b52:	e79e      	b.n	8001a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff fefb 	bl	8001950 <I2SEx_RxISR_I2SExt>
 8001b5a:	e7a2      	b.n	8001aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b5c:	4a32      	ldr	r2, [pc, #200]	@ (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001b5e:	e7ae      	b.n	8001abe <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b60:	4a31      	ldr	r2, [pc, #196]	@ (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001b62:	e7da      	b.n	8001b1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001b64:	9b04      	ldr	r3, [sp, #16]
 8001b66:	f013 0f02 	tst.w	r3, #2
 8001b6a:	d003      	beq.n	8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8001b6c:	9b02      	ldr	r3, [sp, #8]
 8001b6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b72:	d14a      	bne.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001b74:	9b05      	ldr	r3, [sp, #20]
 8001b76:	f013 0f01 	tst.w	r3, #1
 8001b7a:	d003      	beq.n	8001b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8001b7c:	9b03      	ldr	r3, [sp, #12]
 8001b7e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001b82:	d146      	bne.n	8001c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b84:	9b05      	ldr	r3, [sp, #20]
 8001b86:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001b8a:	d01c      	beq.n	8001bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8001b8c:	9b03      	ldr	r3, [sp, #12]
 8001b8e:	f013 0f20 	tst.w	r3, #32
 8001b92:	d018      	beq.n	8001bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b94:	6822      	ldr	r2, [r4, #0]
 8001b96:	6853      	ldr	r3, [r2, #4]
 8001b98:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001b9c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b9e:	6822      	ldr	r2, [r4, #0]
 8001ba0:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d039      	beq.n	8001c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8001ba6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001baa:	6853      	ldr	r3, [r2, #4]
 8001bac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001bb0:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bb8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f7ff fe3d 	bl	8001840 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001bc6:	9b04      	ldr	r3, [sp, #16]
 8001bc8:	f013 0f08 	tst.w	r3, #8
 8001bcc:	d0b9      	beq.n	8001b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001bce:	9b02      	ldr	r3, [sp, #8]
 8001bd0:	f013 0f20 	tst.w	r3, #32
 8001bd4:	d0b5      	beq.n	8001b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bd6:	6822      	ldr	r2, [r4, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d01f      	beq.n	8001c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001bde:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001be2:	6853      	ldr	r3, [r2, #4]
 8001be4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001be8:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	6853      	ldr	r3, [r2, #4]
 8001bee:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001bf2:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bfa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7ff fe1c 	bl	8001840 <HAL_I2S_ErrorCallback>
}
 8001c08:	e79b      	b.n	8001b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fed2 	bl	80019b4 <I2SEx_TxISR_I2SExt>
 8001c10:	e7b0      	b.n	8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff ff00 	bl	8001a18 <I2SEx_RxISR_I2S>
 8001c18:	e7b4      	b.n	8001b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c1a:	4a03      	ldr	r2, [pc, #12]	@ (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001c1c:	e7c5      	b.n	8001baa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c1e:	4a02      	ldr	r2, [pc, #8]	@ (8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001c20:	e7df      	b.n	8001be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8001c22:	bf00      	nop
 8001c24:	40003800 	.word	0x40003800
 8001c28:	40003400 	.word	0x40003400

08001c2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c30:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c32:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001c36:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8001c3a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001c3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d854      	bhi.n	8001cf0 <PCD_WriteEmptyTxFifo+0xc4>
 8001c46:	4607      	mov	r7, r0
 8001c48:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c4a:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001c4c:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8001c50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001c54:	69d2      	ldr	r2, [r2, #28]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d300      	bcc.n	8001c5c <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8001c5a:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001c5c:	f102 0903 	add.w	r9, r2, #3
 8001c60:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c64:	e015      	b.n	8001c92 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001c66:	f106 0903 	add.w	r9, r6, #3
 8001c6a:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001c70:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8001c74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001c78:	6a29      	ldr	r1, [r5, #32]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	b2b3      	uxth	r3, r6
 8001c7e:	b2e2      	uxtb	r2, r4
 8001c80:	4640      	mov	r0, r8
 8001c82:	f001 fd2e 	bl	80036e2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001c86:	6a2b      	ldr	r3, [r5, #32]
 8001c88:	4433      	add	r3, r6
 8001c8a:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8001c8c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001c8e:	4433      	add	r3, r6
 8001c90:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c92:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8001c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c9e:	454b      	cmp	r3, r9
 8001ca0:	d312      	bcc.n	8001cc8 <PCD_WriteEmptyTxFifo+0x9c>
 8001ca2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ca6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001caa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d20a      	bcs.n	8001cc8 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001cb2:	b14b      	cbz	r3, 8001cc8 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8001cb4:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8001cb6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001cba:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001cbe:	69d6      	ldr	r6, [r2, #28]
 8001cc0:	429e      	cmp	r6, r3
 8001cc2:	d3d0      	bcc.n	8001c66 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8001cc4:	461e      	mov	r6, r3
 8001cc6:	e7ce      	b.n	8001c66 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001cc8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ccc:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d80f      	bhi.n	8001cf8 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cd8:	f004 040f 	and.w	r4, r4, #15
 8001cdc:	2201      	movs	r2, #1
 8001cde:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ce0:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8001ce4:	ea23 0302 	bic.w	r3, r3, r2
 8001ce8:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8001cec:	2000      	movs	r0, #0
 8001cee:	e000      	b.n	8001cf2 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
}
 8001cf2:	b003      	add	sp, #12
 8001cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	e7fa      	b.n	8001cf2 <PCD_WriteEmptyTxFifo+0xc6>

08001cfc <HAL_PCD_Init>:
{
 8001cfc:	b530      	push	{r4, r5, lr}
 8001cfe:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8001d00:	2800      	cmp	r0, #0
 8001d02:	d07a      	beq.n	8001dfa <HAL_PCD_Init+0xfe>
 8001d04:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8001d06:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d08:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8001d0c:	b1c3      	cbz	r3, 8001d40 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 8001d14:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8001d18:	d017      	beq.n	8001d4a <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 8001d1a:	6820      	ldr	r0, [r4, #0]
 8001d1c:	f001 fb04 	bl	8003328 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d20:	7c23      	ldrb	r3, [r4, #16]
 8001d22:	f88d 3000 	strb.w	r3, [sp]
 8001d26:	1d23      	adds	r3, r4, #4
 8001d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2a:	6820      	ldr	r0, [r4, #0]
 8001d2c:	f001 fa3b 	bl	80031a6 <USB_CoreInit>
 8001d30:	b170      	cbz	r0, 8001d50 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001d38:	2501      	movs	r5, #1
}
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	b003      	add	sp, #12
 8001d3e:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001d40:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8001d44:	f003 faf6 	bl	8005334 <HAL_PCD_MspInit>
 8001d48:	e7e1      	b.n	8001d0e <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71a3      	strb	r3, [r4, #6]
 8001d4e:	e7e4      	b.n	8001d1a <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d50:	2100      	movs	r1, #0
 8001d52:	6820      	ldr	r0, [r4, #0]
 8001d54:	f001 fedb 	bl	8003b0e <USB_SetCurrentMode>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	b908      	cbnz	r0, 8001d60 <HAL_PCD_Init+0x64>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	e017      	b.n	8001d90 <HAL_PCD_Init+0x94>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d60:	2302      	movs	r3, #2
 8001d62:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001d66:	2501      	movs	r5, #1
 8001d68:	e7e7      	b.n	8001d3a <HAL_PCD_Init+0x3e>
    hpcd->IN_ep[i].is_in = 1U;
 8001d6a:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001d6e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001d72:	2001      	movs	r0, #1
 8001d74:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8001d76:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d78:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d7e:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d80:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d82:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001d86:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001d8a:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	7920      	ldrb	r0, [r4, #4]
 8001d92:	4298      	cmp	r0, r3
 8001d94:	d8e9      	bhi.n	8001d6a <HAL_PCD_Init+0x6e>
 8001d96:	e016      	b.n	8001dc6 <HAL_PCD_Init+0xca>
    hpcd->OUT_ep[i].is_in = 0U;
 8001d98:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001d9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001da0:	2100      	movs	r1, #0
 8001da2:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8001da6:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001daa:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dae:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001db2:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001db6:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001dba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dbe:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc2:	3201      	adds	r2, #1
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	4290      	cmp	r0, r2
 8001dc8:	d8e6      	bhi.n	8001d98 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dca:	7c23      	ldrb	r3, [r4, #16]
 8001dcc:	f88d 3000 	strb.w	r3, [sp]
 8001dd0:	1d23      	adds	r3, r4, #4
 8001dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd4:	6820      	ldr	r0, [r4, #0]
 8001dd6:	f001 fafd 	bl	80033d4 <USB_DevInit>
 8001dda:	4605      	mov	r5, r0
 8001ddc:	b120      	cbz	r0, 8001de8 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001de4:	2501      	movs	r5, #1
 8001de6:	e7a8      	b.n	8001d3a <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8001df2:	6820      	ldr	r0, [r4, #0]
 8001df4:	f001 fe4a 	bl	8003a8c <USB_DevDisconnect>
  return HAL_OK;
 8001df8:	e79f      	b.n	8001d3a <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8001dfa:	2501      	movs	r5, #1
 8001dfc:	e79d      	b.n	8001d3a <HAL_PCD_Init+0x3e>

08001dfe <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dfe:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8001e00:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8001e04:	2a01      	cmp	r2, #1
 8001e06:	d01a      	beq.n	8001e3e <HAL_PCD_Start+0x40>
{
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001e18:	d002      	beq.n	8001e20 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e1a:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e1c:	2a01      	cmp	r2, #1
 8001e1e:	d009      	beq.n	8001e34 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8001e20:	6820      	ldr	r0, [r4, #0]
 8001e22:	f001 fa7b 	bl	800331c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e26:	6820      	ldr	r0, [r4, #0]
 8001e28:	f001 fe22 	bl	8003a70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001e32:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e36:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e3c:	e7f0      	b.n	8001e20 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8001e3e:	2002      	movs	r0, #2
}
 8001e40:	4770      	bx	lr

08001e42 <HAL_PCD_Stop>:
{
 8001e42:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e44:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 8001e46:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d01d      	beq.n	8001e8a <HAL_PCD_Stop+0x48>
 8001e4e:	4604      	mov	r4, r0
 8001e50:	2301      	movs	r3, #1
 8001e52:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8001e56:	4628      	mov	r0, r5
 8001e58:	f001 fa66 	bl	8003328 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e5c:	6820      	ldr	r0, [r4, #0]
 8001e5e:	f001 fe15 	bl	8003a8c <USB_DevDisconnect>
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e62:	2110      	movs	r1, #16
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	f001 fa65 	bl	8003334 <USB_FlushTxFifo>
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e6a:	68eb      	ldr	r3, [r5, #12]
 8001e6c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001e70:	d002      	beq.n	8001e78 <HAL_PCD_Stop+0x36>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e72:	7b63      	ldrb	r3, [r4, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d003      	beq.n	8001e80 <HAL_PCD_Stop+0x3e>
  __HAL_UNLOCK(hpcd);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001e7e:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001e80:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e86:	63ab      	str	r3, [r5, #56]	@ 0x38
 8001e88:	e7f6      	b.n	8001e78 <HAL_PCD_Stop+0x36>
  __HAL_LOCK(hpcd);
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	e7f7      	b.n	8001e7e <HAL_PCD_Stop+0x3c>
	...

08001e90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	4604      	mov	r4, r0
 8001e94:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e96:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001e98:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e9a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ea2:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ea4:	79a1      	ldrb	r1, [r4, #6]
 8001ea6:	2901      	cmp	r1, #1
 8001ea8:	d011      	beq.n	8001ece <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001eaa:	4938      	ldr	r1, [pc, #224]	@ (8001f8c <PCD_EP_OutXfrComplete_int+0xfc>)
 8001eac:	428e      	cmp	r6, r1
 8001eae:	d056      	beq.n	8001f5e <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001eb0:	b93d      	cbnz	r5, 8001ec2 <PCD_EP_OutXfrComplete_int+0x32>
 8001eb2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001eb6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001eba:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d05e      	beq.n	8001f80 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ec2:	b2e9      	uxtb	r1, r5
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f003 fa87 	bl	80053d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001eca:	2000      	movs	r0, #0
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ece:	f012 0f08 	tst.w	r2, #8
 8001ed2:	d009      	beq.n	8001ee8 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ed4:	492e      	ldr	r1, [pc, #184]	@ (8001f90 <PCD_EP_OutXfrComplete_int+0x100>)
 8001ed6:	428e      	cmp	r6, r1
 8001ed8:	d9f7      	bls.n	8001eca <PCD_EP_OutXfrComplete_int+0x3a>
 8001eda:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001ede:	d0f4      	beq.n	8001eca <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ee0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	e7f0      	b.n	8001eca <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ee8:	f012 0f20 	tst.w	r2, #32
 8001eec:	d002      	beq.n	8001ef4 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001eee:	2220      	movs	r2, #32
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	e7ea      	b.n	8001eca <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001ef4:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8001ef8:	d1e7      	bne.n	8001eca <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001efa:	4925      	ldr	r1, [pc, #148]	@ (8001f90 <PCD_EP_OutXfrComplete_int+0x100>)
 8001efc:	428e      	cmp	r6, r1
 8001efe:	d906      	bls.n	8001f0e <PCD_EP_OutXfrComplete_int+0x7e>
 8001f00:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001f04:	d003      	beq.n	8001f0e <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f06:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	e7dd      	b.n	8001eca <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f0e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001f12:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001f16:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f20:	1acb      	subs	r3, r1, r3
 8001f22:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8001f26:	b97d      	cbnz	r5, 8001f48 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8001f28:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001f2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001f30:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8001f34:	b16a      	cbz	r2, 8001f52 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8001f36:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001f3a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001f3e:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8001f42:	4419      	add	r1, r3
 8001f44:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f48:	b2e9      	uxtb	r1, r5
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f003 fa44 	bl	80053d8 <HAL_PCD_DataOutStageCallback>
 8001f50:	e7bb      	b.n	8001eca <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f52:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001f56:	2101      	movs	r1, #1
 8001f58:	f001 fe18 	bl	8003b8c <USB_EP0_OutStart>
 8001f5c:	e7f4      	b.n	8001f48 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f5e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001f62:	d003      	beq.n	8001f6c <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	e7ae      	b.n	8001eca <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f6c:	f012 0f20 	tst.w	r2, #32
 8001f70:	d001      	beq.n	8001f76 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f72:	2220      	movs	r2, #32
 8001f74:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f76:	b2e9      	uxtb	r1, r5
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f003 fa2d 	bl	80053d8 <HAL_PCD_DataOutStageCallback>
 8001f7e:	e7a4      	b.n	8001eca <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f80:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001f84:	2100      	movs	r1, #0
 8001f86:	f001 fe01 	bl	8003b8c <USB_EP0_OutStart>
 8001f8a:	e79a      	b.n	8001ec2 <PCD_EP_OutXfrComplete_int+0x32>
 8001f8c:	4f54310a 	.word	0x4f54310a
 8001f90:	4f54300a 	.word	0x4f54300a

08001f94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f98:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001f9a:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f9c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001fa0:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001fa6:	4295      	cmp	r5, r2
 8001fa8:	d907      	bls.n	8001fba <PCD_EP_OutSetupPacket_int+0x26>
 8001faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fae:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8001fb2:	d002      	beq.n	8001fba <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fb4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001fb8:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f003 fa04 	bl	80053c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001fc0:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001fc2:	429d      	cmp	r5, r3
 8001fc4:	d902      	bls.n	8001fcc <PCD_EP_OutSetupPacket_int+0x38>
 8001fc6:	79a3      	ldrb	r3, [r4, #6]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d001      	beq.n	8001fd0 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001fcc:	2000      	movs	r0, #0
 8001fce:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fd0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	f001 fdd8 	bl	8003b8c <USB_EP0_OutStart>
 8001fdc:	e7f6      	b.n	8001fcc <PCD_EP_OutSetupPacket_int+0x38>
 8001fde:	bf00      	nop
 8001fe0:	4f54300a 	.word	0x4f54300a

08001fe4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001fe4:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d00c      	beq.n	8002006 <HAL_PCD_SetAddress+0x22>
{
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ff6:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ff8:	6800      	ldr	r0, [r0, #0]
 8001ffa:	f001 fd29 	bl	8003a50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002004:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002006:	2002      	movs	r0, #2
}
 8002008:	4770      	bx	lr

0800200a <HAL_PCD_EP_Open>:
{
 800200a:	b538      	push	{r3, r4, r5, lr}
 800200c:	4605      	mov	r5, r0
 800200e:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002010:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002014:	d12b      	bne.n	800206e <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002016:	f001 0e0f 	and.w	lr, r1, #15
 800201a:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800201e:	00a4      	lsls	r4, r4, #2
 8002020:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8002024:	4404      	add	r4, r0
 8002026:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8002028:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800202c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8002030:	2000      	movs	r0, #0
 8002032:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8002036:	f00c 0c0f 	and.w	ip, ip, #15
 800203a:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800203e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002042:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8002044:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8002046:	784a      	ldrb	r2, [r1, #1]
 8002048:	b10a      	cbz	r2, 800204e <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 800204a:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 800204e:	2b02      	cmp	r3, #2
 8002050:	d01c      	beq.n	800208c <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 8002052:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8002056:	2b01      	cmp	r3, #1
 8002058:	d01b      	beq.n	8002092 <HAL_PCD_EP_Open+0x88>
 800205a:	2301      	movs	r3, #1
 800205c:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002060:	6828      	ldr	r0, [r5, #0]
 8002062:	f001 fa92 	bl	800358a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002066:	2000      	movs	r0, #0
 8002068:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 800206c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206e:	f001 000f 	and.w	r0, r1, #15
 8002072:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8002076:	0089      	lsls	r1, r1, #2
 8002078:	3110      	adds	r1, #16
 800207a:	4429      	add	r1, r5
 800207c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800207e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002082:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002086:	2401      	movs	r4, #1
 8002088:	7544      	strb	r4, [r0, #21]
 800208a:	e7d4      	b.n	8002036 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	714b      	strb	r3, [r1, #5]
 8002090:	e7df      	b.n	8002052 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8002092:	2002      	movs	r0, #2
 8002094:	e7ea      	b.n	800206c <HAL_PCD_EP_Open+0x62>

08002096 <HAL_PCD_EP_Receive>:
{
 8002096:	b510      	push	{r4, lr}
 8002098:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209a:	f001 0c0f 	and.w	ip, r1, #15
 800209e:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80020a2:	0089      	lsls	r1, r1, #2
 80020a4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80020a8:	4401      	add	r1, r0
 80020aa:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80020ac:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80020b0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80020b4:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80020b8:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80020c2:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c6:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80020ca:	7982      	ldrb	r2, [r0, #6]
 80020cc:	2a01      	cmp	r2, #1
 80020ce:	d004      	beq.n	80020da <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020d0:	6800      	ldr	r0, [r0, #0]
 80020d2:	f001 fb1d 	bl	8003710 <USB_EPStartXfer>
}
 80020d6:	2000      	movs	r0, #0
 80020d8:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80020da:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80020de:	e7f7      	b.n	80020d0 <HAL_PCD_EP_Receive+0x3a>

080020e0 <HAL_PCD_EP_Transmit>:
{
 80020e0:	b510      	push	{r4, lr}
 80020e2:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e4:	f001 0c0f 	and.w	ip, r1, #15
 80020e8:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80020ec:	0089      	lsls	r1, r1, #2
 80020ee:	3110      	adds	r1, #16
 80020f0:	4401      	add	r1, r0
 80020f2:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80020f4:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80020f8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80020fc:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8002100:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 800210a:	2301      	movs	r3, #1
 800210c:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002110:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8002114:	7982      	ldrb	r2, [r0, #6]
 8002116:	429a      	cmp	r2, r3
 8002118:	d004      	beq.n	8002124 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211a:	6800      	ldr	r0, [r0, #0]
 800211c:	f001 faf8 	bl	8003710 <USB_EPStartXfer>
}
 8002120:	2000      	movs	r0, #0
 8002122:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002124:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8002128:	e7f7      	b.n	800211a <HAL_PCD_EP_Transmit+0x3a>

0800212a <HAL_PCD_EP_SetStall>:
{
 800212a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800212c:	f001 050f 	and.w	r5, r1, #15
 8002130:	7902      	ldrb	r2, [r0, #4]
 8002132:	42aa      	cmp	r2, r5
 8002134:	d338      	bcc.n	80021a8 <HAL_PCD_EP_SetStall+0x7e>
 8002136:	4604      	mov	r4, r0
 8002138:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800213a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800213e:	d11f      	bne.n	8002180 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8002140:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002144:	0089      	lsls	r1, r1, #2
 8002146:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800214a:	4401      	add	r1, r0
 800214c:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800214e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002152:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800215c:	2301      	movs	r3, #1
 800215e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002160:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002162:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002166:	2b01      	cmp	r3, #1
 8002168:	d020      	beq.n	80021ac <HAL_PCD_EP_SetStall+0x82>
 800216a:	2301      	movs	r3, #1
 800216c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002170:	6820      	ldr	r0, [r4, #0]
 8002172:	f001 fc12 	bl	800399a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002176:	b185      	cbz	r5, 800219a <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8002178:	2000      	movs	r0, #0
 800217a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800217e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002180:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8002184:	0089      	lsls	r1, r1, #2
 8002186:	3110      	adds	r1, #16
 8002188:	4401      	add	r1, r0
 800218a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800218c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8002190:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002194:	2201      	movs	r2, #1
 8002196:	755a      	strb	r2, [r3, #21]
 8002198:	e7e0      	b.n	800215c <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800219a:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800219e:	79a1      	ldrb	r1, [r4, #6]
 80021a0:	6820      	ldr	r0, [r4, #0]
 80021a2:	f001 fcf3 	bl	8003b8c <USB_EP0_OutStart>
 80021a6:	e7e7      	b.n	8002178 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
 80021aa:	e7e8      	b.n	800217e <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80021ac:	2002      	movs	r0, #2
 80021ae:	e7e6      	b.n	800217e <HAL_PCD_EP_SetStall+0x54>

080021b0 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021b0:	f001 030f 	and.w	r3, r1, #15
 80021b4:	7902      	ldrb	r2, [r0, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d330      	bcc.n	800221c <HAL_PCD_EP_ClrStall+0x6c>
{
 80021ba:	b510      	push	{r4, lr}
 80021bc:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80021be:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80021c2:	d11e      	bne.n	8002202 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80021c8:	0089      	lsls	r1, r1, #2
 80021ca:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80021ce:	4401      	add	r1, r0
 80021d0:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80021d2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80021d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80021da:	2000      	movs	r0, #0
 80021dc:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80021e0:	2200      	movs	r2, #0
 80021e2:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80021e6:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d018      	beq.n	8002220 <HAL_PCD_EP_ClrStall+0x70>
 80021ee:	2301      	movs	r3, #1
 80021f0:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	f001 fbfd 	bl	80039f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002200:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002202:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002206:	0089      	lsls	r1, r1, #2
 8002208:	3110      	adds	r1, #16
 800220a:	4401      	add	r1, r0
 800220c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800220e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002212:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002216:	2001      	movs	r0, #1
 8002218:	7550      	strb	r0, [r2, #21]
 800221a:	e7e1      	b.n	80021e0 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800221c:	2001      	movs	r0, #1
}
 800221e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002220:	2002      	movs	r0, #2
 8002222:	e7ed      	b.n	8002200 <HAL_PCD_EP_ClrStall+0x50>

08002224 <HAL_PCD_EP_Abort>:
{
 8002224:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8002226:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800222a:	d10c      	bne.n	8002246 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222c:	f001 010f 	and.w	r1, r1, #15
 8002230:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002234:	0089      	lsls	r1, r1, #2
 8002236:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800223a:	4401      	add	r1, r0
 800223c:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800223e:	6800      	ldr	r0, [r0, #0]
 8002240:	f001 f9f0 	bl	8003624 <USB_EPStopXfer>
}
 8002244:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002246:	f001 010f 	and.w	r1, r1, #15
 800224a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800224e:	0089      	lsls	r1, r1, #2
 8002250:	3110      	adds	r1, #16
 8002252:	4401      	add	r1, r0
 8002254:	3104      	adds	r1, #4
 8002256:	e7f2      	b.n	800223e <HAL_PCD_EP_Abort+0x1a>

08002258 <HAL_PCD_IRQHandler>:
{
 8002258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800225c:	b083      	sub	sp, #12
 800225e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002260:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002262:	4628      	mov	r0, r5
 8002264:	f001 fc4f 	bl	8003b06 <USB_GetMode>
 8002268:	b110      	cbz	r0, 8002270 <HAL_PCD_IRQHandler+0x18>
}
 800226a:	b003      	add	sp, #12
 800226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002270:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002272:	6820      	ldr	r0, [r4, #0]
 8002274:	f001 fc18 	bl	8003aa8 <USB_ReadInterrupts>
 8002278:	2800      	cmp	r0, #0
 800227a:	d0f6      	beq.n	800226a <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800227c:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002286:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800228a:	6820      	ldr	r0, [r4, #0]
 800228c:	f001 fc0c 	bl	8003aa8 <USB_ReadInterrupts>
 8002290:	f010 0f02 	tst.w	r0, #2
 8002294:	d004      	beq.n	80022a0 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002296:	6822      	ldr	r2, [r4, #0]
 8002298:	6953      	ldr	r3, [r2, #20]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022a0:	6820      	ldr	r0, [r4, #0]
 80022a2:	f001 fc01 	bl	8003aa8 <USB_ReadInterrupts>
 80022a6:	f010 0f10 	tst.w	r0, #16
 80022aa:	d015      	beq.n	80022d8 <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	6993      	ldr	r3, [r2, #24]
 80022b0:	f023 0310 	bic.w	r3, r3, #16
 80022b4:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 80022b6:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022ba:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022be:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 80022c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022c6:	d04c      	beq.n	8002362 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80022cc:	d06f      	beq.n	80023ae <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ce:	6822      	ldr	r2, [r4, #0]
 80022d0:	6993      	ldr	r3, [r2, #24]
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022d8:	6820      	ldr	r0, [r4, #0]
 80022da:	f001 fbe5 	bl	8003aa8 <USB_ReadInterrupts>
 80022de:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 80022e2:	d176      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022e4:	6820      	ldr	r0, [r4, #0]
 80022e6:	f001 fbdf 	bl	8003aa8 <USB_ReadInterrupts>
 80022ea:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80022ee:	f040 80e0 	bne.w	80024b2 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022f2:	6820      	ldr	r0, [r4, #0]
 80022f4:	f001 fbd8 	bl	8003aa8 <USB_ReadInterrupts>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	f2c0 8161 	blt.w	80025c0 <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022fe:	6820      	ldr	r0, [r4, #0]
 8002300:	f001 fbd2 	bl	8003aa8 <USB_ReadInterrupts>
 8002304:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8002308:	d009      	beq.n	800231e <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f013 0f01 	tst.w	r3, #1
 8002310:	f040 816e 	bne.w	80025f0 <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002314:	6822      	ldr	r2, [r4, #0]
 8002316:	6953      	ldr	r3, [r2, #20]
 8002318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800231c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800231e:	6820      	ldr	r0, [r4, #0]
 8002320:	f001 fbc2 	bl	8003aa8 <USB_ReadInterrupts>
 8002324:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8002328:	f040 8166 	bne.w	80025f8 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800232c:	6820      	ldr	r0, [r4, #0]
 800232e:	f001 fbbb 	bl	8003aa8 <USB_ReadInterrupts>
 8002332:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8002336:	f040 81b3 	bne.w	80026a0 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800233a:	6820      	ldr	r0, [r4, #0]
 800233c:	f001 fbb4 	bl	8003aa8 <USB_ReadInterrupts>
 8002340:	f010 0f08 	tst.w	r0, #8
 8002344:	f040 81c4 	bne.w	80026d0 <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002348:	6820      	ldr	r0, [r4, #0]
 800234a:	f001 fbad 	bl	8003aa8 <USB_ReadInterrupts>
 800234e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002352:	f000 81d7 	beq.w	8002704 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002356:	69ab      	ldr	r3, [r5, #24]
 8002358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800235c:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800235e:	2601      	movs	r6, #1
 8002360:	e1c0      	b.n	80026e4 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002362:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002366:	ea18 0f03 	tst.w	r8, r3
 800236a:	d0b0      	beq.n	80022ce <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800236c:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002370:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 800237a:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 800237e:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8002382:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8002386:	4628      	mov	r0, r5
 8002388:	f001 fae4 	bl	8003954 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800238c:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8002390:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8002394:	4453      	add	r3, sl
 8002396:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800239a:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 800239e:	9a01      	ldr	r2, [sp, #4]
 80023a0:	444a      	add	r2, r9
 80023a2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80023a6:	4453      	add	r3, sl
 80023a8:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 80023ac:	e78f      	b.n	80022ce <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023ae:	2208      	movs	r2, #8
 80023b0:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80023b4:	4628      	mov	r0, r5
 80023b6:	f001 facd 	bl	8003954 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ba:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80023be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80023c2:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80023c6:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80023ca:	4442      	add	r2, r8
 80023cc:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 80023d0:	e77d      	b.n	80022ce <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023d2:	6820      	ldr	r0, [r4, #0]
 80023d4:	f001 fb6c 	bl	8003ab0 <USB_ReadDevAllOutEpInterrupt>
 80023d8:	4680      	mov	r8, r0
      epnum = 0U;
 80023da:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80023dc:	e035      	b.n	800244a <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023de:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80023e2:	2201      	movs	r2, #1
 80023e4:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023e8:	4649      	mov	r1, r9
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7ff fd50 	bl	8001e90 <PCD_EP_OutXfrComplete_int>
 80023f0:	e03c      	b.n	800246c <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023f2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80023f6:	2208      	movs	r2, #8
 80023f8:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023fc:	4649      	mov	r1, r9
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff fdc8 	bl	8001f94 <PCD_EP_OutSetupPacket_int>
 8002404:	e035      	b.n	8002472 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8002406:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800240a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800240e:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002412:	2b01      	cmp	r3, #1
 8002414:	d041      	beq.n	800249a <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002416:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800241a:	2202      	movs	r2, #2
 800241c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002420:	f01a 0f20 	tst.w	sl, #32
 8002424:	d004      	beq.n	8002430 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002426:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800242a:	2220      	movs	r2, #32
 800242c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002430:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8002434:	d005      	beq.n	8002442 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002436:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800243a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800243e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8002442:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002446:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800244a:	f1b8 0f00 	cmp.w	r8, #0
 800244e:	f43f af49 	beq.w	80022e4 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8002452:	f018 0f01 	tst.w	r8, #1
 8002456:	d0f4      	beq.n	8002442 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002458:	fa5f fb89 	uxtb.w	fp, r9
 800245c:	4659      	mov	r1, fp
 800245e:	6820      	ldr	r0, [r4, #0]
 8002460:	f001 fb36 	bl	8003ad0 <USB_ReadDevOutEPInterrupt>
 8002464:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002466:	f010 0f01 	tst.w	r0, #1
 800246a:	d1b8      	bne.n	80023de <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800246c:	f01a 0f08 	tst.w	sl, #8
 8002470:	d1bf      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002472:	f01a 0f10 	tst.w	sl, #16
 8002476:	d004      	beq.n	8002482 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002478:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800247c:	2210      	movs	r2, #16
 800247e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002482:	f01a 0f02 	tst.w	sl, #2
 8002486:	d0cb      	beq.n	8002420 <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002488:	696b      	ldr	r3, [r5, #20]
 800248a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800248e:	d0ba      	beq.n	8002406 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	e7b5      	b.n	8002406 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 800249a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800249e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024a8:	4659      	mov	r1, fp
 80024aa:	4620      	mov	r0, r4
 80024ac:	f002 ffe4 	bl	8005478 <HAL_PCD_ISOOUTIncompleteCallback>
 80024b0:	e7b1      	b.n	8002416 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024b2:	6820      	ldr	r0, [r4, #0]
 80024b4:	f001 fb04 	bl	8003ac0 <USB_ReadDevAllInEpInterrupt>
 80024b8:	4680      	mov	r8, r0
      epnum = 0U;
 80024ba:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80024bc:	e025      	b.n	800250a <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024be:	4659      	mov	r1, fp
 80024c0:	4620      	mov	r0, r4
 80024c2:	f002 ff95 	bl	80053f0 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024c6:	f01a 0f08 	tst.w	sl, #8
 80024ca:	d004      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024cc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80024d0:	2208      	movs	r2, #8
 80024d2:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024d6:	f01a 0f10 	tst.w	sl, #16
 80024da:	d004      	beq.n	80024e6 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024dc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80024e0:	2210      	movs	r2, #16
 80024e2:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024e6:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80024ea:	d004      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024ec:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80024f0:	2240      	movs	r2, #64	@ 0x40
 80024f2:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024f6:	f01a 0f02 	tst.w	sl, #2
 80024fa:	d140      	bne.n	800257e <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024fc:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8002500:	d159      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8002502:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002506:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800250a:	f1b8 0f00 	cmp.w	r8, #0
 800250e:	f43f aef0 	beq.w	80022f2 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002512:	f018 0f01 	tst.w	r8, #1
 8002516:	d0f4      	beq.n	8002502 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002518:	fa5f fb89 	uxtb.w	fp, r9
 800251c:	4659      	mov	r1, fp
 800251e:	6820      	ldr	r0, [r4, #0]
 8002520:	f001 fadf 	bl	8003ae2 <USB_ReadDevInEPInterrupt>
 8002524:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002526:	f010 0f01 	tst.w	r0, #1
 800252a:	d0cc      	beq.n	80024c6 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800252c:	f009 020f 	and.w	r2, r9, #15
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002538:	ea23 0302 	bic.w	r3, r3, r2
 800253c:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800253e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002542:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8002546:	79a3      	ldrb	r3, [r4, #6]
 8002548:	428b      	cmp	r3, r1
 800254a:	d1b8      	bne.n	80024be <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800254c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002550:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002554:	6a1a      	ldr	r2, [r3, #32]
 8002556:	69d9      	ldr	r1, [r3, #28]
 8002558:	440a      	add	r2, r1
 800255a:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800255c:	f1b9 0f00 	cmp.w	r9, #0
 8002560:	d1ad      	bne.n	80024be <HAL_PCD_IRQHandler+0x266>
 8002562:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002566:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1a6      	bne.n	80024be <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002570:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002574:	2101      	movs	r1, #1
 8002576:	6820      	ldr	r0, [r4, #0]
 8002578:	f001 fb08 	bl	8003b8c <USB_EP0_OutStart>
 800257c:	e79f      	b.n	80024be <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 800257e:	4649      	mov	r1, r9
 8002580:	4628      	mov	r0, r5
 8002582:	f000 fed7 	bl	8003334 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8002586:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800258a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800258e:	7ddb      	ldrb	r3, [r3, #23]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d005      	beq.n	80025a0 <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002594:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002598:	2202      	movs	r2, #2
 800259a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 800259e:	e7ad      	b.n	80024fc <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 80025a0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80025a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80025a8:	2200      	movs	r2, #0
 80025aa:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025ac:	4659      	mov	r1, fp
 80025ae:	4620      	mov	r0, r4
 80025b0:	f002 ff68 	bl	8005484 <HAL_PCD_ISOINIncompleteCallback>
 80025b4:	e7ee      	b.n	8002594 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025b6:	4649      	mov	r1, r9
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff fb37 	bl	8001c2c <PCD_WriteEmptyTxFifo>
 80025be:	e7a0      	b.n	8002502 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 80025c8:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d008      	beq.n	80025e2 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 80025d0:	4620      	mov	r0, r4
 80025d2:	f002 ff4b 	bl	800546c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025d6:	6822      	ldr	r2, [r4, #0]
 80025d8:	6953      	ldr	r3, [r2, #20]
 80025da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025de:	6153      	str	r3, [r2, #20]
 80025e0:	e68d      	b.n	80022fe <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 80025e2:	2100      	movs	r1, #0
 80025e4:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025e8:	4620      	mov	r0, r4
 80025ea:	f000 f93e 	bl	800286a <HAL_PCDEx_LPM_Callback>
 80025ee:	e7f2      	b.n	80025d6 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 80025f0:	4620      	mov	r0, r4
 80025f2:	f002 ff23 	bl	800543c <HAL_PCD_SuspendCallback>
 80025f6:	e68d      	b.n	8002314 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002600:	2110      	movs	r1, #16
 8002602:	6820      	ldr	r0, [r4, #0]
 8002604:	f000 fe96 	bl	8003334 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002608:	e01a      	b.n	8002640 <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800260a:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800260e:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8002612:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002616:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800261a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800261e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002622:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002626:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800262a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800262e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002632:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002636:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800263a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263e:	3601      	adds	r6, #1
 8002640:	7923      	ldrb	r3, [r4, #4]
 8002642:	42b3      	cmp	r3, r6
 8002644:	d8e1      	bhi.n	800260a <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800264c:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800264e:	7be3      	ldrb	r3, [r4, #15]
 8002650:	b1db      	cbz	r3, 800268a <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002652:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002656:	f043 030b 	orr.w	r3, r3, #11
 800265a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800265e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002660:	f043 030b 	orr.w	r3, r3, #11
 8002664:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002666:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 800266a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800266e:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002672:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002676:	79a1      	ldrb	r1, [r4, #6]
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	f001 fa87 	bl	8003b8c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	6953      	ldr	r3, [r2, #20]
 8002682:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002686:	6153      	str	r3, [r2, #20]
 8002688:	e650      	b.n	800232c <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002690:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002694:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f043 030b 	orr.w	r3, r3, #11
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	e7e2      	b.n	8002666 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 80026a0:	6820      	ldr	r0, [r4, #0]
 80026a2:	f001 fa65 	bl	8003b70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026a6:	6820      	ldr	r0, [r4, #0]
 80026a8:	f000 ff5e 	bl	8003568 <USB_GetDevSpeed>
 80026ac:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026ae:	6826      	ldr	r6, [r4, #0]
 80026b0:	f000 fbf6 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 80026b4:	4601      	mov	r1, r0
 80026b6:	79e2      	ldrb	r2, [r4, #7]
 80026b8:	4630      	mov	r0, r6
 80026ba:	f000 fdbd 	bl	8003238 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80026be:	4620      	mov	r0, r4
 80026c0:	f002 fea7 	bl	8005412 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	6953      	ldr	r3, [r2, #20]
 80026c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026cc:	6153      	str	r3, [r2, #20]
 80026ce:	e634      	b.n	800233a <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 80026d0:	4620      	mov	r0, r4
 80026d2:	f002 fe98 	bl	8005406 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	6953      	ldr	r3, [r2, #20]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	6153      	str	r3, [r2, #20]
 80026e0:	e632      	b.n	8002348 <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e2:	3601      	adds	r6, #1
 80026e4:	7923      	ldrb	r3, [r4, #4]
 80026e6:	42b3      	cmp	r3, r6
 80026e8:	d90c      	bls.n	8002704 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026ea:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80026ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80026f2:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d1f3      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026fa:	b2f1      	uxtb	r1, r6
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff fd91 	bl	8002224 <HAL_PCD_EP_Abort>
 8002702:	e7ee      	b.n	80026e2 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002704:	6820      	ldr	r0, [r4, #0]
 8002706:	f001 f9cf 	bl	8003aa8 <USB_ReadInterrupts>
 800270a:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 800270e:	d125      	bne.n	800275c <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	f001 f9c9 	bl	8003aa8 <USB_ReadInterrupts>
 8002716:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 800271a:	d058      	beq.n	80027ce <HAL_PCD_IRQHandler+0x576>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800271c:	2301      	movs	r3, #1
 800271e:	e026      	b.n	800276e <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002720:	3601      	adds	r6, #1
 8002722:	7923      	ldrb	r3, [r4, #4]
 8002724:	42b3      	cmp	r3, r6
 8002726:	d91b      	bls.n	8002760 <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002728:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800272c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002730:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002738:	7e1b      	ldrb	r3, [r3, #24]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d1f0      	bne.n	8002720 <HAL_PCD_IRQHandler+0x4c8>
 800273e:	2a00      	cmp	r2, #0
 8002740:	daee      	bge.n	8002720 <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002742:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002746:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800274a:	2201      	movs	r2, #1
 800274c:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800274e:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8002752:	b2c9      	uxtb	r1, r1
 8002754:	4620      	mov	r0, r4
 8002756:	f7ff fd65 	bl	8002224 <HAL_PCD_EP_Abort>
 800275a:	e7e1      	b.n	8002720 <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800275c:	2601      	movs	r6, #1
 800275e:	e7e0      	b.n	8002722 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002760:	6822      	ldr	r2, [r4, #0]
 8002762:	6953      	ldr	r3, [r2, #20]
 8002764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002768:	6153      	str	r3, [r2, #20]
 800276a:	e7d1      	b.n	8002710 <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800276c:	3301      	adds	r3, #1
 800276e:	7922      	ldrb	r2, [r4, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d927      	bls.n	80027c4 <HAL_PCD_IRQHandler+0x56c>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002774:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002778:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800277c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002780:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002784:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8002788:	2a01      	cmp	r2, #1
 800278a:	d1ef      	bne.n	800276c <HAL_PCD_IRQHandler+0x514>
 800278c:	2900      	cmp	r1, #0
 800278e:	daed      	bge.n	800276c <HAL_PCD_IRQHandler+0x514>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002790:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8002794:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002798:	f012 0f01 	tst.w	r2, #1
 800279c:	d1e6      	bne.n	800276c <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800279e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80027a2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80027a6:	2101      	movs	r1, #1
 80027a8:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027ac:	69aa      	ldr	r2, [r5, #24]
 80027ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027b2:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027b4:	696a      	ldr	r2, [r5, #20]
 80027b6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80027ba:	d1d7      	bne.n	800276c <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027c2:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027c4:	6822      	ldr	r2, [r4, #0]
 80027c6:	6953      	ldr	r3, [r2, #20]
 80027c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027cc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	f001 f96a 	bl	8003aa8 <USB_ReadInterrupts>
 80027d4:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80027d8:	d110      	bne.n	80027fc <HAL_PCD_IRQHandler+0x5a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027da:	6820      	ldr	r0, [r4, #0]
 80027dc:	f001 f964 	bl	8003aa8 <USB_ReadInterrupts>
 80027e0:	f010 0f04 	tst.w	r0, #4
 80027e4:	f43f ad41 	beq.w	800226a <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027ec:	f015 0f04 	tst.w	r5, #4
 80027f0:	d10d      	bne.n	800280e <HAL_PCD_IRQHandler+0x5b6>
      hpcd->Instance->GOTGINT |= RegVal;
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	6853      	ldr	r3, [r2, #4]
 80027f6:	432b      	orrs	r3, r5
 80027f8:	6053      	str	r3, [r2, #4]
 80027fa:	e536      	b.n	800226a <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 80027fc:	4620      	mov	r0, r4
 80027fe:	f002 fe47 	bl	8005490 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	6953      	ldr	r3, [r2, #20]
 8002806:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800280a:	6153      	str	r3, [r2, #20]
 800280c:	e7e5      	b.n	80027da <HAL_PCD_IRQHandler+0x582>
        HAL_PCD_DisconnectCallback(hpcd);
 800280e:	4620      	mov	r0, r4
 8002810:	f002 fe44 	bl	800549c <HAL_PCD_DisconnectCallback>
 8002814:	e7ed      	b.n	80027f2 <HAL_PCD_IRQHandler+0x59a>

08002816 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002816:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002818:	6804      	ldr	r4, [r0, #0]
 800281a:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 800281c:	b931      	cbnz	r1, 800282c <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800281e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002822:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8002824:	2000      	movs	r0, #0
 8002826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800282e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002830:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002834:	2300      	movs	r3, #0
 8002836:	e008      	b.n	800284a <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002838:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800283c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002840:	6849      	ldr	r1, [r1, #4]
 8002842:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002846:	3301      	adds	r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800284e:	428b      	cmp	r3, r1
 8002850:	d3f2      	bcc.n	8002838 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002852:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002856:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 800285a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800285e:	6060      	str	r0, [r4, #4]
 8002860:	e7e0      	b.n	8002824 <HAL_PCDEx_SetTxFiFo+0xe>

08002862 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002862:	6803      	ldr	r3, [r0, #0]
 8002864:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8002866:	2000      	movs	r0, #0
 8002868:	4770      	bx	lr

0800286a <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800286a:	4770      	bx	lr

0800286c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800286c:	2800      	cmp	r0, #0
 800286e:	f000 81e0 	beq.w	8002c32 <HAL_RCC_OscConfig+0x3c6>
{
 8002872:	b570      	push	{r4, r5, r6, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002878:	6803      	ldr	r3, [r0, #0]
 800287a:	f013 0f01 	tst.w	r3, #1
 800287e:	d03b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002880:	4b9f      	ldr	r3, [pc, #636]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b04      	cmp	r3, #4
 800288a:	d02c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288c:	4b9c      	ldr	r3, [pc, #624]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002894:	2b08      	cmp	r3, #8
 8002896:	d021      	beq.n	80028dc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002898:	6863      	ldr	r3, [r4, #4]
 800289a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800289e:	d04f      	beq.n	8002940 <HAL_RCC_OscConfig+0xd4>
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028a4:	d052      	beq.n	800294c <HAL_RCC_OscConfig+0xe0>
 80028a6:	4b96      	ldr	r3, [pc, #600]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b8:	6863      	ldr	r3, [r4, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d050      	beq.n	8002960 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe fa5b 	bl	8000d78 <HAL_GetTick>
 80028c2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80028cc:	d114      	bne.n	80028f8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ce:	f7fe fa53 	bl	8000d78 <HAL_GetTick>
 80028d2:	1b40      	subs	r0, r0, r5
 80028d4:	2864      	cmp	r0, #100	@ 0x64
 80028d6:	d9f5      	bls.n	80028c4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80028d8:	2003      	movs	r0, #3
 80028da:	e1b1      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028dc:	4b88      	ldr	r3, [pc, #544]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80028e4:	d0d8      	beq.n	8002898 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e6:	4b86      	ldr	r3, [pc, #536]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80028ee:	d003      	beq.n	80028f8 <HAL_RCC_OscConfig+0x8c>
 80028f0:	6863      	ldr	r3, [r4, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 819f 	beq.w	8002c36 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	f013 0f02 	tst.w	r3, #2
 80028fe:	d054      	beq.n	80029aa <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002900:	4b7f      	ldr	r3, [pc, #508]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f013 0f0c 	tst.w	r3, #12
 8002908:	d03e      	beq.n	8002988 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002912:	2b08      	cmp	r3, #8
 8002914:	d033      	beq.n	800297e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002916:	68e3      	ldr	r3, [r4, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d068      	beq.n	80029ee <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800291c:	4b79      	ldr	r3, [pc, #484]	@ (8002b04 <HAL_RCC_OscConfig+0x298>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe fa29 	bl	8000d78 <HAL_GetTick>
 8002926:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002928:	4b75      	ldr	r3, [pc, #468]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f013 0f02 	tst.w	r3, #2
 8002930:	d154      	bne.n	80029dc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe fa21 	bl	8000d78 <HAL_GetTick>
 8002936:	1b40      	subs	r0, r0, r5
 8002938:	2802      	cmp	r0, #2
 800293a:	d9f5      	bls.n	8002928 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800293c:	2003      	movs	r0, #3
 800293e:	e17f      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002940:	4a6f      	ldr	r2, [pc, #444]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e7b5      	b.n	80028b8 <HAL_RCC_OscConfig+0x4c>
 800294c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e7ab      	b.n	80028b8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002960:	f7fe fa0a 	bl	8000d78 <HAL_GetTick>
 8002964:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	4b66      	ldr	r3, [pc, #408]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800296e:	d0c3      	beq.n	80028f8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002970:	f7fe fa02 	bl	8000d78 <HAL_GetTick>
 8002974:	1b40      	subs	r0, r0, r5
 8002976:	2864      	cmp	r0, #100	@ 0x64
 8002978:	d9f5      	bls.n	8002966 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800297a:	2003      	movs	r0, #3
 800297c:	e160      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297e:	4b60      	ldr	r3, [pc, #384]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002986:	d1c6      	bne.n	8002916 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002988:	4b5d      	ldr	r3, [pc, #372]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f013 0f02 	tst.w	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_RCC_OscConfig+0x12e>
 8002992:	68e3      	ldr	r3, [r4, #12]
 8002994:	2b01      	cmp	r3, #1
 8002996:	f040 8150 	bne.w	8002c3a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4a59      	ldr	r2, [pc, #356]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 800299c:	6813      	ldr	r3, [r2, #0]
 800299e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80029a2:	6921      	ldr	r1, [r4, #16]
 80029a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029a8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	f013 0f08 	tst.w	r3, #8
 80029b0:	d042      	beq.n	8002a38 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029b2:	6963      	ldr	r3, [r4, #20]
 80029b4:	b36b      	cbz	r3, 8002a12 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b6:	4b53      	ldr	r3, [pc, #332]	@ (8002b04 <HAL_RCC_OscConfig+0x298>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe f9db 	bl	8000d78 <HAL_GetTick>
 80029c2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 80029c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c8:	f013 0f02 	tst.w	r3, #2
 80029cc:	d134      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ce:	f7fe f9d3 	bl	8000d78 <HAL_GetTick>
 80029d2:	1b40      	subs	r0, r0, r5
 80029d4:	2802      	cmp	r0, #2
 80029d6:	d9f5      	bls.n	80029c4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80029d8:	2003      	movs	r0, #3
 80029da:	e131      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4a48      	ldr	r2, [pc, #288]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 80029de:	6813      	ldr	r3, [r2, #0]
 80029e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80029e4:	6921      	ldr	r1, [r4, #16]
 80029e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	e7dd      	b.n	80029aa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b45      	ldr	r3, [pc, #276]	@ (8002b04 <HAL_RCC_OscConfig+0x298>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029f4:	f7fe f9c0 	bl	8000d78 <HAL_GetTick>
 80029f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	4b41      	ldr	r3, [pc, #260]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f013 0f02 	tst.w	r3, #2
 8002a02:	d0d2      	beq.n	80029aa <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe f9b8 	bl	8000d78 <HAL_GetTick>
 8002a08:	1b40      	subs	r0, r0, r5
 8002a0a:	2802      	cmp	r0, #2
 8002a0c:	d9f5      	bls.n	80029fa <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002a0e:	2003      	movs	r0, #3
 8002a10:	e116      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a12:	4b3c      	ldr	r3, [pc, #240]	@ (8002b04 <HAL_RCC_OscConfig+0x298>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe f9ad 	bl	8000d78 <HAL_GetTick>
 8002a1e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	4b37      	ldr	r3, [pc, #220]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a24:	f013 0f02 	tst.w	r3, #2
 8002a28:	d006      	beq.n	8002a38 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2a:	f7fe f9a5 	bl	8000d78 <HAL_GetTick>
 8002a2e:	1b40      	subs	r0, r0, r5
 8002a30:	2802      	cmp	r0, #2
 8002a32:	d9f5      	bls.n	8002a20 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002a34:	2003      	movs	r0, #3
 8002a36:	e103      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	f013 0f04 	tst.w	r3, #4
 8002a3e:	d077      	beq.n	8002b30 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a40:	4b2f      	ldr	r3, [pc, #188]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002a48:	d133      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a52:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a62:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a64:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <HAL_RCC_OscConfig+0x29c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a6c:	d023      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6e:	68a3      	ldr	r3, [r4, #8]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d034      	beq.n	8002ade <HAL_RCC_OscConfig+0x272>
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d038      	beq.n	8002aea <HAL_RCC_OscConfig+0x27e>
 8002a78:	4b21      	ldr	r3, [pc, #132]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002a7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a84:	f022 0204 	bic.w	r2, r2, #4
 8002a88:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8a:	68a3      	ldr	r3, [r4, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d03d      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe f972 	bl	8000d78 <HAL_GetTick>
 8002a94:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	f013 0f02 	tst.w	r3, #2
 8002a9e:	d146      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe f96a 	bl	8000d78 <HAL_GetTick>
 8002aa4:	1b80      	subs	r0, r0, r6
 8002aa6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002aaa:	4298      	cmp	r0, r3
 8002aac:	d9f3      	bls.n	8002a96 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002aae:	2003      	movs	r0, #3
 8002ab0:	e0c6      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	e7d6      	b.n	8002a64 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4a14      	ldr	r2, [pc, #80]	@ (8002b08 <HAL_RCC_OscConfig+0x29c>)
 8002ab8:	6813      	ldr	r3, [r2, #0]
 8002aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ac0:	f7fe f95a 	bl	8000d78 <HAL_GetTick>
 8002ac4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <HAL_RCC_OscConfig+0x29c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002ace:	d1ce      	bne.n	8002a6e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad0:	f7fe f952 	bl	8000d78 <HAL_GetTick>
 8002ad4:	1b80      	subs	r0, r0, r6
 8002ad6:	2802      	cmp	r0, #2
 8002ad8:	d9f5      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002ada:	2003      	movs	r0, #3
 8002adc:	e0b0      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ade:	4a08      	ldr	r2, [pc, #32]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002ae0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	e7cf      	b.n	8002a8a <HAL_RCC_OscConfig+0x21e>
 8002aea:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_RCC_OscConfig+0x294>)
 8002aec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002aee:	f042 0204 	orr.w	r2, r2, #4
 8002af2:	671a      	str	r2, [r3, #112]	@ 0x70
 8002af4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	671a      	str	r2, [r3, #112]	@ 0x70
 8002afc:	e7c5      	b.n	8002a8a <HAL_RCC_OscConfig+0x21e>
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	42470000 	.word	0x42470000
 8002b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe f934 	bl	8000d78 <HAL_GetTick>
 8002b10:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b12:	4b52      	ldr	r3, [pc, #328]	@ (8002c5c <HAL_RCC_OscConfig+0x3f0>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b16:	f013 0f02 	tst.w	r3, #2
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe f92c 	bl	8000d78 <HAL_GetTick>
 8002b20:	1b80      	subs	r0, r0, r6
 8002b22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002b26:	4298      	cmp	r0, r3
 8002b28:	d9f3      	bls.n	8002b12 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002b2a:	2003      	movs	r0, #3
 8002b2c:	e088      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b2e:	b9ed      	cbnz	r5, 8002b6c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b30:	69a3      	ldr	r3, [r4, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8083 	beq.w	8002c3e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b38:	4a48      	ldr	r2, [pc, #288]	@ (8002c5c <HAL_RCC_OscConfig+0x3f0>)
 8002b3a:	6892      	ldr	r2, [r2, #8]
 8002b3c:	f002 020c 	and.w	r2, r2, #12
 8002b40:	2a08      	cmp	r2, #8
 8002b42:	d051      	beq.n	8002be8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d017      	beq.n	8002b78 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b45      	ldr	r3, [pc, #276]	@ (8002c60 <HAL_RCC_OscConfig+0x3f4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe f913 	bl	8000d78 <HAL_GetTick>
 8002b52:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b54:	4b41      	ldr	r3, [pc, #260]	@ (8002c5c <HAL_RCC_OscConfig+0x3f0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b5c:	d042      	beq.n	8002be4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe f90b 	bl	8000d78 <HAL_GetTick>
 8002b62:	1b00      	subs	r0, r0, r4
 8002b64:	2802      	cmp	r0, #2
 8002b66:	d9f5      	bls.n	8002b54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b68:	2003      	movs	r0, #3
 8002b6a:	e069      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c5c <HAL_RCC_OscConfig+0x3f0>)
 8002b6e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b76:	e7db      	b.n	8002b30 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002b78:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <HAL_RCC_OscConfig+0x3f4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b7e:	f7fe f8fb 	bl	8000d78 <HAL_GetTick>
 8002b82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b84:	4b35      	ldr	r3, [pc, #212]	@ (8002c5c <HAL_RCC_OscConfig+0x3f0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b8c:	d006      	beq.n	8002b9c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe f8f3 	bl	8000d78 <HAL_GetTick>
 8002b92:	1b40      	subs	r0, r0, r5
 8002b94:	2802      	cmp	r0, #2
 8002b96:	d9f5      	bls.n	8002b84 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002b98:	2003      	movs	r0, #3
 8002b9a:	e051      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9c:	69e3      	ldr	r3, [r4, #28]
 8002b9e:	6a22      	ldr	r2, [r4, #32]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002ba4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ba8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002baa:	0852      	lsrs	r2, r2, #1
 8002bac:	3a01      	subs	r2, #1
 8002bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002bb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002bb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002bb8:	4a28      	ldr	r2, [pc, #160]	@ (8002c5c <HAL_RCC_OscConfig+0x3f0>)
 8002bba:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b28      	ldr	r3, [pc, #160]	@ (8002c60 <HAL_RCC_OscConfig+0x3f4>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002bc2:	f7fe f8d9 	bl	8000d78 <HAL_GetTick>
 8002bc6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc8:	4b24      	ldr	r3, [pc, #144]	@ (8002c5c <HAL_RCC_OscConfig+0x3f0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe f8d1 	bl	8000d78 <HAL_GetTick>
 8002bd6:	1b00      	subs	r0, r0, r4
 8002bd8:	2802      	cmp	r0, #2
 8002bda:	d9f5      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002bdc:	2003      	movs	r0, #3
 8002bde:	e02f      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002be0:	2000      	movs	r0, #0
 8002be2:	e02d      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
 8002be4:	2000      	movs	r0, #0
 8002be6:	e02b      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d02b      	beq.n	8002c44 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x3f0>)
 8002bee:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002bf4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf6:	4291      	cmp	r1, r2
 8002bf8:	d126      	bne.n	8002c48 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfe:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c00:	428a      	cmp	r2, r1
 8002c02:	d123      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c06:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002c10:	d11e      	bne.n	8002c50 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c12:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002c16:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002c18:	0852      	lsrs	r2, r2, #1
 8002c1a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002c20:	d118      	bne.n	8002c54 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c22:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002c26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c28:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002c2c:	d114      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002c2e:	2000      	movs	r0, #0
 8002c30:	e006      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002c32:	2001      	movs	r0, #1
}
 8002c34:	4770      	bx	lr
        return HAL_ERROR;
 8002c36:	2001      	movs	r0, #1
 8002c38:	e002      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002c3e:	2000      	movs	r0, #0
}
 8002c40:	b002      	add	sp, #8
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002c44:	2001      	movs	r0, #1
 8002c46:	e7fb      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002c48:	2001      	movs	r0, #1
 8002c4a:	e7f9      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	e7f7      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
 8002c50:	2001      	movs	r0, #1
 8002c52:	e7f5      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
 8002c54:	2001      	movs	r0, #1
 8002c56:	e7f3      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
 8002c58:	2001      	movs	r0, #1
 8002c5a:	e7f1      	b.n	8002c40 <HAL_RCC_OscConfig+0x3d4>
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	42470000 	.word	0x42470000

08002c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c66:	4b33      	ldr	r3, [pc, #204]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d05b      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0xc6>
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d15b      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c76:	4b2f      	ldr	r3, [pc, #188]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002c84:	d02c      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c86:	4b2b      	ldr	r3, [pc, #172]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c88:	6858      	ldr	r0, [r3, #4]
 8002c8a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c8e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002c92:	ebbc 0c00 	subs.w	ip, ip, r0
 8002c96:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002c9a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002c9e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002ca2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002ca6:	ebb1 010c 	subs.w	r1, r1, ip
 8002caa:	eb63 030e 	sbc.w	r3, r3, lr
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb4:	00c9      	lsls	r1, r1, #3
 8002cb6:	eb11 0c00 	adds.w	ip, r1, r0
 8002cba:	f143 0300 	adc.w	r3, r3, #0
 8002cbe:	0259      	lsls	r1, r3, #9
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002cc6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002cca:	f7fd fad1 	bl	8000270 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cce:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002cda:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002cde:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce0:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ce2:	6858      	ldr	r0, [r3, #4]
 8002ce4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002ce8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002cec:	ebbc 0c00 	subs.w	ip, ip, r0
 8002cf0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002cf4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002cf8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002cfc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002d00:	ebb1 010c 	subs.w	r1, r1, ip
 8002d04:	eb63 030e 	sbc.w	r3, r3, lr
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d0e:	00c9      	lsls	r1, r1, #3
 8002d10:	eb11 0c00 	adds.w	ip, r1, r0
 8002d14:	f143 0300 	adc.w	r3, r3, #0
 8002d18:	0299      	lsls	r1, r3, #10
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002d20:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002d24:	f7fd faa4 	bl	8000270 <__aeabi_uldivmod>
 8002d28:	e7d1      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8002d2a:	4803      	ldr	r0, [pc, #12]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d2c:	e7d7      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d2e:	4803      	ldr	r0, [pc, #12]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8002d30:	e7d5      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x7a>
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	007a1200 	.word	0x007a1200
 8002d3c:	00f42400 	.word	0x00f42400

08002d40 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002d40:	2800      	cmp	r0, #0
 8002d42:	f000 809b 	beq.w	8002e7c <HAL_RCC_ClockConfig+0x13c>
{
 8002d46:	b570      	push	{r4, r5, r6, lr}
 8002d48:	460d      	mov	r5, r1
 8002d4a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e8c <HAL_RCC_ClockConfig+0x14c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d208      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d58:	b2cb      	uxtb	r3, r1
 8002d5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002e8c <HAL_RCC_ClockConfig+0x14c>)
 8002d5c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	6813      	ldr	r3, [r2, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	428b      	cmp	r3, r1
 8002d66:	f040 808b 	bne.w	8002e80 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	f013 0f02 	tst.w	r3, #2
 8002d70:	d017      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d72:	f013 0f04 	tst.w	r3, #4
 8002d76:	d004      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4a45      	ldr	r2, [pc, #276]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002d7a:	6893      	ldr	r3, [r2, #8]
 8002d7c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d80:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	f013 0f08 	tst.w	r3, #8
 8002d88:	d004      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d8a:	4a41      	ldr	r2, [pc, #260]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002d8c:	6893      	ldr	r3, [r2, #8]
 8002d8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d92:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4a3e      	ldr	r2, [pc, #248]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002d96:	6893      	ldr	r3, [r2, #8]
 8002d98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d9c:	68a1      	ldr	r1, [r4, #8]
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	f013 0f01 	tst.w	r3, #1
 8002da8:	d032      	beq.n	8002e10 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	6863      	ldr	r3, [r4, #4]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d021      	beq.n	8002df4 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db0:	1e9a      	subs	r2, r3, #2
 8002db2:	2a01      	cmp	r2, #1
 8002db4:	d925      	bls.n	8002e02 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db6:	4a36      	ldr	r2, [pc, #216]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	f012 0f02 	tst.w	r2, #2
 8002dbe:	d061      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc0:	4933      	ldr	r1, [pc, #204]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002dc2:	688a      	ldr	r2, [r1, #8]
 8002dc4:	f022 0203 	bic.w	r2, r2, #3
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002dcc:	f7fd ffd4 	bl	8000d78 <HAL_GetTick>
 8002dd0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	6862      	ldr	r2, [r4, #4]
 8002ddc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002de0:	d016      	beq.n	8002e10 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de2:	f7fd ffc9 	bl	8000d78 <HAL_GetTick>
 8002de6:	1b80      	subs	r0, r0, r6
 8002de8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002dec:	4298      	cmp	r0, r3
 8002dee:	d9f0      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002df0:	2003      	movs	r0, #3
 8002df2:	e042      	b.n	8002e7a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df4:	4a26      	ldr	r2, [pc, #152]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002dfc:	d1e0      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002dfe:	2001      	movs	r0, #1
 8002e00:	e03b      	b.n	8002e7a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4a23      	ldr	r2, [pc, #140]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002e0a:	d1d9      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	e034      	b.n	8002e7a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b1e      	ldr	r3, [pc, #120]	@ (8002e8c <HAL_RCC_ClockConfig+0x14c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	42ab      	cmp	r3, r5
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1c:	b2ea      	uxtb	r2, r5
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <HAL_RCC_ClockConfig+0x14c>)
 8002e20:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	42ab      	cmp	r3, r5
 8002e2a:	d12d      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	f013 0f04 	tst.w	r3, #4
 8002e32:	d006      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002e36:	6893      	ldr	r3, [r2, #8]
 8002e38:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002e3c:	68e1      	ldr	r1, [r4, #12]
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	f013 0f08 	tst.w	r3, #8
 8002e48:	d007      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4a:	4a11      	ldr	r2, [pc, #68]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002e4c:	6893      	ldr	r3, [r2, #8]
 8002e4e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002e52:	6921      	ldr	r1, [r4, #16]
 8002e54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e58:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e5a:	f7ff ff03 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <HAL_RCC_ClockConfig+0x150>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e66:	4a0b      	ldr	r2, [pc, #44]	@ (8002e94 <HAL_RCC_ClockConfig+0x154>)
 8002e68:	5cd3      	ldrb	r3, [r2, r3]
 8002e6a:	40d8      	lsrs	r0, r3
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e98 <HAL_RCC_ClockConfig+0x158>)
 8002e6e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002e70:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_RCC_ClockConfig+0x15c>)
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	f7fd ff34 	bl	8000ce0 <HAL_InitTick>
  return HAL_OK;
 8002e78:	2000      	movs	r0, #0
}
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e7c:	2001      	movs	r0, #1
}
 8002e7e:	4770      	bx	lr
      return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e7fa      	b.n	8002e7a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002e84:	2001      	movs	r0, #1
 8002e86:	e7f8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
 8002e8a:	e7f6      	b.n	8002e7a <HAL_RCC_ClockConfig+0x13a>
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	08006510 	.word	0x08006510
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	2000000c 	.word	0x2000000c

08002ea0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002ea0:	4b01      	ldr	r3, [pc, #4]	@ (8002ea8 <HAL_RCC_GetHCLKFreq+0x8>)
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eae:	f7ff fff7 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002eb2:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002eba:	4a03      	ldr	r2, [pc, #12]	@ (8002ec8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ebc:	5cd3      	ldrb	r3, [r2, r3]
}
 8002ebe:	40d8      	lsrs	r0, r3
 8002ec0:	bd08      	pop	{r3, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	08006508 	.word	0x08006508

08002ecc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ecc:	b530      	push	{r4, r5, lr}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ed2:	6803      	ldr	r3, [r0, #0]
 8002ed4:	f013 0f05 	tst.w	r3, #5
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	f013 0f02 	tst.w	r3, #2
 8002ee0:	d12e      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ee2:	2000      	movs	r0, #0
}
 8002ee4:	b003      	add	sp, #12
 8002ee6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002eee:	f7fd ff43 	bl	8000d78 <HAL_GetTick>
 8002ef2:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef4:	4b48      	ldr	r3, [pc, #288]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002efc:	d006      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x40>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002efe:	f7fd ff3b 	bl	8000d78 <HAL_GetTick>
 8002f02:	1b43      	subs	r3, r0, r5
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d9f5      	bls.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8002f08:	2003      	movs	r0, #3
 8002f0a:	e7eb      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f0c:	6862      	ldr	r2, [r4, #4]
 8002f0e:	68a3      	ldr	r3, [r4, #8]
 8002f10:	071b      	lsls	r3, r3, #28
 8002f12:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f16:	4a40      	ldr	r2, [pc, #256]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f18:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002f22:	f7fd ff29 	bl	8000d78 <HAL_GetTick>
 8002f26:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f28:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002f30:	d1d3      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f32:	f7fd ff21 	bl	8000d78 <HAL_GetTick>
 8002f36:	1b43      	subs	r3, r0, r5
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d9f5      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002f3c:	2003      	movs	r0, #3
 8002f3e:	e7d1      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	4b34      	ldr	r3, [pc, #208]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f48:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002f4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002f58:	4a30      	ldr	r2, [pc, #192]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f62:	f7fd ff09 	bl	8000d78 <HAL_GetTick>
 8002f66:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f68:	4b2c      	ldr	r3, [pc, #176]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f70:	d106      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7fd ff01 	bl	8000d78 <HAL_GetTick>
 8002f76:	1b43      	subs	r3, r0, r5
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d9f5      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	e7b1      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f80:	4b25      	ldr	r3, [pc, #148]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f84:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002f88:	d014      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f8a:	68e2      	ldr	r2, [r4, #12]
 8002f8c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d00f      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f94:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f98:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f9c:	491d      	ldr	r1, [pc, #116]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8002faa:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	f013 0f01 	tst.w	r3, #1
 8002fb2:	d113      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb4:	68e3      	ldr	r3, [r4, #12]
 8002fb6:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002fba:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002fbe:	d01e      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002fc0:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fc2:	6893      	ldr	r3, [r2, #8]
 8002fc4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002fc8:	6093      	str	r3, [r2, #8]
 8002fca:	4913      	ldr	r1, [pc, #76]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fcc:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002fce:	68e2      	ldr	r2, [r4, #12]
 8002fd0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	670b      	str	r3, [r1, #112]	@ 0x70
  return HAL_OK;
 8002fd8:	2000      	movs	r0, #0
 8002fda:	e783      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8002fdc:	f7fd fecc 	bl	8000d78 <HAL_GetTick>
 8002fe0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	f013 0f02 	tst.w	r3, #2
 8002fea:	d1e3      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fd fec4 	bl	8000d78 <HAL_GetTick>
 8002ff0:	1b40      	subs	r0, r0, r5
 8002ff2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ff6:	4298      	cmp	r0, r3
 8002ff8:	d9f3      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 8002ffa:	2003      	movs	r0, #3
 8002ffc:	e772      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ffe:	4906      	ldr	r1, [pc, #24]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003000:	688a      	ldr	r2, [r1, #8]
 8003002:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8003006:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800300a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
 8003012:	e7da      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003014:	42470000 	.word	0x42470000
 8003018:	40023800 	.word	0x40023800
 800301c:	40007000 	.word	0x40007000

08003020 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003020:	2801      	cmp	r0, #1
 8003022:	d001      	beq.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8003024:	2000      	movs	r0, #0
 8003026:	4770      	bx	lr
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003028:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 800302a:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 800302c:	f413 0300 	ands.w	r3, r3, #8388608	@ 0x800000
 8003030:	d002      	beq.n	8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8003032:	b31b      	cbz	r3, 800307c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8003034:	4813      	ldr	r0, [pc, #76]	@ (8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003036:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003040:	d014      	beq.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003042:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800304a:	4b0f      	ldr	r3, [pc, #60]	@ (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 800304c:	fbb3 f3f2 	udiv	r3, r3, r2
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003050:	4a0b      	ldr	r2, [pc, #44]	@ (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8003052:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8003056:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800305a:	fb03 f000 	mul.w	r0, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800305e:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8003062:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8003066:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800306a:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800306c:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8003076:	fbb3 f3f2 	udiv	r3, r3, r2
 800307a:	e7e9      	b.n	8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800307c:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return frequency;
}
 800307e:	4770      	bx	lr
 8003080:	40023800 	.word	0x40023800
 8003084:	00bb8000 	.word	0x00bb8000
 8003088:	007a1200 	.word	0x007a1200
 800308c:	00f42400 	.word	0x00f42400

08003090 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003090:	2800      	cmp	r0, #0
 8003092:	d05a      	beq.n	800314a <HAL_SPI_Init+0xba>
{
 8003094:	b510      	push	{r4, lr}
 8003096:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003098:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800309a:	b933      	cbnz	r3, 80030aa <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800309c:	6843      	ldr	r3, [r0, #4]
 800309e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030a2:	d005      	beq.n	80030b0 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61c3      	str	r3, [r0, #28]
 80030a8:	e002      	b.n	80030b0 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ae:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030b4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d040      	beq.n	800313e <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030bc:	2302      	movs	r3, #2
 80030be:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030c2:	6822      	ldr	r2, [r4, #0]
 80030c4:	6813      	ldr	r3, [r2, #0]
 80030c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ca:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030cc:	6863      	ldr	r3, [r4, #4]
 80030ce:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80030d2:	68a2      	ldr	r2, [r4, #8]
 80030d4:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80030d8:	4313      	orrs	r3, r2
 80030da:	68e2      	ldr	r2, [r4, #12]
 80030dc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80030e0:	4313      	orrs	r3, r2
 80030e2:	6922      	ldr	r2, [r4, #16]
 80030e4:	f002 0202 	and.w	r2, r2, #2
 80030e8:	4313      	orrs	r3, r2
 80030ea:	6962      	ldr	r2, [r4, #20]
 80030ec:	f002 0201 	and.w	r2, r2, #1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	69a2      	ldr	r2, [r4, #24]
 80030f4:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80030f8:	4313      	orrs	r3, r2
 80030fa:	69e2      	ldr	r2, [r4, #28]
 80030fc:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003100:	4313      	orrs	r3, r2
 8003102:	6a22      	ldr	r2, [r4, #32]
 8003104:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8003108:	4313      	orrs	r3, r2
 800310a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800310c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003110:	6821      	ldr	r1, [r4, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003116:	8b63      	ldrh	r3, [r4, #26]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800311e:	f002 0210 	and.w	r2, r2, #16
 8003122:	6821      	ldr	r1, [r4, #0]
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003128:	6822      	ldr	r2, [r4, #0]
 800312a:	69d3      	ldr	r3, [r2, #28]
 800312c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003130:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003132:	2000      	movs	r0, #0
 8003134:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003136:	2301      	movs	r3, #1
 8003138:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 800313c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800313e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003142:	4620      	mov	r0, r4
 8003144:	f7fd fce0 	bl	8000b08 <HAL_SPI_MspInit>
 8003148:	e7b8      	b.n	80030bc <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800314a:	2001      	movs	r0, #1
}
 800314c:	4770      	bx	lr

0800314e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800314e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003154:	9b01      	ldr	r3, [sp, #4]
 8003156:	3301      	adds	r3, #1
 8003158:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800315a:	9b01      	ldr	r3, [sp, #4]
 800315c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003160:	d81c      	bhi.n	800319c <USB_CoreReset+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003162:	6903      	ldr	r3, [r0, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	daf5      	bge.n	8003154 <USB_CoreReset+0x6>

  count = 10U;
 8003168:	230a      	movs	r3, #10
 800316a:	9301      	str	r3, [sp, #4]

  /* few cycles before setting core reset */
  while (count > 0U)
 800316c:	e002      	b.n	8003174 <USB_CoreReset+0x26>
  {
    count--;
 800316e:	9b01      	ldr	r3, [sp, #4]
 8003170:	3b01      	subs	r3, #1
 8003172:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 8003174:	9b01      	ldr	r3, [sp, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f9      	bne.n	800316e <USB_CoreReset+0x20>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800317a:	6903      	ldr	r3, [r0, #16]
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8003182:	9b01      	ldr	r3, [sp, #4]
 8003184:	3301      	adds	r3, #1
 8003186:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8003188:	9b01      	ldr	r3, [sp, #4]
 800318a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800318e:	d808      	bhi.n	80031a2 <USB_CoreReset+0x54>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003190:	6903      	ldr	r3, [r0, #16]
 8003192:	f013 0f01 	tst.w	r3, #1
 8003196:	d1f4      	bne.n	8003182 <USB_CoreReset+0x34>

  return HAL_OK;
 8003198:	2000      	movs	r0, #0
 800319a:	e000      	b.n	800319e <USB_CoreReset+0x50>
      return HAL_TIMEOUT;
 800319c:	2003      	movs	r0, #3
}
 800319e:	b002      	add	sp, #8
 80031a0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80031a2:	2003      	movs	r0, #3
 80031a4:	e7fb      	b.n	800319e <USB_CoreReset+0x50>

080031a6 <USB_CoreInit>:
{
 80031a6:	b084      	sub	sp, #16
 80031a8:	b510      	push	{r4, lr}
 80031aa:	4604      	mov	r4, r0
 80031ac:	a803      	add	r0, sp, #12
 80031ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031b2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d121      	bne.n	80031fe <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031ba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c0:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031c2:	68e3      	ldr	r3, [r4, #12]
 80031c4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80031c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031cc:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031ce:	68e3      	ldr	r3, [r4, #12]
 80031d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80031d4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80031d6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d00a      	beq.n	80031f4 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff ffb5 	bl	800314e <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80031e4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d01c      	beq.n	8003226 <USB_CoreInit+0x80>
}
 80031ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f0:	b004      	add	sp, #16
 80031f2:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031f4:	68e3      	ldr	r3, [r4, #12]
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031fa:	60e3      	str	r3, [r4, #12]
 80031fc:	e7ef      	b.n	80031de <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031fe:	68e3      	ldr	r3, [r4, #12]
 8003200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003204:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8003206:	4620      	mov	r0, r4
 8003208:	f7ff ffa1 	bl	800314e <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800320c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003210:	b923      	cbnz	r3, 800321c <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003212:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003218:	63a3      	str	r3, [r4, #56]	@ 0x38
 800321a:	e7e3      	b.n	80031e4 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800321c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800321e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003222:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003224:	e7de      	b.n	80031e4 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003226:	68a3      	ldr	r3, [r4, #8]
 8003228:	f043 0306 	orr.w	r3, r3, #6
 800322c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800322e:	68a3      	ldr	r3, [r4, #8]
 8003230:	f043 0320 	orr.w	r3, r3, #32
 8003234:	60a3      	str	r3, [r4, #8]
 8003236:	e7d9      	b.n	80031ec <USB_CoreInit+0x46>

08003238 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003238:	2a02      	cmp	r2, #2
 800323a:	d00a      	beq.n	8003252 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800323c:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800323e:	68c3      	ldr	r3, [r0, #12]
 8003240:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8003244:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003246:	68c3      	ldr	r3, [r0, #12]
 8003248:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800324c:	60c3      	str	r3, [r0, #12]
}
 800324e:	2000      	movs	r0, #0
 8003250:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003252:	4b23      	ldr	r3, [pc, #140]	@ (80032e0 <USB_SetTurnaroundTime+0xa8>)
 8003254:	440b      	add	r3, r1
 8003256:	4a23      	ldr	r2, [pc, #140]	@ (80032e4 <USB_SetTurnaroundTime+0xac>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d92f      	bls.n	80032bc <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800325c:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <USB_SetTurnaroundTime+0xb0>)
 800325e:	440b      	add	r3, r1
 8003260:	4a22      	ldr	r2, [pc, #136]	@ (80032ec <USB_SetTurnaroundTime+0xb4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d92c      	bls.n	80032c0 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003266:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 800326a:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 800326e:	4a20      	ldr	r2, [pc, #128]	@ (80032f0 <USB_SetTurnaroundTime+0xb8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d927      	bls.n	80032c4 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003274:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8003278:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 800327c:	4a1d      	ldr	r2, [pc, #116]	@ (80032f4 <USB_SetTurnaroundTime+0xbc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d322      	bcc.n	80032c8 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003282:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <USB_SetTurnaroundTime+0xc0>)
 8003284:	440b      	add	r3, r1
 8003286:	4a1d      	ldr	r2, [pc, #116]	@ (80032fc <USB_SetTurnaroundTime+0xc4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d91f      	bls.n	80032cc <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800328c:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <USB_SetTurnaroundTime+0xc8>)
 800328e:	440b      	add	r3, r1
 8003290:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <USB_SetTurnaroundTime+0xcc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d31c      	bcc.n	80032d0 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003296:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <USB_SetTurnaroundTime+0xd0>)
 8003298:	440b      	add	r3, r1
 800329a:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <USB_SetTurnaroundTime+0xd4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d319      	bcc.n	80032d4 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80032a0:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 80032a4:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 80032a8:	4a19      	ldr	r2, [pc, #100]	@ (8003310 <USB_SetTurnaroundTime+0xd8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d314      	bcc.n	80032d8 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80032ae:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <USB_SetTurnaroundTime+0xdc>)
 80032b0:	440b      	add	r3, r1
 80032b2:	4a19      	ldr	r2, [pc, #100]	@ (8003318 <USB_SetTurnaroundTime+0xe0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d211      	bcs.n	80032dc <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 80032b8:	2207      	movs	r2, #7
 80032ba:	e7c0      	b.n	800323e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80032bc:	220f      	movs	r2, #15
 80032be:	e7be      	b.n	800323e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80032c0:	220e      	movs	r2, #14
 80032c2:	e7bc      	b.n	800323e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80032c4:	220d      	movs	r2, #13
 80032c6:	e7ba      	b.n	800323e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80032c8:	220c      	movs	r2, #12
 80032ca:	e7b8      	b.n	800323e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80032cc:	220b      	movs	r2, #11
 80032ce:	e7b6      	b.n	800323e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80032d0:	220a      	movs	r2, #10
 80032d2:	e7b4      	b.n	800323e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80032d4:	2209      	movs	r2, #9
 80032d6:	e7b2      	b.n	800323e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80032d8:	2208      	movs	r2, #8
 80032da:	e7b0      	b.n	800323e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80032dc:	2206      	movs	r2, #6
 80032de:	e7ae      	b.n	800323e <USB_SetTurnaroundTime+0x6>
 80032e0:	ff275340 	.word	0xff275340
 80032e4:	000c34ff 	.word	0x000c34ff
 80032e8:	ff1b1e40 	.word	0xff1b1e40
 80032ec:	000f423f 	.word	0x000f423f
 80032f0:	00124f7f 	.word	0x00124f7f
 80032f4:	0013d620 	.word	0x0013d620
 80032f8:	fee5b660 	.word	0xfee5b660
 80032fc:	0016e35f 	.word	0x0016e35f
 8003300:	feced300 	.word	0xfeced300
 8003304:	001b7740 	.word	0x001b7740
 8003308:	feb35bc0 	.word	0xfeb35bc0
 800330c:	002191c0 	.word	0x002191c0
 8003310:	00387520 	.word	0x00387520
 8003314:	fe5954e0 	.word	0xfe5954e0
 8003318:	00419ce0 	.word	0x00419ce0

0800331c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800331c:	6883      	ldr	r3, [r0, #8]
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6083      	str	r3, [r0, #8]
}
 8003324:	2000      	movs	r0, #0
 8003326:	4770      	bx	lr

08003328 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003328:	6883      	ldr	r3, [r0, #8]
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6083      	str	r3, [r0, #8]
}
 8003330:	2000      	movs	r0, #0
 8003332:	4770      	bx	lr

08003334 <USB_FlushTxFifo>:
{
 8003334:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	9301      	str	r3, [sp, #4]
    count++;
 800333a:	9b01      	ldr	r3, [sp, #4]
 800333c:	3301      	adds	r3, #1
 800333e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003340:	9b01      	ldr	r3, [sp, #4]
 8003342:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003346:	d815      	bhi.n	8003374 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003348:	6903      	ldr	r3, [r0, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	daf5      	bge.n	800333a <USB_FlushTxFifo+0x6>
  count = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003352:	0189      	lsls	r1, r1, #6
 8003354:	f041 0120 	orr.w	r1, r1, #32
 8003358:	6101      	str	r1, [r0, #16]
    count++;
 800335a:	9b01      	ldr	r3, [sp, #4]
 800335c:	3301      	adds	r3, #1
 800335e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003360:	9b01      	ldr	r3, [sp, #4]
 8003362:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003366:	d808      	bhi.n	800337a <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003368:	6903      	ldr	r3, [r0, #16]
 800336a:	f013 0f20 	tst.w	r3, #32
 800336e:	d1f4      	bne.n	800335a <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8003370:	2000      	movs	r0, #0
 8003372:	e000      	b.n	8003376 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8003374:	2003      	movs	r0, #3
}
 8003376:	b002      	add	sp, #8
 8003378:	4770      	bx	lr
      return HAL_TIMEOUT;
 800337a:	2003      	movs	r0, #3
 800337c:	e7fb      	b.n	8003376 <USB_FlushTxFifo+0x42>

0800337e <USB_FlushRxFifo>:
{
 800337e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	9301      	str	r3, [sp, #4]
    count++;
 8003384:	9b01      	ldr	r3, [sp, #4]
 8003386:	3301      	adds	r3, #1
 8003388:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800338a:	9b01      	ldr	r3, [sp, #4]
 800338c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003390:	d813      	bhi.n	80033ba <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003392:	6903      	ldr	r3, [r0, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	daf5      	bge.n	8003384 <USB_FlushRxFifo+0x6>
  count = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800339c:	2310      	movs	r3, #16
 800339e:	6103      	str	r3, [r0, #16]
    count++;
 80033a0:	9b01      	ldr	r3, [sp, #4]
 80033a2:	3301      	adds	r3, #1
 80033a4:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80033a6:	9b01      	ldr	r3, [sp, #4]
 80033a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033ac:	d808      	bhi.n	80033c0 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033ae:	6903      	ldr	r3, [r0, #16]
 80033b0:	f013 0f10 	tst.w	r3, #16
 80033b4:	d1f4      	bne.n	80033a0 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 80033b6:	2000      	movs	r0, #0
 80033b8:	e000      	b.n	80033bc <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 80033ba:	2003      	movs	r0, #3
}
 80033bc:	b002      	add	sp, #8
 80033be:	4770      	bx	lr
      return HAL_TIMEOUT;
 80033c0:	2003      	movs	r0, #3
 80033c2:	e7fb      	b.n	80033bc <USB_FlushRxFifo+0x3e>

080033c4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80033c4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80033c8:	4319      	orrs	r1, r3
 80033ca:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 80033ce:	2000      	movs	r0, #0
 80033d0:	4770      	bx	lr
	...

080033d4 <USB_DevInit>:
{
 80033d4:	b084      	sub	sp, #16
 80033d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d8:	4604      	mov	r4, r0
 80033da:	a807      	add	r0, sp, #28
 80033dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	e006      	b.n	80033f2 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 80033e4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80033e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80033ec:	2100      	movs	r1, #0
 80033ee:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80033f0:	3301      	adds	r3, #1
 80033f2:	2b0e      	cmp	r3, #14
 80033f4:	d9f6      	bls.n	80033e4 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 80033f6:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 80033fa:	bb06      	cbnz	r6, 800343e <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033fc:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003408:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800340a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800340e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003410:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003412:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003416:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003418:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800341a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800341e:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003426:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800342a:	2b01      	cmp	r3, #1
 800342c:	d115      	bne.n	800345a <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 800342e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003432:	b96b      	cbnz	r3, 8003450 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003434:	2100      	movs	r1, #0
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff ffc4 	bl	80033c4 <USB_SetDevSpeed>
 800343c:	e011      	b.n	8003462 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800343e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003440:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003444:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003446:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003448:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800344c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800344e:	e7e7      	b.n	8003420 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003450:	2101      	movs	r1, #1
 8003452:	4620      	mov	r0, r4
 8003454:	f7ff ffb6 	bl	80033c4 <USB_SetDevSpeed>
 8003458:	e003      	b.n	8003462 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800345a:	2103      	movs	r1, #3
 800345c:	4620      	mov	r0, r4
 800345e:	f7ff ffb1 	bl	80033c4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003462:	2110      	movs	r1, #16
 8003464:	4620      	mov	r0, r4
 8003466:	f7ff ff65 	bl	8003334 <USB_FlushTxFifo>
 800346a:	4605      	mov	r5, r0
 800346c:	b100      	cbz	r0, 8003470 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 800346e:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003470:	4620      	mov	r0, r4
 8003472:	f7ff ff84 	bl	800337e <USB_FlushRxFifo>
 8003476:	b100      	cbz	r0, 800347a <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8003478:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800347a:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 800347e:	2300      	movs	r3, #0
 8003480:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003484:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003488:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800348c:	e00a      	b.n	80034a4 <USB_DevInit+0xd0>
      if (i == 0U)
 800348e:	b9cb      	cbnz	r3, 80034c4 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003490:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003494:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003498:	2200      	movs	r2, #0
 800349a:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800349c:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80034a0:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034a2:	3301      	adds	r3, #1
 80034a4:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80034a8:	4299      	cmp	r1, r3
 80034aa:	d910      	bls.n	80034ce <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034ac:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80034b0:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 80034b4:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 80034b8:	2800      	cmp	r0, #0
 80034ba:	dbe8      	blt.n	800348e <USB_DevInit+0xba>
      USBx_INEP(i)->DIEPCTL = 0U;
 80034bc:	2000      	movs	r0, #0
 80034be:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80034c2:	e7e9      	b.n	8003498 <USB_DevInit+0xc4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80034c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c8:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80034cc:	e7e4      	b.n	8003498 <USB_DevInit+0xc4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	e00a      	b.n	80034e8 <USB_DevInit+0x114>
      if (i == 0U)
 80034d2:	b1bb      	cbz	r3, 8003504 <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80034d4:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 80034d8:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80034dc:	2200      	movs	r2, #0
 80034de:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80034e0:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80034e4:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034e6:	3301      	adds	r3, #1
 80034e8:	4299      	cmp	r1, r3
 80034ea:	d910      	bls.n	800350e <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034ec:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80034f0:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 80034f4:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 80034f8:	2f00      	cmp	r7, #0
 80034fa:	dbea      	blt.n	80034d2 <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80034fc:	2700      	movs	r7, #0
 80034fe:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8003502:	e7eb      	b.n	80034dc <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003504:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8003508:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800350c:	e7e6      	b.n	80034dc <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800350e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8003512:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003516:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800351e:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8003522:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8003524:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8003528:	b91b      	cbnz	r3, 8003532 <USB_DevInit+0x15e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800352a:	69a3      	ldr	r3, [r4, #24]
 800352c:	f043 0310 	orr.w	r3, r3, #16
 8003530:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003532:	69a2      	ldr	r2, [r4, #24]
 8003534:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <USB_DevInit+0x190>)
 8003536:	4313      	orrs	r3, r2
 8003538:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800353a:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 800353e:	b11b      	cbz	r3, 8003548 <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003540:	69a3      	ldr	r3, [r4, #24]
 8003542:	f043 0308 	orr.w	r3, r3, #8
 8003546:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003548:	2e01      	cmp	r6, #1
 800354a:	d004      	beq.n	8003556 <USB_DevInit+0x182>
}
 800354c:	4628      	mov	r0, r5
 800354e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003552:	b004      	add	sp, #16
 8003554:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003556:	69a3      	ldr	r3, [r4, #24]
 8003558:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	61a3      	str	r3, [r4, #24]
 8003562:	e7f3      	b.n	800354c <USB_DevInit+0x178>
 8003564:	803c3800 	.word	0x803c3800

08003568 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003568:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800356c:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003570:	2b02      	cmp	r3, #2
 8003572:	d004      	beq.n	800357e <USB_GetDevSpeed+0x16>
 8003574:	2b06      	cmp	r3, #6
 8003576:	d004      	beq.n	8003582 <USB_GetDevSpeed+0x1a>
 8003578:	b92b      	cbnz	r3, 8003586 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800357a:	2000      	movs	r0, #0
 800357c:	4770      	bx	lr
 800357e:	2002      	movs	r0, #2
 8003580:	4770      	bx	lr
 8003582:	2002      	movs	r0, #2
 8003584:	4770      	bx	lr
 8003586:	200f      	movs	r0, #15
}
 8003588:	4770      	bx	lr

0800358a <USB_ActivateEndpoint>:
{
 800358a:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800358c:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8003590:	784b      	ldrb	r3, [r1, #1]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d023      	beq.n	80035de <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003596:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 800359a:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 800359e:	f00c 040f 	and.w	r4, ip, #15
 80035a2:	2201      	movs	r2, #1
 80035a4:	40a2      	lsls	r2, r4
 80035a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035aa:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80035ae:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80035b2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80035b6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80035ba:	d10e      	bne.n	80035da <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80035c0:	688a      	ldr	r2, [r1, #8]
 80035c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80035c6:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035c8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035d6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80035da:	2000      	movs	r0, #0
 80035dc:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80035de:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80035e2:	f00c 0e0f 	and.w	lr, ip, #15
 80035e6:	fa03 f30e 	lsl.w	r3, r3, lr
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80035f2:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80035f6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80035fa:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80035fe:	d1ec      	bne.n	80035da <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003600:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003604:	688a      	ldr	r2, [r1, #8]
 8003606:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800360a:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800360c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003610:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003614:	4313      	orrs	r3, r2
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800361e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003622:	e7da      	b.n	80035da <USB_ActivateEndpoint+0x50>

08003624 <USB_EPStopXfer>:
{
 8003624:	b410      	push	{r4}
 8003626:	b083      	sub	sp, #12
 8003628:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 800362e:	7848      	ldrb	r0, [r1, #1]
 8003630:	2801      	cmp	r0, #1
 8003632:	d00b      	beq.n	800364c <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003634:	780b      	ldrb	r3, [r1, #0]
 8003636:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800363a:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800363e:	2800      	cmp	r0, #0
 8003640:	db2d      	blt.n	800369e <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8003642:	2000      	movs	r0, #0
}
 8003644:	b003      	add	sp, #12
 8003646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800364a:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800364c:	780b      	ldrb	r3, [r1, #0]
 800364e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003652:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8003656:	2c00      	cmp	r4, #0
 8003658:	db01      	blt.n	800365e <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800365a:	2000      	movs	r0, #0
 800365c:	e7f2      	b.n	8003644 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800365e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8003662:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8003666:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800366a:	780b      	ldrb	r3, [r1, #0]
 800366c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003670:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8003674:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8003678:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 800367c:	9b01      	ldr	r3, [sp, #4]
 800367e:	3301      	adds	r3, #1
 8003680:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8003682:	9c01      	ldr	r4, [sp, #4]
 8003684:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003688:	429c      	cmp	r4, r3
 800368a:	d8db      	bhi.n	8003644 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800368c:	780b      	ldrb	r3, [r1, #0]
 800368e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003692:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8003696:	2b00      	cmp	r3, #0
 8003698:	dbf0      	blt.n	800367c <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 800369a:	2000      	movs	r0, #0
 800369c:	e7d2      	b.n	8003644 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800369e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80036a2:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80036a6:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80036aa:	780b      	ldrb	r3, [r1, #0]
 80036ac:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80036b0:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80036b4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80036b8:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 80036bc:	9b01      	ldr	r3, [sp, #4]
 80036be:	3301      	adds	r3, #1
 80036c0:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80036c2:	9801      	ldr	r0, [sp, #4]
 80036c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80036c8:	4298      	cmp	r0, r3
 80036ca:	d808      	bhi.n	80036de <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80036cc:	780b      	ldrb	r3, [r1, #0]
 80036ce:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80036d2:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	dbf0      	blt.n	80036bc <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 80036da:	2000      	movs	r0, #0
 80036dc:	e7b2      	b.n	8003644 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 80036de:	2001      	movs	r0, #1
 80036e0:	e7b0      	b.n	8003644 <USB_EPStopXfer+0x20>

080036e2 <USB_WritePacket>:
{
 80036e2:	b510      	push	{r4, lr}
 80036e4:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80036e8:	b984      	cbnz	r4, 800370c <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80036ea:	3303      	adds	r3, #3
 80036ec:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 80036f0:	f04f 0c00 	mov.w	ip, #0
 80036f4:	e008      	b.n	8003708 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80036f6:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80036fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036fe:	f851 4b04 	ldr.w	r4, [r1], #4
 8003702:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8003704:	f10c 0c01 	add.w	ip, ip, #1
 8003708:	45f4      	cmp	ip, lr
 800370a:	d3f4      	bcc.n	80036f6 <USB_WritePacket+0x14>
}
 800370c:	2000      	movs	r0, #0
 800370e:	bd10      	pop	{r4, pc}

08003710 <USB_EPStartXfer>:
{
 8003710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003712:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8003714:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8003716:	784b      	ldrb	r3, [r1, #1]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d02d      	beq.n	8003778 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800371c:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8003720:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8003724:	691d      	ldr	r5, [r3, #16]
 8003726:	f36f 0512 	bfc	r5, #0, #19
 800372a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800372c:	691d      	ldr	r5, [r3, #16]
 800372e:	f36f 45dc 	bfc	r5, #19, #10
 8003732:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8003734:	2c00      	cmp	r4, #0
 8003736:	f040 80ce 	bne.w	80038d6 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 800373a:	690c      	ldr	r4, [r1, #16]
 800373c:	b10c      	cbz	r4, 8003742 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 800373e:	688c      	ldr	r4, [r1, #8]
 8003740:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8003742:	688c      	ldr	r4, [r1, #8]
 8003744:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003746:	691d      	ldr	r5, [r3, #16]
 8003748:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800374c:	432c      	orrs	r4, r5
 800374e:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003750:	691c      	ldr	r4, [r3, #16]
 8003752:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003756:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8003758:	2a01      	cmp	r2, #1
 800375a:	f000 80df 	beq.w	800391c <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 800375e:	790b      	ldrb	r3, [r1, #4]
 8003760:	2b01      	cmp	r3, #1
 8003762:	f000 80e1 	beq.w	8003928 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003766:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800376a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800376e:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8003772:	2000      	movs	r0, #0
 8003774:	b003      	add	sp, #12
 8003776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8003778:	690b      	ldr	r3, [r1, #16]
 800377a:	bb73      	cbnz	r3, 80037da <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800377c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003780:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003784:	f36f 45dc 	bfc	r5, #19, #10
 8003788:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800378c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003790:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003794:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003798:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800379c:	f36f 0512 	bfc	r5, #0, #19
 80037a0:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 80037a4:	2a01      	cmp	r2, #1
 80037a6:	d054      	beq.n	8003852 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037a8:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80037ac:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80037b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80037b4:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80037b8:	790b      	ldrb	r3, [r1, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d072      	beq.n	80038a4 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 80037be:	690b      	ldr	r3, [r1, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0d6      	beq.n	8003772 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037c4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 80037c8:	7809      	ldrb	r1, [r1, #0]
 80037ca:	f001 010f 	and.w	r1, r1, #15
 80037ce:	2201      	movs	r2, #1
 80037d0:	408a      	lsls	r2, r1
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 80037d8:	e7cb      	b.n	8003772 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037da:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80037de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e2:	691d      	ldr	r5, [r3, #16]
 80037e4:	f36f 0512 	bfc	r5, #0, #19
 80037e8:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037ea:	691d      	ldr	r5, [r3, #16]
 80037ec:	f36f 45dc 	bfc	r5, #19, #10
 80037f0:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 80037f2:	b984      	cbnz	r4, 8003816 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 80037f4:	690e      	ldr	r6, [r1, #16]
 80037f6:	688d      	ldr	r5, [r1, #8]
 80037f8:	42ae      	cmp	r6, r5
 80037fa:	d900      	bls.n	80037fe <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 80037fc:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037fe:	691d      	ldr	r5, [r3, #16]
 8003800:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003804:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003806:	691d      	ldr	r5, [r3, #16]
 8003808:	690e      	ldr	r6, [r1, #16]
 800380a:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 800380e:	ea45 050c 	orr.w	r5, r5, ip
 8003812:	611d      	str	r5, [r3, #16]
 8003814:	e7c6      	b.n	80037a4 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003816:	690d      	ldr	r5, [r1, #16]
 8003818:	688e      	ldr	r6, [r1, #8]
 800381a:	4435      	add	r5, r6
 800381c:	3d01      	subs	r5, #1
 800381e:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8003822:	691e      	ldr	r6, [r3, #16]
 8003824:	fa1f fc85 	uxth.w	ip, r5
 8003828:	4f49      	ldr	r7, [pc, #292]	@ (8003950 <USB_EPStartXfer+0x240>)
 800382a:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 800382e:	4335      	orrs	r5, r6
 8003830:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8003832:	790d      	ldrb	r5, [r1, #4]
 8003834:	2d01      	cmp	r5, #1
 8003836:	d1e6      	bne.n	8003806 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003838:	691d      	ldr	r5, [r3, #16]
 800383a:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 800383e:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003840:	691d      	ldr	r5, [r3, #16]
 8003842:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8003846:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 800384a:	ea45 050c 	orr.w	r5, r5, ip
 800384e:	611d      	str	r5, [r3, #16]
 8003850:	e7d9      	b.n	8003806 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8003852:	69cb      	ldr	r3, [r1, #28]
 8003854:	b11b      	cbz	r3, 800385e <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003856:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800385a:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 800385e:	790b      	ldrb	r3, [r1, #4]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d008      	beq.n	8003876 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003864:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003868:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800386c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003870:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8003874:	e77d      	b.n	8003772 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003876:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800387a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800387e:	d108      	bne.n	8003892 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003880:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003884:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003888:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800388c:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003890:	e7e8      	b.n	8003864 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003892:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003896:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389e:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 80038a2:	e7df      	b.n	8003864 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038a4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80038a8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80038ac:	d10c      	bne.n	80038c8 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038ae:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80038b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038b6:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038ba:	9200      	str	r2, [sp, #0]
 80038bc:	8a0b      	ldrh	r3, [r1, #16]
 80038be:	780a      	ldrb	r2, [r1, #0]
 80038c0:	68c9      	ldr	r1, [r1, #12]
 80038c2:	f7ff ff0e 	bl	80036e2 <USB_WritePacket>
 80038c6:	e754      	b.n	8003772 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038c8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d0:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 80038d4:	e7f1      	b.n	80038ba <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 80038d6:	690c      	ldr	r4, [r1, #16]
 80038d8:	b954      	cbnz	r4, 80038f0 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038da:	691c      	ldr	r4, [r3, #16]
 80038dc:	688d      	ldr	r5, [r1, #8]
 80038de:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80038e2:	432c      	orrs	r4, r5
 80038e4:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038e6:	691c      	ldr	r4, [r3, #16]
 80038e8:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80038ec:	611c      	str	r4, [r3, #16]
 80038ee:	e733      	b.n	8003758 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038f0:	688d      	ldr	r5, [r1, #8]
 80038f2:	442c      	add	r4, r5
 80038f4:	3c01      	subs	r4, #1
 80038f6:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 80038fa:	b2a4      	uxth	r4, r4
 80038fc:	fb04 f505 	mul.w	r5, r4, r5
 8003900:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003902:	691d      	ldr	r5, [r3, #16]
 8003904:	4e12      	ldr	r6, [pc, #72]	@ (8003950 <USB_EPStartXfer+0x240>)
 8003906:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800390a:	432c      	orrs	r4, r5
 800390c:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800390e:	691c      	ldr	r4, [r3, #16]
 8003910:	6a0d      	ldr	r5, [r1, #32]
 8003912:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003916:	432c      	orrs	r4, r5
 8003918:	611c      	str	r4, [r3, #16]
 800391a:	e71d      	b.n	8003758 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 800391c:	68ca      	ldr	r2, [r1, #12]
 800391e:	2a00      	cmp	r2, #0
 8003920:	f43f af1d 	beq.w	800375e <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003924:	615a      	str	r2, [r3, #20]
 8003926:	e71a      	b.n	800375e <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003928:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800392c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003930:	d106      	bne.n	8003940 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003932:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003936:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800393a:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800393e:	e712      	b.n	8003766 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003940:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003948:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800394c:	e70b      	b.n	8003766 <USB_EPStartXfer+0x56>
 800394e:	bf00      	nop
 8003950:	1ff80000 	.word	0x1ff80000

08003954 <USB_ReadPacket>:
{
 8003954:	b510      	push	{r4, lr}
 8003956:	4684      	mov	ip, r0
 8003958:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800395a:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800395e:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003962:	2300      	movs	r3, #0
 8003964:	e005      	b.n	8003972 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003966:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 800396a:	6809      	ldr	r1, [r1, #0]
 800396c:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003970:	3301      	adds	r3, #1
 8003972:	4573      	cmp	r3, lr
 8003974:	d3f7      	bcc.n	8003966 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003976:	b17a      	cbz	r2, 8003998 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003978:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 800397c:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8003980:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003982:	b2cb      	uxtb	r3, r1
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	fa24 f303 	lsr.w	r3, r4, r3
 800398a:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800398e:	3101      	adds	r1, #1
      remaining_bytes--;
 8003990:	3a01      	subs	r2, #1
 8003992:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003994:	2a00      	cmp	r2, #0
 8003996:	d1f4      	bne.n	8003982 <USB_ReadPacket+0x2e>
}
 8003998:	bd10      	pop	{r4, pc}

0800399a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800399a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800399c:	784a      	ldrb	r2, [r1, #1]
 800399e:	2a01      	cmp	r2, #1
 80039a0:	d014      	beq.n	80039cc <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80039a2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80039a6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 80039aa:	2a00      	cmp	r2, #0
 80039ac:	db06      	blt.n	80039bc <USB_EPSetStall+0x22>
 80039ae:	b12b      	cbz	r3, 80039bc <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80039b0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80039b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039b8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80039bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80039c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039c4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80039c8:	2000      	movs	r0, #0
 80039ca:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80039cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80039d0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	db06      	blt.n	80039e6 <USB_EPSetStall+0x4c>
 80039d8:	b12b      	cbz	r3, 80039e6 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80039da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80039de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039e2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80039e6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80039ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039ee:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80039f2:	e7e9      	b.n	80039c8 <USB_EPSetStall+0x2e>

080039f4 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80039f4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80039f6:	784a      	ldrb	r2, [r1, #1]
 80039f8:	2a01      	cmp	r2, #1
 80039fa:	d00e      	beq.n	8003a1a <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039fc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003a00:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003a04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a08:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003a0c:	790b      	ldrb	r3, [r1, #4]
 8003a0e:	3b02      	subs	r3, #2
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d915      	bls.n	8003a42 <USB_EPClearStall+0x4e>
}
 8003a16:	2000      	movs	r0, #0
 8003a18:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a1a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003a1e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003a22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a26:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003a2a:	790b      	ldrb	r3, [r1, #4]
 8003a2c:	3b02      	subs	r3, #2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d8f0      	bhi.n	8003a16 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a34:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003a40:	e7e9      	b.n	8003a16 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a42:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003a4e:	e7e2      	b.n	8003a16 <USB_EPClearStall+0x22>

08003a50 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003a50:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003a54:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a58:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003a5c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003a60:	0109      	lsls	r1, r1, #4
 8003a62:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8003a66:	430b      	orrs	r3, r1
 8003a68:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	4770      	bx	lr

08003a70 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a70:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003a74:	f023 0303 	bic.w	r3, r3, #3
 8003a78:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003a7c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003a80:	f023 0302 	bic.w	r3, r3, #2
 8003a84:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003a88:	2000      	movs	r0, #0
 8003a8a:	4770      	bx	lr

08003a8c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a8c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003a90:	f023 0303 	bic.w	r3, r3, #3
 8003a94:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a98:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	4770      	bx	lr

08003aa8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003aa8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003aaa:	6980      	ldr	r0, [r0, #24]
}
 8003aac:	4010      	ands	r0, r2
 8003aae:	4770      	bx	lr

08003ab0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003ab0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003ab4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ab8:	69c0      	ldr	r0, [r0, #28]
 8003aba:	4018      	ands	r0, r3
}
 8003abc:	0c00      	lsrs	r0, r0, #16
 8003abe:	4770      	bx	lr

08003ac0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003ac0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003ac4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ac8:	69c0      	ldr	r0, [r0, #28]
 8003aca:	4018      	ands	r0, r3
}
 8003acc:	b280      	uxth	r0, r0
 8003ace:	4770      	bx	lr

08003ad0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003ad0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003ad4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003ad8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8003adc:	6940      	ldr	r0, [r0, #20]
}
 8003ade:	4010      	ands	r0, r2
 8003ae0:	4770      	bx	lr

08003ae2 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8003ae2:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003ae6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003aea:	f001 0c0f 	and.w	ip, r1, #15
 8003aee:	fa23 f30c 	lsr.w	r3, r3, ip
 8003af2:	01db      	lsls	r3, r3, #7
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003af8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003afc:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8003b00:	6880      	ldr	r0, [r0, #8]
}
 8003b02:	4018      	ands	r0, r3
 8003b04:	4770      	bx	lr

08003b06 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003b06:	6940      	ldr	r0, [r0, #20]
}
 8003b08:	f000 0001 	and.w	r0, r0, #1
 8003b0c:	4770      	bx	lr

08003b0e <USB_SetCurrentMode>:
{
 8003b0e:	b538      	push	{r3, r4, r5, lr}
 8003b10:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b12:	68c3      	ldr	r3, [r0, #12]
 8003b14:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003b18:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003b1a:	2901      	cmp	r1, #1
 8003b1c:	d013      	beq.n	8003b46 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003b1e:	bb19      	cbnz	r1, 8003b68 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b20:	68c3      	ldr	r3, [r0, #12]
 8003b22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b26:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003b28:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003b2a:	200a      	movs	r0, #10
 8003b2c:	f7fd f92a 	bl	8000d84 <HAL_Delay>
      ms += 10U;
 8003b30:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b32:	4628      	mov	r0, r5
 8003b34:	f7ff ffe7 	bl	8003b06 <USB_GetMode>
 8003b38:	b108      	cbz	r0, 8003b3e <USB_SetCurrentMode+0x30>
 8003b3a:	2cc7      	cmp	r4, #199	@ 0xc7
 8003b3c:	d9f5      	bls.n	8003b2a <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003b3e:	2cc8      	cmp	r4, #200	@ 0xc8
 8003b40:	d014      	beq.n	8003b6c <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003b42:	2000      	movs	r0, #0
}
 8003b44:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b46:	68c3      	ldr	r3, [r0, #12]
 8003b48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b4c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003b4e:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003b50:	200a      	movs	r0, #10
 8003b52:	f7fd f917 	bl	8000d84 <HAL_Delay>
      ms += 10U;
 8003b56:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f7ff ffd4 	bl	8003b06 <USB_GetMode>
 8003b5e:	2801      	cmp	r0, #1
 8003b60:	d0ed      	beq.n	8003b3e <USB_SetCurrentMode+0x30>
 8003b62:	2cc7      	cmp	r4, #199	@ 0xc7
 8003b64:	d9f4      	bls.n	8003b50 <USB_SetCurrentMode+0x42>
 8003b66:	e7ea      	b.n	8003b3e <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003b68:	2001      	movs	r0, #1
 8003b6a:	e7eb      	b.n	8003b44 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	e7e9      	b.n	8003b44 <USB_SetCurrentMode+0x36>

08003b70 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003b70:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003b74:	f36f 030a 	bfc	r3, #0, #11
 8003b78:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003b7c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b84:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003b88:	2000      	movs	r0, #0
 8003b8a:	4770      	bx	lr

08003b8c <USB_EP0_OutStart>:
{
 8003b8c:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b8e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003b90:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <USB_EP0_OutStart+0x5c>)
 8003b92:	429c      	cmp	r4, r3
 8003b94:	d903      	bls.n	8003b9e <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b96:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	db16      	blt.n	8003bcc <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003b9e:	2400      	movs	r4, #0
 8003ba0:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ba4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003ba8:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003bac:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003bb0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003bb4:	f044 0418 	orr.w	r4, r4, #24
 8003bb8:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003bbc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003bc0:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8003bc4:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8003bc8:	2901      	cmp	r1, #1
 8003bca:	d003      	beq.n	8003bd4 <USB_EP0_OutStart+0x48>
}
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bd2:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003bd4:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003bd8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003bdc:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003be0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003be4:	e7f2      	b.n	8003bcc <USB_EP0_OutStart+0x40>
 8003be6:	bf00      	nop
 8003be8:	4f54300a 	.word	0x4f54300a

08003bec <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003bec:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003bf0:	4905      	ldr	r1, [pc, #20]	@ (8003c08 <__NVIC_SystemReset+0x1c>)
 8003bf2:	68ca      	ldr	r2, [r1, #12]
 8003bf4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003bf8:	4b04      	ldr	r3, [pc, #16]	@ (8003c0c <__NVIC_SystemReset+0x20>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60cb      	str	r3, [r1, #12]
 8003bfe:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003c02:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003c04:	e7fd      	b.n	8003c02 <__NVIC_SystemReset+0x16>
 8003c06:	bf00      	nop
 8003c08:	e000ed00 	.word	0xe000ed00
 8003c0c:	05fa0004 	.word	0x05fa0004

08003c10 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8003c10:	231b      	movs	r3, #27
 8003c12:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_CfgDesc;
}
 8003c14:	4800      	ldr	r0, [pc, #0]	@ (8003c18 <USBD_DFU_GetCfgDesc+0x8>)
 8003c16:	4770      	bx	lr
 8003c18:	2000001c 	.word	0x2000001c

08003c1c <USBD_DFU_EP0_RxReady>:
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	4770      	bx	lr

08003c20 <USBD_DFU_SOF>:
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8003c20:	2000      	movs	r0, #0
 8003c22:	4770      	bx	lr

08003c24 <USBD_DFU_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8003c24:	230a      	movs	r3, #10
 8003c26:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_DeviceQualifierDesc;
}
 8003c28:	4800      	ldr	r0, [pc, #0]	@ (8003c2c <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8003c2a:	4770      	bx	lr
 8003c2c:	20000010 	.word	0x20000010

08003c30 <DFU_ClearStatus>:
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003c30:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003c34:	33b0      	adds	r3, #176	@ 0xb0
 8003c36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hdfu == NULL)
 8003c3a:	b1a3      	cbz	r3, 8003c66 <DFU_ClearStatus+0x36>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8003c3c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8003c40:	2a0a      	cmp	r2, #10
 8003c42:	d011      	beq.n	8003c68 <DFU_ClearStatus+0x38>
    hdfu->dev_status[5] = 0U; /* iString */
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8003c44:	210a      	movs	r1, #10
 8003c46:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8003c4a:	220e      	movs	r2, #14
 8003c4c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003c56:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8003c5a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8003c5e:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8003c62:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  }
}
 8003c66:	4770      	bx	lr
    hdfu->dev_state = DFU_STATE_IDLE;
 8003c68:	2102      	movs	r1, #2
 8003c6a:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8003c74:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003c78:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8003c7c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8003c80:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8003c84:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 8003c88:	4770      	bx	lr

08003c8a <DFU_Abort>:
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003c8a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003c8e:	33b0      	adds	r3, #176	@ 0xb0
 8003c90:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hdfu == NULL)
 8003c94:	b1eb      	cbz	r3, 8003cd2 <DFU_Abort+0x48>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8003c96:	f893 141c 	ldrb.w	r1, [r3, #1052]	@ 0x41c
 8003c9a:	2909      	cmp	r1, #9
 8003c9c:	d819      	bhi.n	8003cd2 <DFU_Abort+0x48>
 8003c9e:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 8003ca2:	40ca      	lsrs	r2, r1
 8003ca4:	f012 0f01 	tst.w	r2, #1
 8003ca8:	d013      	beq.n	8003cd2 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8003caa:	2102      	movs	r1, #2
 8003cac:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8003cb6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003cba:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8003cbe:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8003cc2:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8003cc6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 8003cca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8003cce:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }
}
 8003cd2:	4770      	bx	lr

08003cd4 <USBD_DFU_GetUsrStringDesc>:
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8003cd4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003cd8:	33b0      	adds	r3, #176	@ 0xb0
 8003cda:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003cde:	6843      	ldr	r3, [r0, #4]
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8003ce0:	2906      	cmp	r1, #6
 8003ce2:	d807      	bhi.n	8003cf4 <USBD_DFU_GetUsrStringDesc+0x20>
{
 8003ce4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8003ce6:	4c05      	ldr	r4, [pc, #20]	@ (8003cfc <USBD_DFU_GetUsrStringDesc+0x28>)
 8003ce8:	4621      	mov	r1, r4
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	f001 f93a 	bl	8004f64 <USBD_GetString>
    return USBD_StrDesc;
 8003cf0:	4620      	mov	r0, r4
}
 8003cf2:	bd10      	pop	{r4, pc}
    *length = 0U;
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	8010      	strh	r0, [r2, #0]
}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000280 	.word	0x20000280

08003d00 <USBD_DFU_GetDfuFuncDesc>:
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pDfuDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8003d00:	8842      	ldrh	r2, [r0, #2]
 8003d02:	7803      	ldrb	r3, [r0, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d914      	bls.n	8003d32 <USBD_DFU_GetDfuFuncDesc+0x32>
{
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	4604      	mov	r4, r0
  {
    ptr = desc->bLength;
 8003d0e:	f8ad 3006 	strh.w	r3, [sp, #6]

    while (ptr < desc->wTotalLength)
 8003d12:	8863      	ldrh	r3, [r4, #2]
 8003d14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d207      	bcs.n	8003d2c <USBD_DFU_GetDfuFuncDesc+0x2c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8003d1c:	f10d 0106 	add.w	r1, sp, #6
 8003d20:	f000 fd8d 	bl	800483e <USBD_GetNextDesc>

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8003d24:	7843      	ldrb	r3, [r0, #1]
 8003d26:	2b21      	cmp	r3, #33	@ 0x21
 8003d28:	d1f3      	bne.n	8003d12 <USBD_DFU_GetDfuFuncDesc+0x12>
 8003d2a:	e000      	b.n	8003d2e <USBD_DFU_GetDfuFuncDesc+0x2e>
  uint8_t *pDfuDesc = NULL;
 8003d2c:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return pDfuDesc;
}
 8003d2e:	b002      	add	sp, #8
 8003d30:	bd10      	pop	{r4, pc}
  uint8_t *pDfuDesc = NULL;
 8003d32:	2000      	movs	r0, #0
}
 8003d34:	4770      	bx	lr

08003d36 <DFU_Leave>:
{
 8003d36:	b570      	push	{r4, r5, r6, lr}
 8003d38:	4604      	mov	r4, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003d3a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003d3e:	33b0      	adds	r3, #176	@ 0xb0
 8003d40:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8003d44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003d48:	685e      	ldr	r6, [r3, #4]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8003d4a:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8003d4e:	f7ff ffd7 	bl	8003d00 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8003d52:	b1a5      	cbz	r5, 8003d7e <DFU_Leave+0x48>
 8003d54:	b19e      	cbz	r6, 8003d7e <DFU_Leave+0x48>
 8003d56:	b190      	cbz	r0, 8003d7e <DFU_Leave+0x48>
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f885 341d 	strb.w	r3, [r5, #1053]	@ 0x41d
  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 8003d5e:	7883      	ldrb	r3, [r0, #2]
 8003d60:	f013 0f04 	tst.w	r3, #4
 8003d64:	d00c      	beq.n	8003d80 <DFU_Leave+0x4a>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8003d66:	2206      	movs	r2, #6
 8003d68:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003d72:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8003d76:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8003d7a:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
}
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8003d80:	2208      	movs	r2, #8
 8003d82:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003d8c:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8003d90:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8003d94:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
    (void)USBD_Stop(pdev);
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 fb8d 	bl	80044b8 <USBD_Stop>
    NVIC_SystemReset();
 8003d9e:	f7ff ff25 	bl	8003bec <__NVIC_SystemReset>

08003da2 <USBD_DFU_EP0_TxReady>:
{
 8003da2:	b510      	push	{r4, lr}
 8003da4:	b082      	sub	sp, #8
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003da6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003daa:	33b0      	adds	r3, #176	@ 0xb0
 8003dac:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8003db0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003db4:	685a      	ldr	r2, [r3, #4]
  if (hdfu == NULL)
 8003db6:	2c00      	cmp	r4, #0
 8003db8:	f000 808c 	beq.w	8003ed4 <USBD_DFU_EP0_TxReady+0x132>
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8003dbc:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d005      	beq.n	8003dd0 <USBD_DFU_EP0_TxReady+0x2e>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8003dc4:	2b07      	cmp	r3, #7
 8003dc6:	f000 8081 	beq.w	8003ecc <USBD_DFU_EP0_TxReady+0x12a>
    return (uint8_t)USBD_FAIL;
 8003dca:	2003      	movs	r0, #3
}
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd10      	pop	{r4, pc}
    if (hdfu->wblock_num == 0U)
 8003dd0:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 8003dd4:	2900      	cmp	r1, #0
 8003dd6:	d14a      	bne.n	8003e6e <USBD_DFU_EP0_TxReady+0xcc>
      if (hdfu->wlength == 1U)
 8003dd8:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d053      	beq.n	8003e88 <USBD_DFU_EP0_TxReady+0xe6>
      else if (hdfu->wlength == 5U)
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d136      	bne.n	8003e52 <USBD_DFU_EP0_TxReady+0xb0>
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8003de4:	7823      	ldrb	r3, [r4, #0]
 8003de6:	2b21      	cmp	r3, #33	@ 0x21
 8003de8:	d020      	beq.n	8003e2c <USBD_DFU_EP0_TxReady+0x8a>
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8003dea:	2b41      	cmp	r3, #65	@ 0x41
 8003dec:	d174      	bne.n	8003ed8 <USBD_DFU_EP0_TxReady+0x136>
          app_addr_ptr = hdfu->buffer.d8[1];
 8003dee:	7863      	ldrb	r3, [r4, #1]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8003df0:	78a1      	ldrb	r1, [r4, #2]
 8003df2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8003df6:	78e1      	ldrb	r1, [r4, #3]
 8003df8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8003dfc:	7920      	ldrb	r0, [r4, #4]
          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8003dfe:	68d2      	ldr	r2, [r2, #12]
 8003e00:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 8003e04:	4790      	blx	r2
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d03e      	beq.n	8003e88 <USBD_DFU_EP0_TxReady+0xe6>
            hdfu->dev_state = DFU_STATE_ERROR;
 8003e0a:	220a      	movs	r2, #10
 8003e0c:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8003e10:	230b      	movs	r3, #11
 8003e12:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8003e1c:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8003e20:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8003e24:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 8003e28:	2003      	movs	r0, #3
 8003e2a:	e7cf      	b.n	8003dcc <USBD_DFU_EP0_TxReady+0x2a>
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8003e2c:	7863      	ldrb	r3, [r4, #1]
 8003e2e:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8003e32:	78a2      	ldrb	r2, [r4, #2]
 8003e34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003e38:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8003e3c:	78e2      	ldrb	r2, [r4, #3]
 8003e3e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8003e42:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8003e46:	7922      	ldrb	r2, [r4, #4]
 8003e48:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8003e4c:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
 8003e50:	e01a      	b.n	8003e88 <USBD_DFU_EP0_TxReady+0xe6>
        hdfu->wlength = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8003e58:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
        req.bmRequest = 0U;
 8003e5c:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8003e66:	4669      	mov	r1, sp
 8003e68:	f000 fd0e 	bl	8004888 <USBD_CtlError>
 8003e6c:	e00c      	b.n	8003e88 <USBD_DFU_EP0_TxReady+0xe6>
      if (hdfu->wblock_num > 1U)
 8003e6e:	2901      	cmp	r1, #1
 8003e70:	d90a      	bls.n	8003e88 <USBD_DFU_EP0_TxReady+0xe6>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8003e72:	3902      	subs	r1, #2
 8003e74:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8003e78:	6913      	ldr	r3, [r2, #16]
 8003e7a:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8003e7e:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8003e82:	4620      	mov	r0, r4
 8003e84:	4798      	blx	r3
 8003e86:	b980      	cbnz	r0, 8003eaa <USBD_DFU_EP0_TxReady+0x108>
    hdfu->wlength = 0U;
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f8c4 0404 	str.w	r0, [r4, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8003e8e:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8003e92:	2303      	movs	r3, #3
 8003e94:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8003e98:	f884 0415 	strb.w	r0, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003e9c:	f884 0416 	strb.w	r0, [r4, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8003ea0:	f884 0417 	strb.w	r0, [r4, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8003ea4:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
 8003ea8:	e790      	b.n	8003dcc <USBD_DFU_EP0_TxReady+0x2a>
          hdfu->dev_state = DFU_STATE_ERROR;
 8003eaa:	220a      	movs	r2, #10
 8003eac:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8003eb0:	230b      	movs	r3, #11
 8003eb2:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8003ebc:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8003ec0:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8003ec4:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 8003ec8:	2003      	movs	r0, #3
 8003eca:	e77f      	b.n	8003dcc <USBD_DFU_EP0_TxReady+0x2a>
    DFU_Leave(pdev);
 8003ecc:	f7ff ff33 	bl	8003d36 <DFU_Leave>
  return (uint8_t)USBD_OK;
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	e77b      	b.n	8003dcc <USBD_DFU_EP0_TxReady+0x2a>
    return (uint8_t)USBD_FAIL;
 8003ed4:	2003      	movs	r0, #3
 8003ed6:	e779      	b.n	8003dcc <USBD_DFU_EP0_TxReady+0x2a>
          return (uint8_t)USBD_FAIL;
 8003ed8:	2003      	movs	r0, #3
 8003eda:	e777      	b.n	8003dcc <USBD_DFU_EP0_TxReady+0x2a>

08003edc <DFU_Upload>:
{
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003ee0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003ee4:	33b0      	adds	r3, #176	@ 0xb0
 8003ee6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8003eea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003eee:	6859      	ldr	r1, [r3, #4]
  if (hdfu == NULL)
 8003ef0:	2c00      	cmp	r4, #0
 8003ef2:	f000 8087 	beq.w	8004004 <DFU_Upload+0x128>
 8003ef6:	4605      	mov	r5, r0
  if (req->wLength > 0U)
 8003ef8:	88f3      	ldrh	r3, [r6, #6]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d076      	beq.n	8003fec <DFU_Upload+0x110>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8003efe:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d001      	beq.n	8003f0a <DFU_Upload+0x2e>
 8003f06:	2b09      	cmp	r3, #9
 8003f08:	d167      	bne.n	8003fda <DFU_Upload+0xfe>
      hdfu->wblock_num = req->wValue;
 8003f0a:	8870      	ldrh	r0, [r6, #2]
 8003f0c:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8003f10:	88f2      	ldrh	r2, [r6, #6]
 8003f12:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003f16:	bf28      	it	cs
 8003f18:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8003f1c:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      if (hdfu->wblock_num == 0U)
 8003f20:	b9d0      	cbnz	r0, 8003f58 <DFU_Upload+0x7c>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8003f22:	2a03      	cmp	r2, #3
 8003f24:	d916      	bls.n	8003f54 <DFU_Upload+0x78>
 8003f26:	2202      	movs	r2, #2
 8003f28:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003f32:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003f36:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003f3a:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8003f3e:	7023      	strb	r3, [r4, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8003f40:	2321      	movs	r3, #33	@ 0x21
 8003f42:	7063      	strb	r3, [r4, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8003f44:	2341      	movs	r3, #65	@ 0x41
 8003f46:	70a3      	strb	r3, [r4, #2]
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8003f48:	2203      	movs	r2, #3
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f001 f82c 	bl	8004faa <USBD_CtlSendData>
 8003f52:	e057      	b.n	8004004 <DFU_Upload+0x128>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8003f54:	2209      	movs	r2, #9
 8003f56:	e7e7      	b.n	8003f28 <DFU_Upload+0x4c>
      else if (hdfu->wblock_num > 1U)
 8003f58:	2801      	cmp	r0, #1
 8003f5a:	d92d      	bls.n	8003fb8 <DFU_Upload+0xdc>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8003f5c:	f04f 0c09 	mov.w	ip, #9
 8003f60:	f884 c41c 	strb.w	ip, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003f6a:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003f6e:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003f72:	f884 c418 	strb.w	ip, [r4, #1048]	@ 0x418
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8003f76:	3802      	subs	r0, #2
 8003f78:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8003f7c:	694f      	ldr	r7, [r1, #20]
 8003f7e:	4621      	mov	r1, r4
 8003f80:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8003f84:	47b8      	blx	r7
          if (phaddr == NULL)
 8003f86:	4601      	mov	r1, r0
 8003f88:	b128      	cbz	r0, 8003f96 <DFU_Upload+0xba>
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8003f8a:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f001 f80b 	bl	8004faa <USBD_CtlSendData>
 8003f94:	e036      	b.n	8004004 <DFU_Upload+0x128>
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8003f96:	220f      	movs	r2, #15
 8003f98:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
            hdfu->dev_status[1] = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8003fa2:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8003fa6:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8003faa:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
            USBD_CtlError(pdev, req);
 8003fae:	4631      	mov	r1, r6
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	f000 fc69 	bl	8004888 <USBD_CtlError>
 8003fb6:	e025      	b.n	8004004 <DFU_Upload+0x128>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8003fb8:	220f      	movs	r2, #15
 8003fba:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003fc4:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003fc8:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003fcc:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        USBD_CtlError(pdev, req);
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f000 fc58 	bl	8004888 <USBD_CtlError>
 8003fd8:	e014      	b.n	8004004 <DFU_Upload+0x128>
      hdfu->wlength = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8003fe0:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      USBD_CtlError(pdev, req);
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	f000 fc4f 	bl	8004888 <USBD_CtlError>
 8003fea:	e00b      	b.n	8004004 <DFU_Upload+0x128>
    hdfu->dev_state = DFU_STATE_IDLE;
 8003fec:	2202      	movs	r2, #2
 8003fee:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003ff8:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8003ffc:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8004000:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
}
 8004004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004006 <DFU_GetStatus>:
{
 8004006:	b570      	push	{r4, r5, r6, lr}
 8004008:	4604      	mov	r4, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800400a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800400e:	33b0      	adds	r3, #176	@ 0xb0
 8004010:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8004014:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004018:	685e      	ldr	r6, [r3, #4]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800401a:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 800401e:	f7ff fe6f 	bl	8003d00 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8004022:	b16d      	cbz	r5, 8004040 <DFU_GetStatus+0x3a>
 8004024:	b166      	cbz	r6, 8004040 <DFU_GetStatus+0x3a>
 8004026:	b158      	cbz	r0, 8004040 <DFU_GetStatus+0x3a>
  switch (hdfu->dev_state)
 8004028:	f895 341c 	ldrb.w	r3, [r5, #1052]	@ 0x41c
 800402c:	2b03      	cmp	r3, #3
 800402e:	d008      	beq.n	8004042 <DFU_GetStatus+0x3c>
 8004030:	2b06      	cmp	r3, #6
 8004032:	d038      	beq.n	80040a6 <DFU_GetStatus+0xa0>
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8004034:	2206      	movs	r2, #6
 8004036:	f205 4114 	addw	r1, r5, #1044	@ 0x414
 800403a:	4620      	mov	r0, r4
 800403c:	f000 ffb5 	bl	8004faa <USBD_CtlSendData>
}
 8004040:	bd70      	pop	{r4, r5, r6, pc}
      if (hdfu->wlength != 0U)
 8004042:	f8d5 3404 	ldr.w	r3, [r5, #1028]	@ 0x404
 8004046:	b30b      	cbz	r3, 800408c <DFU_GetStatus+0x86>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8004048:	2204      	movs	r2, #4
 800404a:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004054:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8004058:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800405c:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8004060:	f8d5 3400 	ldr.w	r3, [r5, #1024]	@ 0x400
 8004064:	b913      	cbnz	r3, 800406c <DFU_GetStatus+0x66>
 8004066:	782b      	ldrb	r3, [r5, #0]
 8004068:	2b41      	cmp	r3, #65	@ 0x41
 800406a:	d007      	beq.n	800407c <DFU_GetStatus+0x76>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800406c:	69b3      	ldr	r3, [r6, #24]
 800406e:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 8004072:	2101      	movs	r1, #1
 8004074:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8004078:	4798      	blx	r3
 800407a:	e7db      	b.n	8004034 <DFU_GetStatus+0x2e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800407c:	69b3      	ldr	r3, [r6, #24]
 800407e:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 8004082:	2100      	movs	r1, #0
 8004084:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8004088:	4798      	blx	r3
 800408a:	e7d3      	b.n	8004034 <DFU_GetStatus+0x2e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800408c:	2205      	movs	r2, #5
 800408e:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004098:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 800409c:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80040a0:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 80040a4:	e7c6      	b.n	8004034 <DFU_GetStatus+0x2e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80040a6:	f895 341d 	ldrb.w	r3, [r5, #1053]	@ 0x41d
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d012      	beq.n	80040d4 <DFU_GetStatus+0xce>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1c0      	bne.n	8004034 <DFU_GetStatus+0x2e>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 80040b2:	7883      	ldrb	r3, [r0, #2]
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80040b4:	f013 0f04 	tst.w	r3, #4
 80040b8:	d0bc      	beq.n	8004034 <DFU_GetStatus+0x2e>
          hdfu->dev_state = DFU_STATE_IDLE;
 80040ba:	2202      	movs	r2, #2
 80040bc:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 80040c6:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 80040ca:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 80040ce:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 80040d2:	e7af      	b.n	8004034 <DFU_GetStatus+0x2e>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80040d4:	2307      	movs	r3, #7
 80040d6:	f885 341c 	strb.w	r3, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 80040da:	2201      	movs	r2, #1
 80040dc:	f885 2415 	strb.w	r2, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80040e0:	2200      	movs	r2, #0
 80040e2:	f885 2416 	strb.w	r2, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80040e6:	f885 2417 	strb.w	r2, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80040ea:	f885 3418 	strb.w	r3, [r5, #1048]	@ 0x418
 80040ee:	e7a1      	b.n	8004034 <DFU_GetStatus+0x2e>

080040f0 <DFU_GetState>:
{
 80040f0:	b508      	push	{r3, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80040f2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80040f6:	33b0      	adds	r3, #176	@ 0xb0
 80040f8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  if (hdfu == NULL)
 80040fc:	b121      	cbz	r1, 8004108 <DFU_GetState+0x18>
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80040fe:	2201      	movs	r2, #1
 8004100:	f201 411c 	addw	r1, r1, #1052	@ 0x41c
 8004104:	f000 ff51 	bl	8004faa <USBD_CtlSendData>
}
 8004108:	bd08      	pop	{r3, pc}

0800410a <DFU_Download>:
{
 800410a:	b508      	push	{r3, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800410c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004110:	33b0      	adds	r3, #176	@ 0xb0
 8004112:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hdfu == NULL)
 8004116:	b39b      	cbz	r3, 8004180 <DFU_Download+0x76>
  if (req->wLength > 0U)
 8004118:	88ca      	ldrh	r2, [r1, #6]
 800411a:	b1e2      	cbz	r2, 8004156 <DFU_Download+0x4c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800411c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8004120:	2a02      	cmp	r2, #2
 8004122:	d001      	beq.n	8004128 <DFU_Download+0x1e>
 8004124:	2a05      	cmp	r2, #5
 8004126:	d113      	bne.n	8004150 <DFU_Download+0x46>
      hdfu->wblock_num = req->wValue;
 8004128:	884a      	ldrh	r2, [r1, #2]
 800412a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800412e:	88ca      	ldrh	r2, [r1, #6]
 8004130:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004134:	bf28      	it	cs
 8004136:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 800413a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800413e:	2103      	movs	r1, #3
 8004140:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 8004144:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8004148:	4619      	mov	r1, r3
 800414a:	f000 ff44 	bl	8004fd6 <USBD_CtlPrepareRx>
 800414e:	e017      	b.n	8004180 <DFU_Download+0x76>
      USBD_CtlError(pdev, req);
 8004150:	f000 fb9a 	bl	8004888 <USBD_CtlError>
 8004154:	e014      	b.n	8004180 <DFU_Download+0x76>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8004156:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800415a:	2a05      	cmp	r2, #5
 800415c:	d001      	beq.n	8004162 <DFU_Download+0x58>
 800415e:	2a02      	cmp	r2, #2
 8004160:	d10f      	bne.n	8004182 <DFU_Download+0x78>
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8004162:	2201      	movs	r2, #1
 8004164:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8004168:	2106      	movs	r1, #6
 800416a:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004174:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8004178:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800417c:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
}
 8004180:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8004182:	f000 fb81 	bl	8004888 <USBD_CtlError>
 8004186:	e7fb      	b.n	8004180 <DFU_Download+0x76>

08004188 <DFU_Detach>:
{
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	4604      	mov	r4, r0
 800418c:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800418e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004192:	33b0      	adds	r3, #176	@ 0xb0
 8004194:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8004198:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 800419c:	f7ff fdb0 	bl	8003d00 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (pDfuFunc == NULL))
 80041a0:	b345      	cbz	r5, 80041f4 <DFU_Detach+0x6c>
 80041a2:	b338      	cbz	r0, 80041f4 <DFU_Detach+0x6c>
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80041a4:	f895 241c 	ldrb.w	r2, [r5, #1052]	@ 0x41c
 80041a8:	2a09      	cmp	r2, #9
 80041aa:	d819      	bhi.n	80041e0 <DFU_Detach+0x58>
 80041ac:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 80041b0:	40d3      	lsrs	r3, r2
 80041b2:	f013 0f01 	tst.w	r3, #1
 80041b6:	d013      	beq.n	80041e0 <DFU_Detach+0x58>
    hdfu->dev_state = DFU_STATE_IDLE;
 80041b8:	2202      	movs	r2, #2
 80041ba:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80041be:	2300      	movs	r3, #0
 80041c0:	f885 3414 	strb.w	r3, [r5, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80041c4:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80041c8:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80041cc:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80041d0:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 80041d4:	f885 3419 	strb.w	r3, [r5, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 80041d8:	f8c5 3400 	str.w	r3, [r5, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80041dc:	f8c5 3404 	str.w	r3, [r5, #1028]	@ 0x404
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 80041e0:	7883      	ldrb	r3, [r0, #2]
 80041e2:	f013 0f08 	tst.w	r3, #8
 80041e6:	d006      	beq.n	80041f6 <DFU_Detach+0x6e>
    (void)USBD_Stop(pdev);
 80041e8:	4620      	mov	r0, r4
 80041ea:	f000 f965 	bl	80044b8 <USBD_Stop>
    (void)USBD_Start(pdev);
 80041ee:	4620      	mov	r0, r4
 80041f0:	f000 f95e 	bl	80044b0 <USBD_Start>
}
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
    USBD_Delay((uint32_t)req->wValue);
 80041f6:	8870      	ldrh	r0, [r6, #2]
 80041f8:	f7fc fdc4 	bl	8000d84 <HAL_Delay>
 80041fc:	e7fa      	b.n	80041f4 <DFU_Detach+0x6c>

080041fe <USBD_DFU_Setup>:
{
 80041fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004200:	b083      	sub	sp, #12
 8004202:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004204:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004208:	33b0      	adds	r3, #176	@ 0xb0
 800420a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  uint16_t status_info = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hdfu == NULL)
 8004214:	2900      	cmp	r1, #0
 8004216:	f000 8098 	beq.w	800434a <USBD_DFU_Setup+0x14c>
 800421a:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800421c:	7834      	ldrb	r4, [r6, #0]
 800421e:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 8004222:	d02e      	beq.n	8004282 <USBD_DFU_Setup+0x84>
 8004224:	2c20      	cmp	r4, #32
 8004226:	f040 8089 	bne.w	800433c <USBD_DFU_Setup+0x13e>
      switch (req->bRequest)
 800422a:	7874      	ldrb	r4, [r6, #1]
 800422c:	2c06      	cmp	r4, #6
 800422e:	d823      	bhi.n	8004278 <USBD_DFU_Setup+0x7a>
 8004230:	e8df f004 	tbb	[pc, r4]
 8004234:	0e09041e 	.word	0x0e09041e
 8004238:	1612      	.short	0x1612
 800423a:	1a          	.byte	0x1a
 800423b:	00          	.byte	0x00
          DFU_Download(pdev, req);
 800423c:	4631      	mov	r1, r6
 800423e:	f7ff ff64 	bl	800410a <DFU_Download>
  USBD_StatusTypeDef ret = USBD_OK;
 8004242:	2400      	movs	r4, #0
          break;
 8004244:	e07e      	b.n	8004344 <USBD_DFU_Setup+0x146>
          DFU_Upload(pdev, req);
 8004246:	4631      	mov	r1, r6
 8004248:	f7ff fe48 	bl	8003edc <DFU_Upload>
  USBD_StatusTypeDef ret = USBD_OK;
 800424c:	2400      	movs	r4, #0
          break;
 800424e:	e079      	b.n	8004344 <USBD_DFU_Setup+0x146>
          DFU_GetStatus(pdev);
 8004250:	f7ff fed9 	bl	8004006 <DFU_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004254:	2400      	movs	r4, #0
          break;
 8004256:	e075      	b.n	8004344 <USBD_DFU_Setup+0x146>
          DFU_ClearStatus(pdev);
 8004258:	f7ff fcea 	bl	8003c30 <DFU_ClearStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800425c:	2400      	movs	r4, #0
          break;
 800425e:	e071      	b.n	8004344 <USBD_DFU_Setup+0x146>
          DFU_GetState(pdev);
 8004260:	f7ff ff46 	bl	80040f0 <DFU_GetState>
  USBD_StatusTypeDef ret = USBD_OK;
 8004264:	2400      	movs	r4, #0
          break;
 8004266:	e06d      	b.n	8004344 <USBD_DFU_Setup+0x146>
          DFU_Abort(pdev);
 8004268:	f7ff fd0f 	bl	8003c8a <DFU_Abort>
  USBD_StatusTypeDef ret = USBD_OK;
 800426c:	2400      	movs	r4, #0
          break;
 800426e:	e069      	b.n	8004344 <USBD_DFU_Setup+0x146>
          DFU_Detach(pdev, req);
 8004270:	4631      	mov	r1, r6
 8004272:	f7ff ff89 	bl	8004188 <DFU_Detach>
          break;
 8004276:	e065      	b.n	8004344 <USBD_DFU_Setup+0x146>
          USBD_CtlError(pdev, req);
 8004278:	4631      	mov	r1, r6
 800427a:	f000 fb05 	bl	8004888 <USBD_CtlError>
          ret = USBD_FAIL;
 800427e:	2403      	movs	r4, #3
          break;
 8004280:	e060      	b.n	8004344 <USBD_DFU_Setup+0x146>
      switch (req->bRequest)
 8004282:	7877      	ldrb	r7, [r6, #1]
 8004284:	2f0b      	cmp	r7, #11
 8004286:	d854      	bhi.n	8004332 <USBD_DFU_Setup+0x134>
 8004288:	e8df f007 	tbb	[pc, r7]
 800428c:	53535c06 	.word	0x53535c06
 8004290:	53175353 	.word	0x53175353
 8004294:	3f2f5353 	.word	0x3f2f5353
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004298:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d004      	beq.n	80042ac <USBD_DFU_Setup+0xae>
            USBD_CtlError(pdev, req);
 80042a2:	4631      	mov	r1, r6
 80042a4:	f000 faf0 	bl	8004888 <USBD_CtlError>
            ret = USBD_FAIL;
 80042a8:	2403      	movs	r4, #3
 80042aa:	e04b      	b.n	8004344 <USBD_DFU_Setup+0x146>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80042ac:	2202      	movs	r2, #2
 80042ae:	f10d 0106 	add.w	r1, sp, #6
 80042b2:	f000 fe7a 	bl	8004faa <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80042b6:	463c      	mov	r4, r7
 80042b8:	e044      	b.n	8004344 <USBD_DFU_Setup+0x146>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80042ba:	8873      	ldrh	r3, [r6, #2]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	2b21      	cmp	r3, #33	@ 0x21
 80042c0:	d140      	bne.n	8004344 <USBD_DFU_Setup+0x146>
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80042c2:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 80042c6:	f7ff fd1b 	bl	8003d00 <USBD_DFU_GetDfuFuncDesc>
            if (pbuf != NULL)
 80042ca:	4601      	mov	r1, r0
 80042cc:	b138      	cbz	r0, 80042de <USBD_DFU_Setup+0xe0>
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80042ce:	88f2      	ldrh	r2, [r6, #6]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 80042d0:	2a09      	cmp	r2, #9
 80042d2:	bf28      	it	cs
 80042d4:	2209      	movcs	r2, #9
 80042d6:	4628      	mov	r0, r5
 80042d8:	f000 fe67 	bl	8004faa <USBD_CtlSendData>
 80042dc:	e032      	b.n	8004344 <USBD_DFU_Setup+0x146>
              USBD_CtlError(pdev, req);
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 fad1 	bl	8004888 <USBD_CtlError>
              ret = USBD_FAIL;
 80042e6:	2403      	movs	r4, #3
 80042e8:	e02c      	b.n	8004344 <USBD_DFU_Setup+0x146>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042ea:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d004      	beq.n	80042fe <USBD_DFU_Setup+0x100>
            USBD_CtlError(pdev, req);
 80042f4:	4631      	mov	r1, r6
 80042f6:	f000 fac7 	bl	8004888 <USBD_CtlError>
            ret = USBD_FAIL;
 80042fa:	2403      	movs	r4, #3
 80042fc:	e022      	b.n	8004344 <USBD_DFU_Setup+0x146>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80042fe:	2201      	movs	r2, #1
 8004300:	f501 6182 	add.w	r1, r1, #1040	@ 0x410
 8004304:	f000 fe51 	bl	8004faa <USBD_CtlSendData>
 8004308:	e01c      	b.n	8004344 <USBD_DFU_Setup+0x146>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800430a:	78b4      	ldrb	r4, [r6, #2]
 800430c:	b964      	cbnz	r4, 8004328 <USBD_DFU_Setup+0x12a>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800430e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b03      	cmp	r3, #3
 8004316:	d102      	bne.n	800431e <USBD_DFU_Setup+0x120>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8004318:	f8c1 4410 	str.w	r4, [r1, #1040]	@ 0x410
 800431c:	e012      	b.n	8004344 <USBD_DFU_Setup+0x146>
              USBD_CtlError(pdev, req);
 800431e:	4631      	mov	r1, r6
 8004320:	f000 fab2 	bl	8004888 <USBD_CtlError>
              ret = USBD_FAIL;
 8004324:	2403      	movs	r4, #3
 8004326:	e00d      	b.n	8004344 <USBD_DFU_Setup+0x146>
            USBD_CtlError(pdev, req);
 8004328:	4631      	mov	r1, r6
 800432a:	f000 faad 	bl	8004888 <USBD_CtlError>
            ret = USBD_FAIL;
 800432e:	2403      	movs	r4, #3
 8004330:	e008      	b.n	8004344 <USBD_DFU_Setup+0x146>
          USBD_CtlError(pdev, req);
 8004332:	4631      	mov	r1, r6
 8004334:	f000 faa8 	bl	8004888 <USBD_CtlError>
          ret = USBD_FAIL;
 8004338:	2403      	movs	r4, #3
          break;
 800433a:	e003      	b.n	8004344 <USBD_DFU_Setup+0x146>
      USBD_CtlError(pdev, req);
 800433c:	4631      	mov	r1, r6
 800433e:	f000 faa3 	bl	8004888 <USBD_CtlError>
      ret = USBD_FAIL;
 8004342:	2403      	movs	r4, #3
}
 8004344:	4620      	mov	r0, r4
 8004346:	b003      	add	sp, #12
 8004348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800434a:	2403      	movs	r4, #3
 800434c:	e7fa      	b.n	8004344 <USBD_DFU_Setup+0x146>

0800434e <USBD_DFU_DeInit>:
{
 800434e:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004350:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004354:	33b0      	adds	r3, #176	@ 0xb0
 8004356:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800435a:	b323      	cbz	r3, 80043a6 <USBD_DFU_DeInit+0x58>
 800435c:	4604      	mov	r4, r0
  hdfu->wblock_num = 0U;
 800435e:	2500      	movs	r5, #0
 8004360:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8004364:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
  hdfu->dev_state = DFU_STATE_IDLE;
 8004368:	2202      	movs	r2, #2
 800436a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800436e:	f883 5414 	strb.w	r5, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8004372:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004376:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800437a:	33b0      	adds	r3, #176	@ 0xb0
 800437c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004386:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800438a:	33b0      	adds	r3, #176	@ 0xb0
 800438c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8004390:	f001 f8d8 	bl	8005544 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004394:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8004398:	33b0      	adds	r3, #176	@ 0xb0
 800439a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = NULL;
 800439e:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  return (uint8_t)USBD_OK;
 80043a2:	4628      	mov	r0, r5
}
 80043a4:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_EMEM;
 80043a6:	2002      	movs	r0, #2
 80043a8:	e7fc      	b.n	80043a4 <USBD_DFU_DeInit+0x56>
	...

080043ac <USBD_DFU_Init>:
{
 80043ac:	b510      	push	{r4, lr}
 80043ae:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80043b0:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 80043b4:	f001 f8c2 	bl	800553c <USBD_static_malloc>
  if (hdfu == NULL)
 80043b8:	b358      	cbz	r0, 8004412 <USBD_DFU_Init+0x66>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 80043ba:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 80043be:	32b0      	adds	r2, #176	@ 0xb0
 80043c0:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80043c4:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  hdfu->alt_setting = 0U;
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c0 2410 	str.w	r2, [r0, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80043ce:	4916      	ldr	r1, [pc, #88]	@ (8004428 <USBD_DFU_Init+0x7c>)
 80043d0:	f8c0 1408 	str.w	r1, [r0, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 80043d4:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80043d8:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80043dc:	f880 241d 	strb.w	r2, [r0, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 80043e0:	2102      	movs	r1, #2
 80043e2:	f880 141c 	strb.w	r1, [r0, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80043e6:	f880 2414 	strb.w	r2, [r0, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 80043ea:	f880 2415 	strb.w	r2, [r0, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 80043ee:	f880 2416 	strb.w	r2, [r0, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 80043f2:	f880 2417 	strb.w	r2, [r0, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80043f6:	f880 1418 	strb.w	r1, [r0, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 80043fa:	f880 2419 	strb.w	r2, [r0, #1049]	@ 0x419
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 80043fe:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8004402:	33b0      	adds	r3, #176	@ 0xb0
 8004404:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004408:	6863      	ldr	r3, [r4, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4798      	blx	r3
 800440e:	b940      	cbnz	r0, 8004422 <USBD_DFU_Init+0x76>
}
 8004410:	bd10      	pop	{r4, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004412:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8004416:	33b0      	adds	r3, #176	@ 0xb0
 8004418:	2200      	movs	r2, #0
 800441a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800441e:	2002      	movs	r0, #2
 8004420:	e7f6      	b.n	8004410 <USBD_DFU_Init+0x64>
    return (uint8_t)USBD_FAIL;
 8004422:	2003      	movs	r0, #3
 8004424:	e7f4      	b.n	8004410 <USBD_DFU_Init+0x64>
 8004426:	bf00      	nop
 8004428:	08010000 	.word	0x08010000

0800442c <USBD_DFU_RegisterMedia>:
  if (fops == NULL)
 800442c:	b139      	cbz	r1, 800443e <USBD_DFU_RegisterMedia+0x12>
  pdev->pUserData[pdev->classId] = fops;
 800442e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004432:	33b0      	adds	r3, #176	@ 0xb0
 8004434:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004438:	6041      	str	r1, [r0, #4]
  return (uint8_t)USBD_OK;
 800443a:	2000      	movs	r0, #0
 800443c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800443e:	2003      	movs	r0, #3
}
 8004440:	4770      	bx	lr

08004442 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004442:	b198      	cbz	r0, 800446c <USBD_Init+0x2a>
{
 8004444:	b508      	push	{r3, lr}
 8004446:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004448:	2000      	movs	r0, #0
 800444a:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800444e:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004452:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004456:	b109      	cbz	r1, 800445c <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8004458:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800445c:	2101      	movs	r1, #1
 800445e:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004462:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004464:	4618      	mov	r0, r3
 8004466:	f001 f81f 	bl	80054a8 <USBD_LL_Init>

  return ret;
}
 800446a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800446c:	2003      	movs	r0, #3
}
 800446e:	4770      	bx	lr

08004470 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004470:	b510      	push	{r4, lr}
 8004472:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800447a:	b1b9      	cbz	r1, 80044ac <USBD_RegisterClass+0x3c>
 800447c:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800447e:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004482:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8004486:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004488:	b143      	cbz	r3, 800449c <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800448a:	32ae      	adds	r2, #174	@ 0xae
 800448c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	f10d 0006 	add.w	r0, sp, #6
 8004496:	4798      	blx	r3
 8004498:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800449c:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80044a0:	3301      	adds	r3, #1
 80044a2:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 80044a6:	2000      	movs	r0, #0
}
 80044a8:	b002      	add	sp, #8
 80044aa:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80044ac:	2003      	movs	r0, #3
 80044ae:	e7fb      	b.n	80044a8 <USBD_RegisterClass+0x38>

080044b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80044b0:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80044b2:	f001 f852 	bl	800555a <USBD_LL_Start>
}
 80044b6:	bd08      	pop	{r3, pc}

080044b8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80044bc:	f001 f855 	bl	800556a <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 80044c0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80044c4:	b11b      	cbz	r3, 80044ce <USBD_Stop+0x16>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	7921      	ldrb	r1, [r4, #4]
 80044ca:	4620      	mov	r0, r4
 80044cc:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
}
 80044ce:	2000      	movs	r0, #0
 80044d0:	bd10      	pop	{r4, pc}

080044d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044d2:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80044d4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80044d8:	b113      	cbz	r3, 80044e0 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80044de:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80044e0:	2000      	movs	r0, #0
 80044e2:	e7fc      	b.n	80044de <USBD_SetClassConfig+0xc>

080044e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044e4:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80044e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4798      	blx	r3
 80044ee:	b900      	cbnz	r0, 80044f2 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80044f0:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 80044f2:	2003      	movs	r0, #3
 80044f4:	e7fc      	b.n	80044f0 <USBD_ClrClassConfig+0xc>

080044f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80044f6:	b538      	push	{r3, r4, r5, lr}
 80044f8:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80044fa:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 80044fe:	4628      	mov	r0, r5
 8004500:	f000 f9ae 	bl	8004860 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004504:	2301      	movs	r3, #1
 8004506:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800450a:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800450e:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004512:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8004516:	f001 031f 	and.w	r3, r1, #31
 800451a:	2b01      	cmp	r3, #1
 800451c:	d007      	beq.n	800452e <USBD_LL_SetupStage+0x38>
 800451e:	2b02      	cmp	r3, #2
 8004520:	d00a      	beq.n	8004538 <USBD_LL_SetupStage+0x42>
 8004522:	b973      	cbnz	r3, 8004542 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004524:	4629      	mov	r1, r5
 8004526:	4620      	mov	r0, r4
 8004528:	f000 fb86 	bl	8004c38 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800452c:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800452e:	4629      	mov	r1, r5
 8004530:	4620      	mov	r0, r4
 8004532:	f000 fbbc 	bl	8004cae <USBD_StdItfReq>
      break;
 8004536:	e7f9      	b.n	800452c <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004538:	4629      	mov	r1, r5
 800453a:	4620      	mov	r0, r4
 800453c:	f000 fbf9 	bl	8004d32 <USBD_StdEPReq>
      break;
 8004540:	e7f4      	b.n	800452c <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004542:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8004546:	4620      	mov	r0, r4
 8004548:	f001 f822 	bl	8005590 <USBD_LL_StallEP>
      break;
 800454c:	e7ee      	b.n	800452c <USBD_LL_SetupStage+0x36>

0800454e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800454e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004550:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004552:	2301      	movs	r3, #1
 8004554:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004558:	2300      	movs	r3, #0
 800455a:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800455e:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004560:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004564:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004568:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800456c:	b1e3      	cbz	r3, 80045a8 <USBD_LL_Reset+0x5a>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	b1e3      	cbz	r3, 80045ac <USBD_LL_Reset+0x5e>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004572:	2100      	movs	r1, #0
 8004574:	4798      	blx	r3
 8004576:	4607      	mov	r7, r0
 8004578:	b9d0      	cbnz	r0, 80045b0 <USBD_LL_Reset+0x62>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800457a:	2340      	movs	r3, #64	@ 0x40
 800457c:	2200      	movs	r2, #0
 800457e:	4611      	mov	r1, r2
 8004580:	4620      	mov	r0, r4
 8004582:	f000 fffa 	bl	800557a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004586:	2601      	movs	r6, #1
 8004588:	f884 6163 	strb.w	r6, [r4, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800458c:	2540      	movs	r5, #64	@ 0x40
 800458e:	f8a4 5160 	strh.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004592:	462b      	mov	r3, r5
 8004594:	2200      	movs	r2, #0
 8004596:	2180      	movs	r1, #128	@ 0x80
 8004598:	4620      	mov	r0, r4
 800459a:	f000 ffee 	bl	800557a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800459e:	f884 6023 	strb.w	r6, [r4, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80045a2:	8425      	strh	r5, [r4, #32]

  return ret;
}
 80045a4:	4638      	mov	r0, r7
 80045a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80045a8:	2700      	movs	r7, #0
 80045aa:	e7e6      	b.n	800457a <USBD_LL_Reset+0x2c>
 80045ac:	2700      	movs	r7, #0
 80045ae:	e7e4      	b.n	800457a <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 80045b0:	2703      	movs	r7, #3
 80045b2:	e7e2      	b.n	800457a <USBD_LL_Reset+0x2c>

080045b4 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80045b4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80045b6:	2000      	movs	r0, #0
 80045b8:	4770      	bx	lr

080045ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80045ba:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d004      	beq.n	80045ce <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 80045c4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80045ce:	2304      	movs	r3, #4
 80045d0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80045d4:	2000      	movs	r0, #0
 80045d6:	4770      	bx	lr

080045d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80045d8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d001      	beq.n	80045e6 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80045e2:	2000      	movs	r0, #0
 80045e4:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80045e6:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 80045f0:	e7f7      	b.n	80045e2 <USBD_LL_Resume+0xa>

080045f2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80045f2:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045f4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d001      	beq.n	8004602 <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80045fe:	2000      	movs	r0, #0
 8004600:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8004602:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f9      	beq.n	80045fe <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f6      	beq.n	80045fe <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 8004610:	4798      	blx	r3
 8004612:	e7f4      	b.n	80045fe <USBD_LL_SOF+0xc>

08004614 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004614:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8004616:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800461a:	33ae      	adds	r3, #174	@ 0xae
 800461c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004620:	b15a      	cbz	r2, 800463a <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004622:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b03      	cmp	r3, #3
 800462a:	d001      	beq.n	8004630 <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800462c:	2000      	movs	r0, #0
}
 800462e:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004630:	6a13      	ldr	r3, [r2, #32]
 8004632:	b123      	cbz	r3, 800463e <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004634:	4798      	blx	r3
  return USBD_OK;
 8004636:	2000      	movs	r0, #0
 8004638:	e7f9      	b.n	800462e <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 800463a:	2003      	movs	r0, #3
 800463c:	e7f7      	b.n	800462e <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 800463e:	2000      	movs	r0, #0
 8004640:	e7f5      	b.n	800462e <USBD_LL_IsoINIncomplete+0x1a>

08004642 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004642:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8004644:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004648:	33ae      	adds	r3, #174	@ 0xae
 800464a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800464e:	b15a      	cbz	r2, 8004668 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004650:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b03      	cmp	r3, #3
 8004658:	d001      	beq.n	800465e <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800465a:	2000      	movs	r0, #0
}
 800465c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800465e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8004660:	b123      	cbz	r3, 800466c <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004662:	4798      	blx	r3
  return USBD_OK;
 8004664:	2000      	movs	r0, #0
 8004666:	e7f9      	b.n	800465c <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 8004668:	2003      	movs	r0, #3
 800466a:	e7f7      	b.n	800465c <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 800466c:	2000      	movs	r0, #0
 800466e:	e7f5      	b.n	800465c <USBD_LL_IsoOUTIncomplete+0x1a>

08004670 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8004670:	2000      	movs	r0, #0
 8004672:	4770      	bx	lr

08004674 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004674:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004676:	2301      	movs	r3, #1
 8004678:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800467c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004680:	b123      	cbz	r3, 800468c <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	7901      	ldrb	r1, [r0, #4]
 8004686:	4798      	blx	r3
 8004688:	b910      	cbnz	r0, 8004690 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800468a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800468c:	2000      	movs	r0, #0
 800468e:	e7fc      	b.n	800468a <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8004690:	2003      	movs	r0, #3
 8004692:	e7fa      	b.n	800468a <USBD_LL_DevDisconnected+0x16>

08004694 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004694:	2000      	movs	r0, #0
 8004696:	4770      	bx	lr

08004698 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004698:	2000      	movs	r0, #0
 800469a:	4770      	bx	lr

0800469c <USBD_LL_DataOutStage>:
{
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4604      	mov	r4, r0
  if (epnum == 0U)
 80046a0:	460d      	mov	r5, r1
 80046a2:	2900      	cmp	r1, #0
 80046a4:	d145      	bne.n	8004732 <USBD_LL_DataOutStage+0x96>
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046a6:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d001      	beq.n	80046b2 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 80046ae:	4608      	mov	r0, r1
}
 80046b0:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80046b2:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 80046b6:	f8b0 2160 	ldrh.w	r2, [r0, #352]	@ 0x160
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d809      	bhi.n	80046d2 <USBD_LL_DataOutStage+0x36>
        switch (pdev->request.bmRequest & 0x1FU)
 80046be:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d012      	beq.n	80046f0 <USBD_LL_DataOutStage+0x54>
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d01f      	beq.n	800470e <USBD_LL_DataOutStage+0x72>
 80046ce:	4608      	mov	r0, r1
 80046d0:	e013      	b.n	80046fa <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
        pep->pbuffer += pep->maxpacket;
 80046d8:	f8d0 1164 	ldr.w	r1, [r0, #356]	@ 0x164
 80046dc:	4411      	add	r1, r2
 80046de:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164
        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80046e2:	429a      	cmp	r2, r3
 80046e4:	bf38      	it	cc
 80046e6:	461a      	movcc	r2, r3
 80046e8:	f000 fc86 	bl	8004ff8 <USBD_CtlContinueRx>
  return USBD_OK;
 80046ec:	4628      	mov	r0, r5
 80046ee:	e7df      	b.n	80046b0 <USBD_LL_DataOutStage+0x14>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80046f0:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80046f4:	f7ff ffce 	bl	8004694 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80046f8:	b920      	cbnz	r0, 8004704 <USBD_LL_DataOutStage+0x68>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046fa:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b03      	cmp	r3, #3
 8004702:	d009      	beq.n	8004718 <USBD_LL_DataOutStage+0x7c>
        (void)USBD_CtlSendStatus(pdev);
 8004704:	4620      	mov	r0, r4
 8004706:	f000 fc7f 	bl	8005008 <USBD_CtlSendStatus>
  return USBD_OK;
 800470a:	4628      	mov	r0, r5
 800470c:	e7d0      	b.n	80046b0 <USBD_LL_DataOutStage+0x14>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800470e:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8004712:	f7ff ffc1 	bl	8004698 <USBD_CoreFindEP>
            break;
 8004716:	e7ef      	b.n	80046f8 <USBD_LL_DataOutStage+0x5c>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004718:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800471c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	2a00      	cmp	r2, #0
 8004724:	d0ee      	beq.n	8004704 <USBD_LL_DataOutStage+0x68>
              pdev->classId = idx;
 8004726:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	4620      	mov	r0, r4
 800472e:	4798      	blx	r3
 8004730:	e7e8      	b.n	8004704 <USBD_LL_DataOutStage+0x68>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004732:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004736:	f7ff ffaf 	bl	8004698 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800473a:	b990      	cbnz	r0, 8004762 <USBD_LL_DataOutStage+0xc6>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800473c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b03      	cmp	r3, #3
 8004744:	d1b4      	bne.n	80046b0 <USBD_LL_DataOutStage+0x14>
        if (pdev->pClass[idx]->DataOut != NULL)
 8004746:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800474a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	2a00      	cmp	r2, #0
 8004752:	d0ad      	beq.n	80046b0 <USBD_LL_DataOutStage+0x14>
          pdev->classId = idx;
 8004754:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	4629      	mov	r1, r5
 800475c:	4620      	mov	r0, r4
 800475e:	4798      	blx	r3
      if (ret != USBD_OK)
 8004760:	e7a6      	b.n	80046b0 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8004762:	2000      	movs	r0, #0
 8004764:	e7a4      	b.n	80046b0 <USBD_LL_DataOutStage+0x14>

08004766 <USBD_LL_DataInStage>:
{
 8004766:	b538      	push	{r3, r4, r5, lr}
 8004768:	4604      	mov	r4, r0
  if (epnum == 0U)
 800476a:	460d      	mov	r5, r1
 800476c:	2900      	cmp	r1, #0
 800476e:	d14c      	bne.n	800480a <USBD_LL_DataInStage+0xa4>
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004770:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8004774:	2b02      	cmp	r3, #2
 8004776:	d007      	beq.n	8004788 <USBD_LL_DataInStage+0x22>
    if (pdev->dev_test_mode != 0U)
 8004778:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800477c:	b118      	cbz	r0, 8004786 <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8004784:	4628      	mov	r0, r5
}
 8004786:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004788:	6982      	ldr	r2, [r0, #24]
 800478a:	8c03      	ldrh	r3, [r0, #32]
 800478c:	429a      	cmp	r2, r3
 800478e:	d80e      	bhi.n	80047ae <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8004790:	429a      	cmp	r2, r3
 8004792:	d01a      	beq.n	80047ca <USBD_LL_DataInStage+0x64>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004794:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b03      	cmp	r3, #3
 800479c:	d029      	beq.n	80047f2 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800479e:	2180      	movs	r1, #128	@ 0x80
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 fef5 	bl	8005590 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80047a6:	4620      	mov	r0, r4
 80047a8:	f000 fc39 	bl	800501e <USBD_CtlReceiveStatus>
 80047ac:	e7e4      	b.n	8004778 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	6182      	str	r2, [r0, #24]
        pep->pbuffer += pep->maxpacket;
 80047b2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80047b4:	4419      	add	r1, r3
 80047b6:	6241      	str	r1, [r0, #36]	@ 0x24
        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80047b8:	f000 fc05 	bl	8004fc6 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047bc:	2300      	movs	r3, #0
 80047be:	461a      	mov	r2, r3
 80047c0:	4619      	mov	r1, r3
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 ff04 	bl	80055d0 <USBD_LL_PrepareReceive>
 80047c8:	e7d6      	b.n	8004778 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 80047ca:	6942      	ldr	r2, [r0, #20]
        if ((pep->maxpacket == pep->rem_length) &&
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d8e1      	bhi.n	8004794 <USBD_LL_DataInStage+0x2e>
            (pep->total_length < pdev->ep0_data_len))
 80047d0:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d2dd      	bcs.n	8004794 <USBD_LL_DataInStage+0x2e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80047d8:	2200      	movs	r2, #0
 80047da:	4611      	mov	r1, r2
 80047dc:	f000 fbf3 	bl	8004fc6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80047e0:	2100      	movs	r1, #0
 80047e2:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047e6:	460b      	mov	r3, r1
 80047e8:	460a      	mov	r2, r1
 80047ea:	4620      	mov	r0, r4
 80047ec:	f000 fef0 	bl	80055d0 <USBD_LL_PrepareReceive>
 80047f0:	e7c2      	b.n	8004778 <USBD_LL_DataInStage+0x12>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80047f2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	2a00      	cmp	r2, #0
 80047fa:	d0d0      	beq.n	800479e <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4620      	mov	r0, r4
 8004806:	4798      	blx	r3
 8004808:	e7c9      	b.n	800479e <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800480a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800480e:	f7ff ff43 	bl	8004698 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004812:	b990      	cbnz	r0, 800483a <USBD_LL_DataInStage+0xd4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004814:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b03      	cmp	r3, #3
 800481c:	d1b3      	bne.n	8004786 <USBD_LL_DataInStage+0x20>
        if (pdev->pClass[idx]->DataIn != NULL)
 800481e:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004822:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004826:	695a      	ldr	r2, [r3, #20]
 8004828:	2a00      	cmp	r2, #0
 800482a:	d0ac      	beq.n	8004786 <USBD_LL_DataInStage+0x20>
          pdev->classId = idx;
 800482c:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4629      	mov	r1, r5
 8004834:	4620      	mov	r0, r4
 8004836:	4798      	blx	r3
          if (ret != USBD_OK)
 8004838:	e7a5      	b.n	8004786 <USBD_LL_DataInStage+0x20>
  return USBD_OK;
 800483a:	2000      	movs	r0, #0
 800483c:	e7a3      	b.n	8004786 <USBD_LL_DataInStage+0x20>

0800483e <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800483e:	880b      	ldrh	r3, [r1, #0]
 8004840:	7802      	ldrb	r2, [r0, #0]
 8004842:	4413      	add	r3, r2
 8004844:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004846:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8004848:	4418      	add	r0, r3
 800484a:	4770      	bx	lr

0800484c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800484c:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800484e:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004850:	e002      	b.n	8004858 <USBD_GetLen+0xc>
  {
    len++;
 8004852:	3001      	adds	r0, #1
 8004854:	b2c0      	uxtb	r0, r0
    pbuff++;
 8004856:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	2a00      	cmp	r2, #0
 800485c:	d1f9      	bne.n	8004852 <USBD_GetLen+0x6>
  }

  return len;
}
 800485e:	4770      	bx	lr

08004860 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004860:	780b      	ldrb	r3, [r1, #0]
 8004862:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004864:	784b      	ldrb	r3, [r1, #1]
 8004866:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8004868:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800486a:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800486c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8004870:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8004872:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8004874:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004876:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800487a:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800487c:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800487e:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004880:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004884:	80c3      	strh	r3, [r0, #6]
}
 8004886:	4770      	bx	lr

08004888 <USBD_CtlError>:
{
 8004888:	b510      	push	{r4, lr}
 800488a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800488c:	2180      	movs	r1, #128	@ 0x80
 800488e:	f000 fe7f 	bl	8005590 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004892:	2100      	movs	r1, #0
 8004894:	4620      	mov	r0, r4
 8004896:	f000 fe7b 	bl	8005590 <USBD_LL_StallEP>
}
 800489a:	bd10      	pop	{r4, pc}

0800489c <USBD_GetDescriptor>:
{
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	4604      	mov	r4, r0
 80048a2:	460d      	mov	r5, r1
  uint16_t len = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80048aa:	884a      	ldrh	r2, [r1, #2]
 80048ac:	0a13      	lsrs	r3, r2, #8
 80048ae:	3b01      	subs	r3, #1
 80048b0:	2b06      	cmp	r3, #6
 80048b2:	f200 80c1 	bhi.w	8004a38 <USBD_GetDescriptor+0x19c>
 80048b6:	e8df f003 	tbb	[pc, r3]
 80048ba:	1f04      	.short	0x1f04
 80048bc:	a3bfbf33 	.word	0xa3bfbf33
 80048c0:	b0          	.byte	0xb0
 80048c1:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80048c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f10d 0106 	add.w	r1, sp, #6
 80048cc:	7c00      	ldrb	r0, [r0, #16]
 80048ce:	4798      	blx	r3
  if (req->wLength != 0U)
 80048d0:	88ea      	ldrh	r2, [r5, #6]
 80048d2:	2a00      	cmp	r2, #0
 80048d4:	f000 80b9 	beq.w	8004a4a <USBD_GetDescriptor+0x1ae>
    if (len != 0U)
 80048d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80af 	beq.w	8004a40 <USBD_GetDescriptor+0x1a4>
      len = MIN(len, req->wLength);
 80048e2:	429a      	cmp	r2, r3
 80048e4:	bf28      	it	cs
 80048e6:	461a      	movcs	r2, r3
 80048e8:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80048ec:	4601      	mov	r1, r0
 80048ee:	4620      	mov	r0, r4
 80048f0:	f000 fb5b 	bl	8004faa <USBD_CtlSendData>
}
 80048f4:	b002      	add	sp, #8
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048f8:	7c03      	ldrb	r3, [r0, #16]
 80048fa:	b943      	cbnz	r3, 800490e <USBD_GetDescriptor+0x72>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80048fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004902:	f10d 0006 	add.w	r0, sp, #6
 8004906:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004908:	2302      	movs	r3, #2
 800490a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800490c:	e7e0      	b.n	80048d0 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800490e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	f10d 0006 	add.w	r0, sp, #6
 8004918:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800491a:	2302      	movs	r3, #2
 800491c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800491e:	e7d7      	b.n	80048d0 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	2a05      	cmp	r2, #5
 8004924:	d869      	bhi.n	80049fa <USBD_GetDescriptor+0x15e>
 8004926:	e8df f002 	tbb	[pc, r2]
 800492a:	1003      	.short	0x1003
 800492c:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004930:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	b123      	cbz	r3, 8004942 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004938:	f10d 0106 	add.w	r1, sp, #6
 800493c:	7c00      	ldrb	r0, [r0, #16]
 800493e:	4798      	blx	r3
  if (err != 0U)
 8004940:	e7c6      	b.n	80048d0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004942:	4629      	mov	r1, r5
 8004944:	f7ff ffa0 	bl	8004888 <USBD_CtlError>
  if (err != 0U)
 8004948:	e7d4      	b.n	80048f4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800494a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	b123      	cbz	r3, 800495c <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004952:	f10d 0106 	add.w	r1, sp, #6
 8004956:	7c00      	ldrb	r0, [r0, #16]
 8004958:	4798      	blx	r3
  if (err != 0U)
 800495a:	e7b9      	b.n	80048d0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800495c:	4629      	mov	r1, r5
 800495e:	f7ff ff93 	bl	8004888 <USBD_CtlError>
  if (err != 0U)
 8004962:	e7c7      	b.n	80048f4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004964:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	b123      	cbz	r3, 8004976 <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800496c:	f10d 0106 	add.w	r1, sp, #6
 8004970:	7c00      	ldrb	r0, [r0, #16]
 8004972:	4798      	blx	r3
  if (err != 0U)
 8004974:	e7ac      	b.n	80048d0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004976:	4629      	mov	r1, r5
 8004978:	f7ff ff86 	bl	8004888 <USBD_CtlError>
  if (err != 0U)
 800497c:	e7ba      	b.n	80048f4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800497e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	b123      	cbz	r3, 8004990 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004986:	f10d 0106 	add.w	r1, sp, #6
 800498a:	7c00      	ldrb	r0, [r0, #16]
 800498c:	4798      	blx	r3
  if (err != 0U)
 800498e:	e79f      	b.n	80048d0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004990:	4629      	mov	r1, r5
 8004992:	f7ff ff79 	bl	8004888 <USBD_CtlError>
  if (err != 0U)
 8004996:	e7ad      	b.n	80048f4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004998:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	b123      	cbz	r3, 80049aa <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80049a0:	f10d 0106 	add.w	r1, sp, #6
 80049a4:	7c00      	ldrb	r0, [r0, #16]
 80049a6:	4798      	blx	r3
  if (err != 0U)
 80049a8:	e792      	b.n	80048d0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80049aa:	4629      	mov	r1, r5
 80049ac:	f7ff ff6c 	bl	8004888 <USBD_CtlError>
  if (err != 0U)
 80049b0:	e7a0      	b.n	80048f4 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80049b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	b123      	cbz	r3, 80049c4 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80049ba:	f10d 0106 	add.w	r1, sp, #6
 80049be:	7c00      	ldrb	r0, [r0, #16]
 80049c0:	4798      	blx	r3
  if (err != 0U)
 80049c2:	e785      	b.n	80048d0 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80049c4:	4629      	mov	r1, r5
 80049c6:	f7ff ff5f 	bl	8004888 <USBD_CtlError>
  if (err != 0U)
 80049ca:	e793      	b.n	80048f4 <USBD_GetDescriptor+0x58>
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 80049cc:	f106 03ae 	add.w	r3, r6, #174	@ 0xae
 80049d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80049d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049d6:	b152      	cbz	r2, 80049ee <USBD_GetDescriptor+0x152>
              pdev->classId = idx;
 80049d8:	f8c4 62d4 	str.w	r6, [r4, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	f10d 0206 	add.w	r2, sp, #6
 80049e2:	78a9      	ldrb	r1, [r5, #2]
 80049e4:	4620      	mov	r0, r4
 80049e6:	4798      	blx	r3
              if (pbuf == NULL) /* This means that no class recognized the string index */
 80049e8:	2800      	cmp	r0, #0
 80049ea:	f47f af71 	bne.w	80048d0 <USBD_GetDescriptor+0x34>
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80049ee:	3601      	adds	r6, #1
 80049f0:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80049f4:	42b3      	cmp	r3, r6
 80049f6:	d8e9      	bhi.n	80049cc <USBD_GetDescriptor+0x130>
 80049f8:	e76a      	b.n	80048d0 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 80049fa:	2600      	movs	r6, #0
 80049fc:	4630      	mov	r0, r6
 80049fe:	e7f7      	b.n	80049f0 <USBD_GetDescriptor+0x154>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a00:	7c03      	ldrb	r3, [r0, #16]
 8004a02:	b933      	cbnz	r3, 8004a12 <USBD_GetDescriptor+0x176>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8004a04:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0a:	f10d 0006 	add.w	r0, sp, #6
 8004a0e:	4798      	blx	r3
  if (err != 0U)
 8004a10:	e75e      	b.n	80048d0 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004a12:	4629      	mov	r1, r5
 8004a14:	f7ff ff38 	bl	8004888 <USBD_CtlError>
  if (err != 0U)
 8004a18:	e76c      	b.n	80048f4 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a1a:	7c03      	ldrb	r3, [r0, #16]
 8004a1c:	b943      	cbnz	r3, 8004a30 <USBD_GetDescriptor+0x194>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8004a1e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a24:	f10d 0006 	add.w	r0, sp, #6
 8004a28:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004a2a:	2307      	movs	r3, #7
 8004a2c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004a2e:	e74f      	b.n	80048d0 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004a30:	4629      	mov	r1, r5
 8004a32:	f7ff ff29 	bl	8004888 <USBD_CtlError>
  if (err != 0U)
 8004a36:	e75d      	b.n	80048f4 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004a38:	4629      	mov	r1, r5
 8004a3a:	f7ff ff25 	bl	8004888 <USBD_CtlError>
    return;
 8004a3e:	e759      	b.n	80048f4 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004a40:	4629      	mov	r1, r5
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7ff ff20 	bl	8004888 <USBD_CtlError>
 8004a48:	e754      	b.n	80048f4 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f000 fadc 	bl	8005008 <USBD_CtlSendStatus>
 8004a50:	e750      	b.n	80048f4 <USBD_GetDescriptor+0x58>

08004a52 <USBD_SetAddress>:
{
 8004a52:	b538      	push	{r3, r4, r5, lr}
 8004a54:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004a56:	888b      	ldrh	r3, [r1, #4]
 8004a58:	b9fb      	cbnz	r3, 8004a9a <USBD_SetAddress+0x48>
 8004a5a:	88cb      	ldrh	r3, [r1, #6]
 8004a5c:	b9eb      	cbnz	r3, 8004a9a <USBD_SetAddress+0x48>
 8004a5e:	884b      	ldrh	r3, [r1, #2]
 8004a60:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a62:	d81a      	bhi.n	8004a9a <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004a64:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a68:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d00c      	beq.n	8004a8c <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8004a72:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004a76:	4629      	mov	r1, r5
 8004a78:	f000 fd9a 	bl	80055b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f000 fac3 	bl	8005008 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004a82:	b135      	cbz	r5, 8004a92 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004a84:	2302      	movs	r3, #2
 8004a86:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004a8a:	e009      	b.n	8004aa0 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8004a8c:	f7ff fefc 	bl	8004888 <USBD_CtlError>
 8004a90:	e006      	b.n	8004aa0 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004a98:	e002      	b.n	8004aa0 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f7ff fef4 	bl	8004888 <USBD_CtlError>
}
 8004aa0:	bd38      	pop	{r3, r4, r5, pc}
	...

08004aa4 <USBD_SetConfig>:
{
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8004aaa:	788d      	ldrb	r5, [r1, #2]
 8004aac:	4b2f      	ldr	r3, [pc, #188]	@ (8004b6c <USBD_SetConfig+0xc8>)
 8004aae:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004ab0:	2d01      	cmp	r5, #1
 8004ab2:	d810      	bhi.n	8004ad6 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8004ab4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d00f      	beq.n	8004ade <USBD_SetConfig+0x3a>
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d026      	beq.n	8004b10 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 8004ac2:	f7ff fee1 	bl	8004888 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004ac6:	4b29      	ldr	r3, [pc, #164]	@ (8004b6c <USBD_SetConfig+0xc8>)
 8004ac8:	7819      	ldrb	r1, [r3, #0]
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7ff fd0a 	bl	80044e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8004ad0:	2503      	movs	r5, #3
}
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8004ad6:	f7ff fed7 	bl	8004888 <USBD_CtlError>
    return USBD_FAIL;
 8004ada:	2503      	movs	r5, #3
 8004adc:	e7f9      	b.n	8004ad2 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8004ade:	b1a5      	cbz	r5, 8004b0a <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8004ae0:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	f7ff fcf5 	bl	80044d2 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004ae8:	4605      	mov	r5, r0
 8004aea:	b138      	cbz	r0, 8004afc <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8004aec:	4631      	mov	r1, r6
 8004aee:	4620      	mov	r0, r4
 8004af0:	f7ff feca 	bl	8004888 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004af4:	2302      	movs	r3, #2
 8004af6:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004afa:	e7ea      	b.n	8004ad2 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004afc:	4620      	mov	r0, r4
 8004afe:	f000 fa83 	bl	8005008 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004b02:	2303      	movs	r3, #3
 8004b04:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004b08:	e7e3      	b.n	8004ad2 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004b0a:	f000 fa7d 	bl	8005008 <USBD_CtlSendStatus>
 8004b0e:	e7e0      	b.n	8004ad2 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8004b10:	b1cd      	cbz	r5, 8004b46 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8004b12:	6841      	ldr	r1, [r0, #4]
 8004b14:	428d      	cmp	r5, r1
 8004b16:	d025      	beq.n	8004b64 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004b18:	b2c9      	uxtb	r1, r1
 8004b1a:	f7ff fce3 	bl	80044e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004b1e:	4b13      	ldr	r3, [pc, #76]	@ (8004b6c <USBD_SetConfig+0xc8>)
 8004b20:	7819      	ldrb	r1, [r3, #0]
 8004b22:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7ff fcd4 	bl	80044d2 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	b1b0      	cbz	r0, 8004b5c <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff fea9 	bl	8004888 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004b36:	7921      	ldrb	r1, [r4, #4]
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f7ff fcd3 	bl	80044e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004b44:	e7c5      	b.n	8004ad2 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b46:	2302      	movs	r3, #2
 8004b48:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8004b4c:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f7ff fcc8 	bl	80044e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004b54:	4620      	mov	r0, r4
 8004b56:	f000 fa57 	bl	8005008 <USBD_CtlSendStatus>
 8004b5a:	e7ba      	b.n	8004ad2 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f000 fa53 	bl	8005008 <USBD_CtlSendStatus>
 8004b62:	e7b6      	b.n	8004ad2 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004b64:	f000 fa50 	bl	8005008 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b68:	2500      	movs	r5, #0
 8004b6a:	e7b2      	b.n	8004ad2 <USBD_SetConfig+0x2e>
 8004b6c:	2000037f 	.word	0x2000037f

08004b70 <USBD_GetConfig>:
{
 8004b70:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004b72:	88cb      	ldrh	r3, [r1, #6]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10b      	bne.n	8004b90 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004b78:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d909      	bls.n	8004b96 <USBD_GetConfig+0x26>
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d111      	bne.n	8004baa <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004b86:	2201      	movs	r2, #1
 8004b88:	1d01      	adds	r1, r0, #4
 8004b8a:	f000 fa0e 	bl	8004faa <USBD_CtlSendData>
        break;
 8004b8e:	e001      	b.n	8004b94 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004b90:	f7ff fe7a 	bl	8004888 <USBD_CtlError>
}
 8004b94:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	b13b      	cbz	r3, 8004baa <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f000 fa01 	bl	8004faa <USBD_CtlSendData>
        break;
 8004ba8:	e7f4      	b.n	8004b94 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8004baa:	f7ff fe6d 	bl	8004888 <USBD_CtlError>
}
 8004bae:	e7f1      	b.n	8004b94 <USBD_GetConfig+0x24>

08004bb0 <USBD_GetStatus>:
{
 8004bb0:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004bb2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d812      	bhi.n	8004be2 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8004bbc:	88cb      	ldrh	r3, [r1, #6]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d10c      	bne.n	8004bdc <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8004bc6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8004bca:	b10b      	cbz	r3, 8004bd0 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f100 010c 	add.w	r1, r0, #12
 8004bd6:	f000 f9e8 	bl	8004faa <USBD_CtlSendData>
}
 8004bda:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004bdc:	f7ff fe54 	bl	8004888 <USBD_CtlError>
        break;
 8004be0:	e7fb      	b.n	8004bda <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004be2:	f7ff fe51 	bl	8004888 <USBD_CtlError>
}
 8004be6:	e7f8      	b.n	8004bda <USBD_GetStatus+0x2a>

08004be8 <USBD_SetFeature>:
{
 8004be8:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004bea:	884b      	ldrh	r3, [r1, #2]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d004      	beq.n	8004bfa <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d007      	beq.n	8004c04 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8004bf4:	f7ff fe48 	bl	8004888 <USBD_CtlError>
}
 8004bf8:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8004bfa:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004bfe:	f000 fa03 	bl	8005008 <USBD_CtlSendStatus>
 8004c02:	e7f9      	b.n	8004bf8 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8004c04:	888b      	ldrh	r3, [r1, #4]
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8004c0c:	f000 f9fc 	bl	8005008 <USBD_CtlSendStatus>
 8004c10:	e7f2      	b.n	8004bf8 <USBD_SetFeature+0x10>

08004c12 <USBD_ClrFeature>:
{
 8004c12:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004c14:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d809      	bhi.n	8004c32 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004c1e:	884b      	ldrh	r3, [r1, #2]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d000      	beq.n	8004c26 <USBD_ClrFeature+0x14>
}
 8004c24:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004c2c:	f000 f9ec 	bl	8005008 <USBD_CtlSendStatus>
 8004c30:	e7f8      	b.n	8004c24 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004c32:	f7ff fe29 	bl	8004888 <USBD_CtlError>
}
 8004c36:	e7f5      	b.n	8004c24 <USBD_ClrFeature+0x12>

08004c38 <USBD_StdDevReq>:
{
 8004c38:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c3a:	780c      	ldrb	r4, [r1, #0]
 8004c3c:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004c40:	2c20      	cmp	r4, #32
 8004c42:	d006      	beq.n	8004c52 <USBD_StdDevReq+0x1a>
 8004c44:	2c40      	cmp	r4, #64	@ 0x40
 8004c46:	d004      	beq.n	8004c52 <USBD_StdDevReq+0x1a>
 8004c48:	b16c      	cbz	r4, 8004c66 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8004c4a:	f7ff fe1d 	bl	8004888 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c4e:	2400      	movs	r4, #0
      break;
 8004c50:	e007      	b.n	8004c62 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004c52:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004c56:	33ae      	adds	r3, #174	@ 0xae
 8004c58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	4798      	blx	r3
 8004c60:	4604      	mov	r4, r0
}
 8004c62:	4620      	mov	r0, r4
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8004c66:	784d      	ldrb	r5, [r1, #1]
 8004c68:	2d09      	cmp	r5, #9
 8004c6a:	d81d      	bhi.n	8004ca8 <USBD_StdDevReq+0x70>
 8004c6c:	e8df f005 	tbb	[pc, r5]
 8004c70:	161c1912 	.word	0x161c1912
 8004c74:	1c05081c 	.word	0x1c05081c
 8004c78:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8004c7a:	f7ff fe0f 	bl	800489c <USBD_GetDescriptor>
          break;
 8004c7e:	e7f0      	b.n	8004c62 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8004c80:	f7ff fee7 	bl	8004a52 <USBD_SetAddress>
          break;
 8004c84:	e7ed      	b.n	8004c62 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 8004c86:	f7ff ff0d 	bl	8004aa4 <USBD_SetConfig>
 8004c8a:	4604      	mov	r4, r0
          break;
 8004c8c:	e7e9      	b.n	8004c62 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8004c8e:	f7ff ff6f 	bl	8004b70 <USBD_GetConfig>
          break;
 8004c92:	e7e6      	b.n	8004c62 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8004c94:	f7ff ff8c 	bl	8004bb0 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c98:	462c      	mov	r4, r5
          break;
 8004c9a:	e7e2      	b.n	8004c62 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8004c9c:	f7ff ffa4 	bl	8004be8 <USBD_SetFeature>
          break;
 8004ca0:	e7df      	b.n	8004c62 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 8004ca2:	f7ff ffb6 	bl	8004c12 <USBD_ClrFeature>
          break;
 8004ca6:	e7dc      	b.n	8004c62 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8004ca8:	f7ff fdee 	bl	8004888 <USBD_CtlError>
          break;
 8004cac:	e7d9      	b.n	8004c62 <USBD_StdDevReq+0x2a>

08004cae <USBD_StdItfReq>:
{
 8004cae:	b570      	push	{r4, r5, r6, lr}
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cb4:	780b      	ldrb	r3, [r1, #0]
 8004cb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d007      	beq.n	8004cce <USBD_StdItfReq+0x20>
 8004cbe:	2b40      	cmp	r3, #64	@ 0x40
 8004cc0:	d005      	beq.n	8004cce <USBD_StdItfReq+0x20>
 8004cc2:	b123      	cbz	r3, 8004cce <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8004cc4:	f7ff fde0 	bl	8004888 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004cc8:	2600      	movs	r6, #0
}
 8004cca:	4630      	mov	r0, r6
 8004ccc:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8004cce:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d826      	bhi.n	8004d26 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004cd8:	7921      	ldrb	r1, [r4, #4]
 8004cda:	2901      	cmp	r1, #1
 8004cdc:	d905      	bls.n	8004cea <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f7ff fdd1 	bl	8004888 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	e7ef      	b.n	8004cca <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8004cea:	4628      	mov	r0, r5
 8004cec:	f7ff fcd2 	bl	8004694 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004cf0:	b968      	cbnz	r0, 8004d0e <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 8004cf2:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004cf6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004cfa:	6891      	ldr	r1, [r2, #8]
 8004cfc:	b189      	cbz	r1, 8004d22 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8004cfe:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004d02:	6893      	ldr	r3, [r2, #8]
 8004d04:	4621      	mov	r1, r4
 8004d06:	4628      	mov	r0, r5
 8004d08:	4798      	blx	r3
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	e000      	b.n	8004d10 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8004d0e:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004d10:	88e3      	ldrh	r3, [r4, #6]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1d9      	bne.n	8004cca <USBD_StdItfReq+0x1c>
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	d1d7      	bne.n	8004cca <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 f974 	bl	8005008 <USBD_CtlSendStatus>
 8004d20:	e7d3      	b.n	8004cca <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 8004d22:	2603      	movs	r6, #3
 8004d24:	e7f4      	b.n	8004d10 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 8004d26:	4621      	mov	r1, r4
 8004d28:	4628      	mov	r0, r5
 8004d2a:	f7ff fdad 	bl	8004888 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d2e:	2600      	movs	r6, #0
          break;
 8004d30:	e7cb      	b.n	8004cca <USBD_StdItfReq+0x1c>

08004d32 <USBD_StdEPReq>:
{
 8004d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d36:	4606      	mov	r6, r0
 8004d38:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8004d3a:	888b      	ldrh	r3, [r1, #4]
 8004d3c:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d3e:	780c      	ldrb	r4, [r1, #0]
 8004d40:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004d44:	2c20      	cmp	r4, #32
 8004d46:	d008      	beq.n	8004d5a <USBD_StdEPReq+0x28>
 8004d48:	2c40      	cmp	r4, #64	@ 0x40
 8004d4a:	d006      	beq.n	8004d5a <USBD_StdEPReq+0x28>
 8004d4c:	b1dc      	cbz	r4, 8004d86 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8004d4e:	f7ff fd9b 	bl	8004888 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d52:	2400      	movs	r4, #0
}
 8004d54:	4620      	mov	r0, r4
 8004d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8004d5a:	4639      	mov	r1, r7
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f7ff fc9b 	bl	8004698 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d62:	4604      	mov	r4, r0
 8004d64:	2800      	cmp	r0, #0
 8004d66:	f040 80f9 	bne.w	8004f5c <USBD_StdEPReq+0x22a>
        pdev->classId = idx;
 8004d6a:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8004d6e:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004d72:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0eb      	beq.n	8004d54 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4630      	mov	r0, r6
 8004d80:	4798      	blx	r3
 8004d82:	4604      	mov	r4, r0
 8004d84:	e7e6      	b.n	8004d54 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8004d86:	f891 8001 	ldrb.w	r8, [r1, #1]
 8004d8a:	f1b8 0f01 	cmp.w	r8, #1
 8004d8e:	d031      	beq.n	8004df4 <USBD_StdEPReq+0xc2>
 8004d90:	f1b8 0f03 	cmp.w	r8, #3
 8004d94:	d005      	beq.n	8004da2 <USBD_StdEPReq+0x70>
 8004d96:	f1b8 0f00 	cmp.w	r8, #0
 8004d9a:	d067      	beq.n	8004e6c <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8004d9c:	f7ff fd74 	bl	8004888 <USBD_CtlError>
          break;
 8004da0:	e7d8      	b.n	8004d54 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 8004da2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d004      	beq.n	8004db6 <USBD_StdEPReq+0x84>
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d012      	beq.n	8004dd6 <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8004db0:	f7ff fd6a 	bl	8004888 <USBD_CtlError>
              break;
 8004db4:	e7ce      	b.n	8004d54 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004db6:	b10f      	cbz	r7, 8004dbc <USBD_StdEPReq+0x8a>
 8004db8:	2f80      	cmp	r7, #128	@ 0x80
 8004dba:	d104      	bne.n	8004dc6 <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f7ff fd62 	bl	8004888 <USBD_CtlError>
 8004dc4:	e7c6      	b.n	8004d54 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	f000 fbe2 	bl	8005590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004dcc:	2180      	movs	r1, #128	@ 0x80
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 fbde 	bl	8005590 <USBD_LL_StallEP>
 8004dd4:	e7be      	b.n	8004d54 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004dd6:	884b      	ldrh	r3, [r1, #2]
 8004dd8:	b923      	cbnz	r3, 8004de4 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004dda:	b11f      	cbz	r7, 8004de4 <USBD_StdEPReq+0xb2>
 8004ddc:	2f80      	cmp	r7, #128	@ 0x80
 8004dde:	d001      	beq.n	8004de4 <USBD_StdEPReq+0xb2>
 8004de0:	88cb      	ldrh	r3, [r1, #6]
 8004de2:	b11b      	cbz	r3, 8004dec <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8004de4:	4630      	mov	r0, r6
 8004de6:	f000 f90f 	bl	8005008 <USBD_CtlSendStatus>
              break;
 8004dea:	e7b3      	b.n	8004d54 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004dec:	4639      	mov	r1, r7
 8004dee:	f000 fbcf 	bl	8005590 <USBD_LL_StallEP>
 8004df2:	e7f7      	b.n	8004de4 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8004df4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d004      	beq.n	8004e08 <USBD_StdEPReq+0xd6>
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d012      	beq.n	8004e28 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8004e02:	f7ff fd41 	bl	8004888 <USBD_CtlError>
              break;
 8004e06:	e7a5      	b.n	8004d54 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e08:	b10f      	cbz	r7, 8004e0e <USBD_StdEPReq+0xdc>
 8004e0a:	2f80      	cmp	r7, #128	@ 0x80
 8004e0c:	d104      	bne.n	8004e18 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4630      	mov	r0, r6
 8004e12:	f7ff fd39 	bl	8004888 <USBD_CtlError>
 8004e16:	e79d      	b.n	8004d54 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e18:	4639      	mov	r1, r7
 8004e1a:	f000 fbb9 	bl	8005590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e1e:	2180      	movs	r1, #128	@ 0x80
 8004e20:	4630      	mov	r0, r6
 8004e22:	f000 fbb5 	bl	8005590 <USBD_LL_StallEP>
 8004e26:	e795      	b.n	8004d54 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004e28:	884b      	ldrh	r3, [r1, #2]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d192      	bne.n	8004d54 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004e2e:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8004e32:	d117      	bne.n	8004e64 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8004e34:	4630      	mov	r0, r6
 8004e36:	f000 f8e7 	bl	8005008 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f7ff fc2b 	bl	8004698 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d186      	bne.n	8004d54 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8004e46:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8004e4a:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004e4e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8004e52:	6892      	ldr	r2, [r2, #8]
 8004e54:	2a00      	cmp	r2, #0
 8004e56:	f000 8083 	beq.w	8004f60 <USBD_StdEPReq+0x22e>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4790      	blx	r2
 8004e60:	4604      	mov	r4, r0
 8004e62:	e777      	b.n	8004d54 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004e64:	4639      	mov	r1, r7
 8004e66:	f000 fb9b 	bl	80055a0 <USBD_LL_ClearStallEP>
 8004e6a:	e7e3      	b.n	8004e34 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8004e6c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	2a02      	cmp	r2, #2
 8004e74:	d005      	beq.n	8004e82 <USBD_StdEPReq+0x150>
 8004e76:	2a03      	cmp	r2, #3
 8004e78:	d028      	beq.n	8004ecc <USBD_StdEPReq+0x19a>
              USBD_CtlError(pdev, req);
 8004e7a:	f7ff fd05 	bl	8004888 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e7e:	4644      	mov	r4, r8
              break;
 8004e80:	e768      	b.n	8004d54 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e82:	b10f      	cbz	r7, 8004e88 <USBD_StdEPReq+0x156>
 8004e84:	2f80      	cmp	r7, #128	@ 0x80
 8004e86:	d114      	bne.n	8004eb2 <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e8c:	d115      	bne.n	8004eba <USBD_StdEPReq+0x188>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004e8e:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e92:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004e96:	00b9      	lsls	r1, r7, #2
 8004e98:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004e9c:	4431      	add	r1, r6
 8004e9e:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f801 3f0e 	strb.w	r3, [r1, #14]!
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f000 f87e 	bl	8004faa <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004eae:	4644      	mov	r4, r8
              break;
 8004eb0:	e750      	b.n	8004d54 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8004eb2:	f7ff fce9 	bl	8004888 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004eb6:	4644      	mov	r4, r8
                break;
 8004eb8:	e74c      	b.n	8004d54 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004eba:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8004ebe:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004ec2:	00b9      	lsls	r1, r7, #2
 8004ec4:	3110      	adds	r1, #16
 8004ec6:	4431      	add	r1, r6
 8004ec8:	3104      	adds	r1, #4
 8004eca:	e7e9      	b.n	8004ea0 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 8004ecc:	b25b      	sxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	db20      	blt.n	8004f14 <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004ed2:	f007 020f 	and.w	r2, r7, #15
 8004ed6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004eda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ede:	f892 4163 	ldrb.w	r4, [r2, #355]	@ 0x163
 8004ee2:	b324      	cbz	r4, 8004f2e <USBD_StdEPReq+0x1fc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	db25      	blt.n	8004f34 <USBD_StdEPReq+0x202>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004ee8:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004eec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ef0:	009c      	lsls	r4, r3, #2
 8004ef2:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8004ef6:	4434      	add	r4, r6
 8004ef8:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004efa:	b10f      	cbz	r7, 8004f00 <USBD_StdEPReq+0x1ce>
 8004efc:	2f80      	cmp	r7, #128	@ 0x80
 8004efe:	d122      	bne.n	8004f46 <USBD_StdEPReq+0x214>
                pep->status = 0x0000U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	73a3      	strb	r3, [r4, #14]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004f04:	2202      	movs	r2, #2
 8004f06:	f104 010e 	add.w	r1, r4, #14
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f000 f84d 	bl	8004faa <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f10:	4644      	mov	r4, r8
              break;
 8004f12:	e71f      	b.n	8004d54 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004f14:	f007 020f 	and.w	r2, r7, #15
 8004f18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004f1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f20:	f892 4023 	ldrb.w	r4, [r2, #35]	@ 0x23
 8004f24:	2c00      	cmp	r4, #0
 8004f26:	d1dd      	bne.n	8004ee4 <USBD_StdEPReq+0x1b2>
                  USBD_CtlError(pdev, req);
 8004f28:	f7ff fcae 	bl	8004888 <USBD_CtlError>
                  break;
 8004f2c:	e712      	b.n	8004d54 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8004f2e:	f7ff fcab 	bl	8004888 <USBD_CtlError>
                  break;
 8004f32:	e70f      	b.n	8004d54 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f34:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8004f38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f3c:	009c      	lsls	r4, r3, #2
 8004f3e:	3410      	adds	r4, #16
 8004f40:	4434      	add	r4, r6
 8004f42:	3404      	adds	r4, #4
 8004f44:	e7d9      	b.n	8004efa <USBD_StdEPReq+0x1c8>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004f46:	4639      	mov	r1, r7
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f000 fae1 	bl	8005510 <USBD_LL_IsStallEP>
 8004f4e:	b110      	cbz	r0, 8004f56 <USBD_StdEPReq+0x224>
                pep->status = 0x0001U;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73a3      	strb	r3, [r4, #14]
 8004f54:	e7d6      	b.n	8004f04 <USBD_StdEPReq+0x1d2>
                pep->status = 0x0000U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73a3      	strb	r3, [r4, #14]
 8004f5a:	e7d3      	b.n	8004f04 <USBD_StdEPReq+0x1d2>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f5c:	2400      	movs	r4, #0
 8004f5e:	e6f9      	b.n	8004d54 <USBD_StdEPReq+0x22>
 8004f60:	4604      	mov	r4, r0
 8004f62:	e6f7      	b.n	8004d54 <USBD_StdEPReq+0x22>

08004f64 <USBD_GetString>:
  if (desc == NULL)
 8004f64:	b300      	cbz	r0, 8004fa8 <USBD_GetString+0x44>
{
 8004f66:	b570      	push	{r4, r5, r6, lr}
 8004f68:	460d      	mov	r5, r1
 8004f6a:	4616      	mov	r6, r2
 8004f6c:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004f6e:	f7ff fc6d 	bl	800484c <USBD_GetLen>
 8004f72:	3001      	adds	r0, #1
 8004f74:	0043      	lsls	r3, r0, #1
 8004f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7a:	d806      	bhi.n	8004f8a <USBD_GetString+0x26>
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004f80:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004f82:	2303      	movs	r3, #3
 8004f84:	706b      	strb	r3, [r5, #1]
  idx++;
 8004f86:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004f88:	e00a      	b.n	8004fa0 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004f8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f8e:	e7f6      	b.n	8004f7e <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8004f90:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004f92:	3401      	adds	r4, #1
    idx++;
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004f98:	2100      	movs	r1, #0
 8004f9a:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004f9c:	3302      	adds	r3, #2
 8004f9e:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004fa0:	7822      	ldrb	r2, [r4, #0]
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	d1f4      	bne.n	8004f90 <USBD_GetString+0x2c>
}
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	4770      	bx	lr

08004faa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004faa:	b508      	push	{r3, lr}
 8004fac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8004fb4:	6143      	str	r3, [r0, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8004fb6:	6241      	str	r1, [r0, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004fb8:	6183      	str	r3, [r0, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004fba:	460a      	mov	r2, r1
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	f000 faff 	bl	80055c0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	bd08      	pop	{r3, pc}

08004fc6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004fc6:	b508      	push	{r3, lr}
 8004fc8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004fca:	460a      	mov	r2, r1
 8004fcc:	2100      	movs	r1, #0
 8004fce:	f000 faf7 	bl	80055c0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	bd08      	pop	{r3, pc}

08004fd6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004fd6:	b508      	push	{r3, lr}
 8004fd8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004fda:	2203      	movs	r2, #3
 8004fdc:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8004fe0:	f8c0 3154 	str.w	r3, [r0, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8004fe4:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004fe8:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004fec:	460a      	mov	r2, r1
 8004fee:	2100      	movs	r1, #0
 8004ff0:	f000 faee 	bl	80055d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	bd08      	pop	{r3, pc}

08004ff8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004ff8:	b508      	push	{r3, lr}
 8004ffa:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004ffc:	460a      	mov	r2, r1
 8004ffe:	2100      	movs	r1, #0
 8005000:	f000 fae6 	bl	80055d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005004:	2000      	movs	r0, #0
 8005006:	bd08      	pop	{r3, pc}

08005008 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005008:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800500a:	2204      	movs	r2, #4
 800500c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005010:	2300      	movs	r3, #0
 8005012:	461a      	mov	r2, r3
 8005014:	4619      	mov	r1, r3
 8005016:	f000 fad3 	bl	80055c0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800501a:	2000      	movs	r0, #0
 800501c:	bd08      	pop	{r3, pc}

0800501e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800501e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005020:	2205      	movs	r2, #5
 8005022:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005026:	2300      	movs	r3, #0
 8005028:	461a      	mov	r2, r3
 800502a:	4619      	mov	r1, r3
 800502c:	f000 fad0 	bl	80055d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005030:	2000      	movs	r0, #0
 8005032:	bd08      	pop	{r3, pc}

08005034 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005036:	2200      	movs	r2, #0
 8005038:	490f      	ldr	r1, [pc, #60]	@ (8005078 <MX_USB_DEVICE_Init+0x44>)
 800503a:	4810      	ldr	r0, [pc, #64]	@ (800507c <MX_USB_DEVICE_Init+0x48>)
 800503c:	f7ff fa01 	bl	8004442 <USBD_Init>
 8005040:	b970      	cbnz	r0, 8005060 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8005042:	490f      	ldr	r1, [pc, #60]	@ (8005080 <MX_USB_DEVICE_Init+0x4c>)
 8005044:	480d      	ldr	r0, [pc, #52]	@ (800507c <MX_USB_DEVICE_Init+0x48>)
 8005046:	f7ff fa13 	bl	8004470 <USBD_RegisterClass>
 800504a:	b960      	cbnz	r0, 8005066 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800504c:	490d      	ldr	r1, [pc, #52]	@ (8005084 <MX_USB_DEVICE_Init+0x50>)
 800504e:	480b      	ldr	r0, [pc, #44]	@ (800507c <MX_USB_DEVICE_Init+0x48>)
 8005050:	f7ff f9ec 	bl	800442c <USBD_DFU_RegisterMedia>
 8005054:	b950      	cbnz	r0, 800506c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005056:	4809      	ldr	r0, [pc, #36]	@ (800507c <MX_USB_DEVICE_Init+0x48>)
 8005058:	f7ff fa2a 	bl	80044b0 <USBD_Start>
 800505c:	b948      	cbnz	r0, 8005072 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800505e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005060:	f7fb fb76 	bl	8000750 <Error_Handler>
 8005064:	e7ed      	b.n	8005042 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8005066:	f7fb fb73 	bl	8000750 <Error_Handler>
 800506a:	e7ef      	b.n	800504c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800506c:	f7fb fb70 	bl	8000750 <Error_Handler>
 8005070:	e7f1      	b.n	8005056 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005072:	f7fb fb6d 	bl	8000750 <Error_Handler>
}
 8005076:	e7f2      	b.n	800505e <MX_USB_DEVICE_Init+0x2a>
 8005078:	200000a8 	.word	0x200000a8
 800507c:	20000380 	.word	0x20000380
 8005080:	20000038 	.word	0x20000038
 8005084:	200000c4 	.word	0x200000c4

08005088 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005088:	2312      	movs	r3, #18
 800508a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800508c:	4800      	ldr	r0, [pc, #0]	@ (8005090 <USBD_FS_DeviceDescriptor+0x8>)
 800508e:	4770      	bx	lr
 8005090:	20000094 	.word	0x20000094

08005094 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005094:	2304      	movs	r3, #4
 8005096:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005098:	4800      	ldr	r0, [pc, #0]	@ (800509c <USBD_FS_LangIDStrDescriptor+0x8>)
 800509a:	4770      	bx	lr
 800509c:	20000090 	.word	0x20000090

080050a0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80050a0:	2300      	movs	r3, #0
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d21e      	bcs.n	80050e4 <IntToUnicode+0x44>
{
 80050a6:	b500      	push	{lr}
 80050a8:	e010      	b.n	80050cc <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80050aa:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 80050ae:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 80050b2:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80050b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80050b8:	f10c 0c01 	add.w	ip, ip, #1
 80050bc:	f04f 0e00 	mov.w	lr, #0
 80050c0:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 80050c4:	3301      	adds	r3, #1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d209      	bcs.n	80050e0 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 80050cc:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 80050d0:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 80050d4:	d2e9      	bcs.n	80050aa <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80050d6:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 80050da:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 80050de:	e7e8      	b.n	80050b2 <IntToUnicode+0x12>
  }
}
 80050e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <Get_SerialNum>:
{
 80050e8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80050ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005118 <Get_SerialNum+0x30>)
 80050ec:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80050f0:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80050f4:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 80050f8:	18c0      	adds	r0, r0, r3
 80050fa:	d100      	bne.n	80050fe <Get_SerialNum+0x16>
}
 80050fc:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80050fe:	4d07      	ldr	r5, [pc, #28]	@ (800511c <Get_SerialNum+0x34>)
 8005100:	2208      	movs	r2, #8
 8005102:	4629      	mov	r1, r5
 8005104:	f7ff ffcc 	bl	80050a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005108:	2204      	movs	r2, #4
 800510a:	f105 0110 	add.w	r1, r5, #16
 800510e:	4620      	mov	r0, r4
 8005110:	f7ff ffc6 	bl	80050a0 <IntToUnicode>
}
 8005114:	e7f2      	b.n	80050fc <Get_SerialNum+0x14>
 8005116:	bf00      	nop
 8005118:	1fff7000 	.word	0x1fff7000
 800511c:	20000076 	.word	0x20000076

08005120 <USBD_FS_SerialStrDescriptor>:
{
 8005120:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005122:	231a      	movs	r3, #26
 8005124:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005126:	f7ff ffdf 	bl	80050e8 <Get_SerialNum>
}
 800512a:	4801      	ldr	r0, [pc, #4]	@ (8005130 <USBD_FS_SerialStrDescriptor+0x10>)
 800512c:	bd08      	pop	{r3, pc}
 800512e:	bf00      	nop
 8005130:	20000074 	.word	0x20000074

08005134 <USBD_FS_ProductStrDescriptor>:
{
 8005134:	b508      	push	{r3, lr}
 8005136:	460a      	mov	r2, r1
  if(speed == 0)
 8005138:	b928      	cbnz	r0, 8005146 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800513a:	4905      	ldr	r1, [pc, #20]	@ (8005150 <USBD_FS_ProductStrDescriptor+0x1c>)
 800513c:	4805      	ldr	r0, [pc, #20]	@ (8005154 <USBD_FS_ProductStrDescriptor+0x20>)
 800513e:	f7ff ff11 	bl	8004f64 <USBD_GetString>
}
 8005142:	4803      	ldr	r0, [pc, #12]	@ (8005150 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005144:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005146:	4902      	ldr	r1, [pc, #8]	@ (8005150 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005148:	4802      	ldr	r0, [pc, #8]	@ (8005154 <USBD_FS_ProductStrDescriptor+0x20>)
 800514a:	f7ff ff0b 	bl	8004f64 <USBD_GetString>
 800514e:	e7f8      	b.n	8005142 <USBD_FS_ProductStrDescriptor+0xe>
 8005150:	2000065c 	.word	0x2000065c
 8005154:	08006474 	.word	0x08006474

08005158 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005158:	b510      	push	{r4, lr}
 800515a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800515c:	4c03      	ldr	r4, [pc, #12]	@ (800516c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800515e:	4621      	mov	r1, r4
 8005160:	4803      	ldr	r0, [pc, #12]	@ (8005170 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005162:	f7ff feff 	bl	8004f64 <USBD_GetString>
}
 8005166:	4620      	mov	r0, r4
 8005168:	bd10      	pop	{r4, pc}
 800516a:	bf00      	nop
 800516c:	2000065c 	.word	0x2000065c
 8005170:	08006494 	.word	0x08006494

08005174 <USBD_FS_ConfigStrDescriptor>:
{
 8005174:	b508      	push	{r3, lr}
 8005176:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005178:	b928      	cbnz	r0, 8005186 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800517a:	4905      	ldr	r1, [pc, #20]	@ (8005190 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800517c:	4805      	ldr	r0, [pc, #20]	@ (8005194 <USBD_FS_ConfigStrDescriptor+0x20>)
 800517e:	f7ff fef1 	bl	8004f64 <USBD_GetString>
}
 8005182:	4803      	ldr	r0, [pc, #12]	@ (8005190 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005184:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005186:	4902      	ldr	r1, [pc, #8]	@ (8005190 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005188:	4802      	ldr	r0, [pc, #8]	@ (8005194 <USBD_FS_ConfigStrDescriptor+0x20>)
 800518a:	f7ff feeb 	bl	8004f64 <USBD_GetString>
 800518e:	e7f8      	b.n	8005182 <USBD_FS_ConfigStrDescriptor+0xe>
 8005190:	2000065c 	.word	0x2000065c
 8005194:	080064a8 	.word	0x080064a8

08005198 <USBD_FS_InterfaceStrDescriptor>:
{
 8005198:	b508      	push	{r3, lr}
 800519a:	460a      	mov	r2, r1
  if(speed == 0)
 800519c:	b928      	cbnz	r0, 80051aa <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800519e:	4905      	ldr	r1, [pc, #20]	@ (80051b4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80051a0:	4805      	ldr	r0, [pc, #20]	@ (80051b8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80051a2:	f7ff fedf 	bl	8004f64 <USBD_GetString>
}
 80051a6:	4803      	ldr	r0, [pc, #12]	@ (80051b4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80051a8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80051aa:	4902      	ldr	r1, [pc, #8]	@ (80051b4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80051ac:	4802      	ldr	r0, [pc, #8]	@ (80051b8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80051ae:	f7ff fed9 	bl	8004f64 <USBD_GetString>
 80051b2:	e7f8      	b.n	80051a6 <USBD_FS_InterfaceStrDescriptor+0xe>
 80051b4:	2000065c 	.word	0x2000065c
 80051b8:	080064b4 	.word	0x080064b4

080051bc <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80051bc:	4603      	mov	r3, r0
 80051be:	4608      	mov	r0, r1
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
	uint32_t i = 0;
	  uint8_t *psrc = src;

	  for(i = 0; i < Len; i++)
 80051c0:	f04f 0c00 	mov.w	ip, #0
 80051c4:	4594      	cmp	ip, r2
 80051c6:	d20a      	bcs.n	80051de <MEM_If_Read_FS+0x22>
{
 80051c8:	b500      	push	{lr}
	  {
	    dest[i] = *psrc++;
 80051ca:	f813 eb01 	ldrb.w	lr, [r3], #1
 80051ce:	f800 e00c 	strb.w	lr, [r0, ip]
	  for(i = 0; i < Len; i++)
 80051d2:	f10c 0c01 	add.w	ip, ip, #1
 80051d6:	4594      	cmp	ip, r2
 80051d8:	d3f7      	bcc.n	80051ca <MEM_If_Read_FS+0xe>
	  }
	  /* Return a valid address to avoid HardFault */
	  return (uint8_t*)(dest);
  /* USER CODE END 4 */
}
 80051da:	f85d fb04 	ldr.w	pc, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <MEM_If_GetStatus_FS>:
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
  /* USER CODE BEGIN 5 */
	switch(Cmd)
 80051e0:	2901      	cmp	r1, #1
 80051e2:	d006      	beq.n	80051f2 <MEM_If_GetStatus_FS+0x12>
	    buffer[3] = 0;
	    break;

	  case DFU_MEDIA_ERASE:
	  default:
	    buffer[1] = (uint8_t)FLASH_ERASE_TIME;
 80051e4:	2332      	movs	r3, #50	@ 0x32
 80051e6:	7053      	strb	r3, [r2, #1]
	    buffer[2] = (uint8_t)(FLASH_ERASE_TIME << 8);
 80051e8:	2300      	movs	r3, #0
 80051ea:	7093      	strb	r3, [r2, #2]
	    buffer[3] = 0;
 80051ec:	70d3      	strb	r3, [r2, #3]
	    break;
	  }
	  return 0;
  /* USER CODE END 5 */
}
 80051ee:	2000      	movs	r0, #0
 80051f0:	4770      	bx	lr
	    buffer[1] = (uint8_t)FLASH_PROGRAM_TIME;
 80051f2:	2332      	movs	r3, #50	@ 0x32
 80051f4:	7053      	strb	r3, [r2, #1]
	    buffer[2] = (uint8_t)(FLASH_PROGRAM_TIME << 8);
 80051f6:	2300      	movs	r3, #0
 80051f8:	7093      	strb	r3, [r2, #2]
	    buffer[3] = 0;
 80051fa:	70d3      	strb	r3, [r2, #3]
	    break;
 80051fc:	e7f7      	b.n	80051ee <MEM_If_GetStatus_FS+0xe>

080051fe <GetSector>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
static uint32_t GetSector(uint32_t Address)
{
  uint32_t sector = 0;

 if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80051fe:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8005202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005206:	d345      	bcc.n	8005294 <GetSector+0x96>
  {
    sector = FLASH_SECTOR_0;
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8005208:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800520c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005210:	d342      	bcc.n	8005298 <GetSector+0x9a>
  {
    sector = FLASH_SECTOR_1;
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8005212:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8005216:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800521a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800521e:	d33d      	bcc.n	800529c <GetSector+0x9e>
  {
    sector = FLASH_SECTOR_2;
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8005220:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8005224:	f5a3 4340 	sub.w	r3, r3, #49152	@ 0xc000
 8005228:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800522c:	d338      	bcc.n	80052a0 <GetSector+0xa2>
  {
    sector = FLASH_SECTOR_3;
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 800522e:	f100 4377 	add.w	r3, r0, #4143972352	@ 0xf7000000
 8005232:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8005236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800523a:	d333      	bcc.n	80052a4 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_4;
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800523c:	f100 4377 	add.w	r3, r0, #4143972352	@ 0xf7000000
 8005240:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8005244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005248:	d32e      	bcc.n	80052a8 <GetSector+0xaa>
  {
    sector = FLASH_SECTOR_5;
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 800524a:	f100 4377 	add.w	r3, r0, #4143972352	@ 0xf7000000
 800524e:	f503 037c 	add.w	r3, r3, #16515072	@ 0xfc0000
 8005252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005256:	d329      	bcc.n	80052ac <GetSector+0xae>
  {
    sector = FLASH_SECTOR_6;
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8005258:	f100 4377 	add.w	r3, r0, #4143972352	@ 0xf7000000
 800525c:	f503 037a 	add.w	r3, r3, #16384000	@ 0xfa0000
 8005260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005264:	d324      	bcc.n	80052b0 <GetSector+0xb2>
  {
    sector = FLASH_SECTOR_7;
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8005266:	f100 4377 	add.w	r3, r0, #4143972352	@ 0xf7000000
 800526a:	f503 0378 	add.w	r3, r3, #16252928	@ 0xf80000
 800526e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005272:	d31f      	bcc.n	80052b4 <GetSector+0xb6>
  {
    sector = FLASH_SECTOR_8;
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8005274:	f100 4377 	add.w	r3, r0, #4143972352	@ 0xf7000000
 8005278:	f503 0376 	add.w	r3, r3, #16121856	@ 0xf60000
 800527c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005280:	d31a      	bcc.n	80052b8 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_9;
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8005282:	f100 4077 	add.w	r0, r0, #4143972352	@ 0xf7000000
 8005286:	f500 0074 	add.w	r0, r0, #15990784	@ 0xf40000
 800528a:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 800528e:	d215      	bcs.n	80052bc <GetSector+0xbe>
  {
    sector = FLASH_SECTOR_10;
 8005290:	200a      	movs	r0, #10
 8005292:	4770      	bx	lr
    sector = FLASH_SECTOR_0;
 8005294:	2000      	movs	r0, #0
 8005296:	4770      	bx	lr
    sector = FLASH_SECTOR_1;
 8005298:	2001      	movs	r0, #1
 800529a:	4770      	bx	lr
    sector = FLASH_SECTOR_2;
 800529c:	2002      	movs	r0, #2
 800529e:	4770      	bx	lr
    sector = FLASH_SECTOR_3;
 80052a0:	2003      	movs	r0, #3
 80052a2:	4770      	bx	lr
    sector = FLASH_SECTOR_4;
 80052a4:	2004      	movs	r0, #4
 80052a6:	4770      	bx	lr
    sector = FLASH_SECTOR_5;
 80052a8:	2005      	movs	r0, #5
 80052aa:	4770      	bx	lr
    sector = FLASH_SECTOR_6;
 80052ac:	2006      	movs	r0, #6
 80052ae:	4770      	bx	lr
    sector = FLASH_SECTOR_7;
 80052b0:	2007      	movs	r0, #7
 80052b2:	4770      	bx	lr
    sector = FLASH_SECTOR_8;
 80052b4:	2008      	movs	r0, #8
 80052b6:	4770      	bx	lr
    sector = FLASH_SECTOR_9;
 80052b8:	2009      	movs	r0, #9
 80052ba:	4770      	bx	lr
  }
  else
  {
    sector = FLASH_SECTOR_11;
 80052bc:	200b      	movs	r0, #11
  }
  return sector;
}
 80052be:	4770      	bx	lr

080052c0 <MEM_If_Write_FS>:
{
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	4606      	mov	r6, r0
 80052c4:	460d      	mov	r5, r1
 80052c6:	4617      	mov	r7, r2
	  for(i = 0; i < Len; i+=4)
 80052c8:	2400      	movs	r4, #0
 80052ca:	e000      	b.n	80052ce <MEM_If_Write_FS+0xe>
 80052cc:	3404      	adds	r4, #4
 80052ce:	42bc      	cmp	r4, r7
 80052d0:	d20c      	bcs.n	80052ec <MEM_If_Write_FS+0x2c>
	    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)(dest+i), *(uint32_t*)(src+i)) == HAL_OK)
 80052d2:	5932      	ldr	r2, [r6, r4]
 80052d4:	2300      	movs	r3, #0
 80052d6:	1929      	adds	r1, r5, r4
 80052d8:	2002      	movs	r0, #2
 80052da:	f7fb fec7 	bl	800106c <HAL_FLASH_Program>
 80052de:	b938      	cbnz	r0, 80052f0 <MEM_If_Write_FS+0x30>
	      if(*(uint32_t *)(src + i) != *(uint32_t*)(dest+i))
 80052e0:	5931      	ldr	r1, [r6, r4]
 80052e2:	592b      	ldr	r3, [r5, r4]
 80052e4:	4299      	cmp	r1, r3
 80052e6:	d0f1      	beq.n	80052cc <MEM_If_Write_FS+0xc>
	        return 2;
 80052e8:	2002      	movs	r0, #2
 80052ea:	e000      	b.n	80052ee <MEM_If_Write_FS+0x2e>
	  return 0;
 80052ec:	2000      	movs	r0, #0
}
 80052ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	      return 1;
 80052f0:	2001      	movs	r0, #1
 80052f2:	e7fc      	b.n	80052ee <MEM_If_Write_FS+0x2e>

080052f4 <MEM_If_Erase_FS>:
{
 80052f4:	b510      	push	{r4, lr}
 80052f6:	b086      	sub	sp, #24
	  uint32_t sectornb = 0;
 80052f8:	2400      	movs	r4, #0
 80052fa:	9405      	str	r4, [sp, #20]
	  startsector = GetSector(Add);
 80052fc:	f7ff ff7f 	bl	80051fe <GetSector>
	  eraseinitstruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8005300:	9400      	str	r4, [sp, #0]
	  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8005302:	2302      	movs	r3, #2
 8005304:	9304      	str	r3, [sp, #16]
	  eraseinitstruct.Sector = startsector;
 8005306:	9002      	str	r0, [sp, #8]
	  eraseinitstruct.NbSectors = 1;
 8005308:	2301      	movs	r3, #1
 800530a:	9303      	str	r3, [sp, #12]
	  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectornb);
 800530c:	a905      	add	r1, sp, #20
 800530e:	4668      	mov	r0, sp
 8005310:	f7fb ff52 	bl	80011b8 <HAL_FLASHEx_Erase>
	  if (status != HAL_OK)
 8005314:	b910      	cbnz	r0, 800531c <MEM_If_Erase_FS+0x28>
	  return 0;
 8005316:	4620      	mov	r0, r4
}
 8005318:	b006      	add	sp, #24
 800531a:	bd10      	pop	{r4, pc}
	    return 1;
 800531c:	2001      	movs	r0, #1
 800531e:	e7fb      	b.n	8005318 <MEM_If_Erase_FS+0x24>

08005320 <MEM_If_DeInit_FS>:
{
 8005320:	b508      	push	{r3, lr}
	HAL_FLASH_Lock();
 8005322:	f7fb fe69 	bl	8000ff8 <HAL_FLASH_Lock>
}
 8005326:	2000      	movs	r0, #0
 8005328:	bd08      	pop	{r3, pc}

0800532a <MEM_If_Init_FS>:
{
 800532a:	b508      	push	{r3, lr}
	HAL_FLASH_Unlock();
 800532c:	f7fb fe4c 	bl	8000fc8 <HAL_FLASH_Unlock>
}
 8005330:	2000      	movs	r0, #0
 8005332:	bd08      	pop	{r3, pc}

08005334 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005338:	2300      	movs	r3, #0
 800533a:	9303      	str	r3, [sp, #12]
 800533c:	9304      	str	r3, [sp, #16]
 800533e:	9305      	str	r3, [sp, #20]
 8005340:	9306      	str	r3, [sp, #24]
 8005342:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005344:	6803      	ldr	r3, [r0, #0]
 8005346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800534a:	d001      	beq.n	8005350 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800534c:	b008      	add	sp, #32
 800534e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005350:	2500      	movs	r5, #0
 8005352:	9501      	str	r5, [sp, #4]
 8005354:	4c1a      	ldr	r4, [pc, #104]	@ (80053c0 <HAL_PCD_MspInit+0x8c>)
 8005356:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6323      	str	r3, [r4, #48]	@ 0x30
 800535e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800536c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800536e:	4e15      	ldr	r6, [pc, #84]	@ (80053c4 <HAL_PCD_MspInit+0x90>)
 8005370:	a903      	add	r1, sp, #12
 8005372:	4630      	mov	r0, r6
 8005374:	f7fb ff6a 	bl	800124c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005378:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800537c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537e:	2302      	movs	r3, #2
 8005380:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005382:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005384:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005386:	230a      	movs	r3, #10
 8005388:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538a:	a903      	add	r1, sp, #12
 800538c:	4630      	mov	r0, r6
 800538e:	f7fb ff5d 	bl	800124c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005392:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005398:	6363      	str	r3, [r4, #52]	@ 0x34
 800539a:	9502      	str	r5, [sp, #8]
 800539c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800539e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053a2:	6463      	str	r3, [r4, #68]	@ 0x44
 80053a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80053a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053aa:	9302      	str	r3, [sp, #8]
 80053ac:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80053ae:	462a      	mov	r2, r5
 80053b0:	4629      	mov	r1, r5
 80053b2:	2043      	movs	r0, #67	@ 0x43
 80053b4:	f7fb fd4e 	bl	8000e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80053b8:	2043      	movs	r0, #67	@ 0x43
 80053ba:	f7fb fd5b 	bl	8000e74 <HAL_NVIC_EnableIRQ>
}
 80053be:	e7c5      	b.n	800534c <HAL_PCD_MspInit+0x18>
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40020000 	.word	0x40020000

080053c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80053c8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80053ca:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80053ce:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80053d2:	f7ff f890 	bl	80044f6 <USBD_LL_SetupStage>
}
 80053d6:	bd08      	pop	{r3, pc}

080053d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80053d8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80053da:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80053de:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80053e2:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80053e6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80053ea:	f7ff f957 	bl	800469c <USBD_LL_DataOutStage>
}
 80053ee:	bd08      	pop	{r3, pc}

080053f0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80053f0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80053f2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80053f6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005400:	f7ff f9b1 	bl	8004766 <USBD_LL_DataInStage>
}
 8005404:	bd08      	pop	{r3, pc}

08005406 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005406:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005408:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800540c:	f7ff f8f1 	bl	80045f2 <USBD_LL_SOF>
}
 8005410:	bd08      	pop	{r3, pc}

08005412 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005412:	b510      	push	{r4, lr}
 8005414:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005416:	79c1      	ldrb	r1, [r0, #7]
 8005418:	b111      	cbz	r1, 8005420 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800541a:	2902      	cmp	r1, #2
 800541c:	d109      	bne.n	8005432 <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 800541e:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005420:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8005424:	f7ff f8c6 	bl	80045b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005428:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800542c:	f7ff f88f 	bl	800454e <USBD_LL_Reset>
}
 8005430:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005432:	f7fb f98d 	bl	8000750 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005436:	2101      	movs	r1, #1
 8005438:	e7f2      	b.n	8005420 <HAL_PCD_ResetCallback+0xe>
	...

0800543c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800543c:	b510      	push	{r4, lr}
 800543e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005440:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005444:	f7ff f8b9 	bl	80045ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005448:	6822      	ldr	r2, [r4, #0]
 800544a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005456:	7ae3      	ldrb	r3, [r4, #11]
 8005458:	b123      	cbz	r3, 8005464 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800545a:	4a03      	ldr	r2, [pc, #12]	@ (8005468 <HAL_PCD_SuspendCallback+0x2c>)
 800545c:	6913      	ldr	r3, [r2, #16]
 800545e:	f043 0306 	orr.w	r3, r3, #6
 8005462:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005464:	bd10      	pop	{r4, pc}
 8005466:	bf00      	nop
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800546c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800546e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005472:	f7ff f8b1 	bl	80045d8 <USBD_LL_Resume>
}
 8005476:	bd08      	pop	{r3, pc}

08005478 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005478:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800547a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800547e:	f7ff f8e0 	bl	8004642 <USBD_LL_IsoOUTIncomplete>
}
 8005482:	bd08      	pop	{r3, pc}

08005484 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005484:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005486:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800548a:	f7ff f8c3 	bl	8004614 <USBD_LL_IsoINIncomplete>
}
 800548e:	bd08      	pop	{r3, pc}

08005490 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005490:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005492:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005496:	f7ff f8eb 	bl	8004670 <USBD_LL_DevConnected>
}
 800549a:	bd08      	pop	{r3, pc}

0800549c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800549c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800549e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80054a2:	f7ff f8e7 	bl	8004674 <USBD_LL_DevDisconnected>
}
 80054a6:	bd08      	pop	{r3, pc}

080054a8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80054a8:	7802      	ldrb	r2, [r0, #0]
 80054aa:	b10a      	cbz	r2, 80054b0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80054ac:	2000      	movs	r0, #0
 80054ae:	4770      	bx	lr
{
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 80054b4:	4815      	ldr	r0, [pc, #84]	@ (800550c <USBD_LL_Init+0x64>)
 80054b6:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80054ba:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80054be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80054c2:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80054c4:	2304      	movs	r3, #4
 80054c6:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80054c8:	2202      	movs	r2, #2
 80054ca:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80054cc:	2300      	movs	r3, #0
 80054ce:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80054d0:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80054d2:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80054d4:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80054d6:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80054d8:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80054da:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80054dc:	f7fc fc0e 	bl	8001cfc <HAL_PCD_Init>
 80054e0:	b980      	cbnz	r0, 8005504 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80054e2:	4c0a      	ldr	r4, [pc, #40]	@ (800550c <USBD_LL_Init+0x64>)
 80054e4:	2180      	movs	r1, #128	@ 0x80
 80054e6:	4620      	mov	r0, r4
 80054e8:	f7fd f9bb 	bl	8002862 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80054ec:	2240      	movs	r2, #64	@ 0x40
 80054ee:	2100      	movs	r1, #0
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7fd f990 	bl	8002816 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80054f6:	2280      	movs	r2, #128	@ 0x80
 80054f8:	2101      	movs	r1, #1
 80054fa:	4620      	mov	r0, r4
 80054fc:	f7fd f98b 	bl	8002816 <HAL_PCDEx_SetTxFiFo>
}
 8005500:	2000      	movs	r0, #0
 8005502:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005504:	f7fb f924 	bl	8000750 <Error_Handler>
 8005508:	e7eb      	b.n	80054e2 <USBD_LL_Init+0x3a>
 800550a:	bf00      	nop
 800550c:	20000c80 	.word	0x20000c80

08005510 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005510:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8005514:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005518:	d108      	bne.n	800552c <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800551a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800551e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005522:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005526:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 800552a:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800552c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8005530:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005534:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005538:	7d98      	ldrb	r0, [r3, #22]
 800553a:	4770      	bx	lr

0800553c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800553c:	4800      	ldr	r0, [pc, #0]	@ (8005540 <USBD_static_malloc+0x4>)
 800553e:	4770      	bx	lr
 8005540:	2000085c 	.word	0x2000085c

08005544 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8005544:	4770      	bx	lr

08005546 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005546:	2803      	cmp	r0, #3
 8005548:	d805      	bhi.n	8005556 <USBD_Get_USB_Status+0x10>
 800554a:	e8df f000 	tbb	[pc, r0]
 800554e:	0405      	.short	0x0405
 8005550:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005552:	2001      	movs	r0, #1
    break;
 8005554:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8005556:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005558:	4770      	bx	lr

0800555a <USBD_LL_Start>:
{
 800555a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800555c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005560:	f7fc fc4d 	bl	8001dfe <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005564:	f7ff ffef 	bl	8005546 <USBD_Get_USB_Status>
}
 8005568:	bd08      	pop	{r3, pc}

0800556a <USBD_LL_Stop>:
{
 800556a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 800556c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005570:	f7fc fc67 	bl	8001e42 <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005574:	f7ff ffe7 	bl	8005546 <USBD_Get_USB_Status>
}
 8005578:	bd08      	pop	{r3, pc}

0800557a <USBD_LL_OpenEP>:
{
 800557a:	b508      	push	{r3, lr}
 800557c:	4694      	mov	ip, r2
 800557e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005580:	4663      	mov	r3, ip
 8005582:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005586:	f7fc fd40 	bl	800200a <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800558a:	f7ff ffdc 	bl	8005546 <USBD_Get_USB_Status>
}
 800558e:	bd08      	pop	{r3, pc}

08005590 <USBD_LL_StallEP>:
{
 8005590:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005592:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005596:	f7fc fdc8 	bl	800212a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800559a:	f7ff ffd4 	bl	8005546 <USBD_Get_USB_Status>
}
 800559e:	bd08      	pop	{r3, pc}

080055a0 <USBD_LL_ClearStallEP>:
{
 80055a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80055a2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80055a6:	f7fc fe03 	bl	80021b0 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80055aa:	f7ff ffcc 	bl	8005546 <USBD_Get_USB_Status>
}
 80055ae:	bd08      	pop	{r3, pc}

080055b0 <USBD_LL_SetUSBAddress>:
{
 80055b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80055b2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80055b6:	f7fc fd15 	bl	8001fe4 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80055ba:	f7ff ffc4 	bl	8005546 <USBD_Get_USB_Status>
}
 80055be:	bd08      	pop	{r3, pc}

080055c0 <USBD_LL_Transmit>:
{
 80055c0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80055c2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80055c6:	f7fc fd8b 	bl	80020e0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80055ca:	f7ff ffbc 	bl	8005546 <USBD_Get_USB_Status>
}
 80055ce:	bd08      	pop	{r3, pc}

080055d0 <USBD_LL_PrepareReceive>:
{
 80055d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80055d2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80055d6:	f7fc fd5e 	bl	8002096 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80055da:	f7ff ffb4 	bl	8005546 <USBD_Get_USB_Status>
}
 80055de:	bd08      	pop	{r3, pc}

080055e0 <std>:
 80055e0:	2300      	movs	r3, #0
 80055e2:	b510      	push	{r4, lr}
 80055e4:	4604      	mov	r4, r0
 80055e6:	e9c0 3300 	strd	r3, r3, [r0]
 80055ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ee:	6083      	str	r3, [r0, #8]
 80055f0:	8181      	strh	r1, [r0, #12]
 80055f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80055f4:	81c2      	strh	r2, [r0, #14]
 80055f6:	6183      	str	r3, [r0, #24]
 80055f8:	4619      	mov	r1, r3
 80055fa:	2208      	movs	r2, #8
 80055fc:	305c      	adds	r0, #92	@ 0x5c
 80055fe:	f000 f906 	bl	800580e <memset>
 8005602:	4b0d      	ldr	r3, [pc, #52]	@ (8005638 <std+0x58>)
 8005604:	6263      	str	r3, [r4, #36]	@ 0x24
 8005606:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <std+0x5c>)
 8005608:	62a3      	str	r3, [r4, #40]	@ 0x28
 800560a:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <std+0x60>)
 800560c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <std+0x64>)
 8005610:	6323      	str	r3, [r4, #48]	@ 0x30
 8005612:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <std+0x68>)
 8005614:	6224      	str	r4, [r4, #32]
 8005616:	429c      	cmp	r4, r3
 8005618:	d006      	beq.n	8005628 <std+0x48>
 800561a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800561e:	4294      	cmp	r4, r2
 8005620:	d002      	beq.n	8005628 <std+0x48>
 8005622:	33d0      	adds	r3, #208	@ 0xd0
 8005624:	429c      	cmp	r4, r3
 8005626:	d105      	bne.n	8005634 <std+0x54>
 8005628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005630:	f000 b966 	b.w	8005900 <__retarget_lock_init_recursive>
 8005634:	bd10      	pop	{r4, pc}
 8005636:	bf00      	nop
 8005638:	08005789 	.word	0x08005789
 800563c:	080057ab 	.word	0x080057ab
 8005640:	080057e3 	.word	0x080057e3
 8005644:	08005807 	.word	0x08005807
 8005648:	20001164 	.word	0x20001164

0800564c <stdio_exit_handler>:
 800564c:	4a02      	ldr	r2, [pc, #8]	@ (8005658 <stdio_exit_handler+0xc>)
 800564e:	4903      	ldr	r1, [pc, #12]	@ (800565c <stdio_exit_handler+0x10>)
 8005650:	4803      	ldr	r0, [pc, #12]	@ (8005660 <stdio_exit_handler+0x14>)
 8005652:	f000 b869 	b.w	8005728 <_fwalk_sglue>
 8005656:	bf00      	nop
 8005658:	200000e0 	.word	0x200000e0
 800565c:	0800619d 	.word	0x0800619d
 8005660:	200000f0 	.word	0x200000f0

08005664 <cleanup_stdio>:
 8005664:	6841      	ldr	r1, [r0, #4]
 8005666:	4b0c      	ldr	r3, [pc, #48]	@ (8005698 <cleanup_stdio+0x34>)
 8005668:	4299      	cmp	r1, r3
 800566a:	b510      	push	{r4, lr}
 800566c:	4604      	mov	r4, r0
 800566e:	d001      	beq.n	8005674 <cleanup_stdio+0x10>
 8005670:	f000 fd94 	bl	800619c <_fflush_r>
 8005674:	68a1      	ldr	r1, [r4, #8]
 8005676:	4b09      	ldr	r3, [pc, #36]	@ (800569c <cleanup_stdio+0x38>)
 8005678:	4299      	cmp	r1, r3
 800567a:	d002      	beq.n	8005682 <cleanup_stdio+0x1e>
 800567c:	4620      	mov	r0, r4
 800567e:	f000 fd8d 	bl	800619c <_fflush_r>
 8005682:	68e1      	ldr	r1, [r4, #12]
 8005684:	4b06      	ldr	r3, [pc, #24]	@ (80056a0 <cleanup_stdio+0x3c>)
 8005686:	4299      	cmp	r1, r3
 8005688:	d004      	beq.n	8005694 <cleanup_stdio+0x30>
 800568a:	4620      	mov	r0, r4
 800568c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005690:	f000 bd84 	b.w	800619c <_fflush_r>
 8005694:	bd10      	pop	{r4, pc}
 8005696:	bf00      	nop
 8005698:	20001164 	.word	0x20001164
 800569c:	200011cc 	.word	0x200011cc
 80056a0:	20001234 	.word	0x20001234

080056a4 <global_stdio_init.part.0>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	4b0b      	ldr	r3, [pc, #44]	@ (80056d4 <global_stdio_init.part.0+0x30>)
 80056a8:	4c0b      	ldr	r4, [pc, #44]	@ (80056d8 <global_stdio_init.part.0+0x34>)
 80056aa:	4a0c      	ldr	r2, [pc, #48]	@ (80056dc <global_stdio_init.part.0+0x38>)
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	4620      	mov	r0, r4
 80056b0:	2200      	movs	r2, #0
 80056b2:	2104      	movs	r1, #4
 80056b4:	f7ff ff94 	bl	80055e0 <std>
 80056b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056bc:	2201      	movs	r2, #1
 80056be:	2109      	movs	r1, #9
 80056c0:	f7ff ff8e 	bl	80055e0 <std>
 80056c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056c8:	2202      	movs	r2, #2
 80056ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ce:	2112      	movs	r1, #18
 80056d0:	f7ff bf86 	b.w	80055e0 <std>
 80056d4:	2000129c 	.word	0x2000129c
 80056d8:	20001164 	.word	0x20001164
 80056dc:	0800564d 	.word	0x0800564d

080056e0 <__sfp_lock_acquire>:
 80056e0:	4801      	ldr	r0, [pc, #4]	@ (80056e8 <__sfp_lock_acquire+0x8>)
 80056e2:	f000 b90e 	b.w	8005902 <__retarget_lock_acquire_recursive>
 80056e6:	bf00      	nop
 80056e8:	200012a5 	.word	0x200012a5

080056ec <__sfp_lock_release>:
 80056ec:	4801      	ldr	r0, [pc, #4]	@ (80056f4 <__sfp_lock_release+0x8>)
 80056ee:	f000 b909 	b.w	8005904 <__retarget_lock_release_recursive>
 80056f2:	bf00      	nop
 80056f4:	200012a5 	.word	0x200012a5

080056f8 <__sinit>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	4604      	mov	r4, r0
 80056fc:	f7ff fff0 	bl	80056e0 <__sfp_lock_acquire>
 8005700:	6a23      	ldr	r3, [r4, #32]
 8005702:	b11b      	cbz	r3, 800570c <__sinit+0x14>
 8005704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005708:	f7ff bff0 	b.w	80056ec <__sfp_lock_release>
 800570c:	4b04      	ldr	r3, [pc, #16]	@ (8005720 <__sinit+0x28>)
 800570e:	6223      	str	r3, [r4, #32]
 8005710:	4b04      	ldr	r3, [pc, #16]	@ (8005724 <__sinit+0x2c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f5      	bne.n	8005704 <__sinit+0xc>
 8005718:	f7ff ffc4 	bl	80056a4 <global_stdio_init.part.0>
 800571c:	e7f2      	b.n	8005704 <__sinit+0xc>
 800571e:	bf00      	nop
 8005720:	08005665 	.word	0x08005665
 8005724:	2000129c 	.word	0x2000129c

08005728 <_fwalk_sglue>:
 8005728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800572c:	4607      	mov	r7, r0
 800572e:	4688      	mov	r8, r1
 8005730:	4614      	mov	r4, r2
 8005732:	2600      	movs	r6, #0
 8005734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005738:	f1b9 0901 	subs.w	r9, r9, #1
 800573c:	d505      	bpl.n	800574a <_fwalk_sglue+0x22>
 800573e:	6824      	ldr	r4, [r4, #0]
 8005740:	2c00      	cmp	r4, #0
 8005742:	d1f7      	bne.n	8005734 <_fwalk_sglue+0xc>
 8005744:	4630      	mov	r0, r6
 8005746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800574a:	89ab      	ldrh	r3, [r5, #12]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d907      	bls.n	8005760 <_fwalk_sglue+0x38>
 8005750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005754:	3301      	adds	r3, #1
 8005756:	d003      	beq.n	8005760 <_fwalk_sglue+0x38>
 8005758:	4629      	mov	r1, r5
 800575a:	4638      	mov	r0, r7
 800575c:	47c0      	blx	r8
 800575e:	4306      	orrs	r6, r0
 8005760:	3568      	adds	r5, #104	@ 0x68
 8005762:	e7e9      	b.n	8005738 <_fwalk_sglue+0x10>

08005764 <iprintf>:
 8005764:	b40f      	push	{r0, r1, r2, r3}
 8005766:	b507      	push	{r0, r1, r2, lr}
 8005768:	4906      	ldr	r1, [pc, #24]	@ (8005784 <iprintf+0x20>)
 800576a:	ab04      	add	r3, sp, #16
 800576c:	6808      	ldr	r0, [r1, #0]
 800576e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005772:	6881      	ldr	r1, [r0, #8]
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	f000 f9e9 	bl	8005b4c <_vfiprintf_r>
 800577a:	b003      	add	sp, #12
 800577c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005780:	b004      	add	sp, #16
 8005782:	4770      	bx	lr
 8005784:	200000ec 	.word	0x200000ec

08005788 <__sread>:
 8005788:	b510      	push	{r4, lr}
 800578a:	460c      	mov	r4, r1
 800578c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005790:	f000 f868 	bl	8005864 <_read_r>
 8005794:	2800      	cmp	r0, #0
 8005796:	bfab      	itete	ge
 8005798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800579a:	89a3      	ldrhlt	r3, [r4, #12]
 800579c:	181b      	addge	r3, r3, r0
 800579e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057a2:	bfac      	ite	ge
 80057a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057a6:	81a3      	strhlt	r3, [r4, #12]
 80057a8:	bd10      	pop	{r4, pc}

080057aa <__swrite>:
 80057aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ae:	461f      	mov	r7, r3
 80057b0:	898b      	ldrh	r3, [r1, #12]
 80057b2:	05db      	lsls	r3, r3, #23
 80057b4:	4605      	mov	r5, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4616      	mov	r6, r2
 80057ba:	d505      	bpl.n	80057c8 <__swrite+0x1e>
 80057bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c0:	2302      	movs	r3, #2
 80057c2:	2200      	movs	r2, #0
 80057c4:	f000 f83c 	bl	8005840 <_lseek_r>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	4632      	mov	r2, r6
 80057d6:	463b      	mov	r3, r7
 80057d8:	4628      	mov	r0, r5
 80057da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	f000 b853 	b.w	8005888 <_write_r>

080057e2 <__sseek>:
 80057e2:	b510      	push	{r4, lr}
 80057e4:	460c      	mov	r4, r1
 80057e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ea:	f000 f829 	bl	8005840 <_lseek_r>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	bf15      	itete	ne
 80057f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057fe:	81a3      	strheq	r3, [r4, #12]
 8005800:	bf18      	it	ne
 8005802:	81a3      	strhne	r3, [r4, #12]
 8005804:	bd10      	pop	{r4, pc}

08005806 <__sclose>:
 8005806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580a:	f000 b809 	b.w	8005820 <_close_r>

0800580e <memset>:
 800580e:	4402      	add	r2, r0
 8005810:	4603      	mov	r3, r0
 8005812:	4293      	cmp	r3, r2
 8005814:	d100      	bne.n	8005818 <memset+0xa>
 8005816:	4770      	bx	lr
 8005818:	f803 1b01 	strb.w	r1, [r3], #1
 800581c:	e7f9      	b.n	8005812 <memset+0x4>
	...

08005820 <_close_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	@ (800583c <_close_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f7fb f9f4 	bl	8000c18 <_close>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_close_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_close_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	200012a0 	.word	0x200012a0

08005840 <_lseek_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d07      	ldr	r5, [pc, #28]	@ (8005860 <_lseek_r+0x20>)
 8005844:	4604      	mov	r4, r0
 8005846:	4608      	mov	r0, r1
 8005848:	4611      	mov	r1, r2
 800584a:	2200      	movs	r2, #0
 800584c:	602a      	str	r2, [r5, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	f7fb f9ec 	bl	8000c2c <_lseek>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_lseek_r+0x1e>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b103      	cbz	r3, 800585e <_lseek_r+0x1e>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	200012a0 	.word	0x200012a0

08005864 <_read_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d07      	ldr	r5, [pc, #28]	@ (8005884 <_read_r+0x20>)
 8005868:	4604      	mov	r4, r0
 800586a:	4608      	mov	r0, r1
 800586c:	4611      	mov	r1, r2
 800586e:	2200      	movs	r2, #0
 8005870:	602a      	str	r2, [r5, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	f7fb f9b2 	bl	8000bdc <_read>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_read_r+0x1e>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	b103      	cbz	r3, 8005882 <_read_r+0x1e>
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	200012a0 	.word	0x200012a0

08005888 <_write_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d07      	ldr	r5, [pc, #28]	@ (80058a8 <_write_r+0x20>)
 800588c:	4604      	mov	r4, r0
 800588e:	4608      	mov	r0, r1
 8005890:	4611      	mov	r1, r2
 8005892:	2200      	movs	r2, #0
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	f7fb f9b0 	bl	8000bfc <_write>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_write_r+0x1e>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_write_r+0x1e>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	200012a0 	.word	0x200012a0

080058ac <__errno>:
 80058ac:	4b01      	ldr	r3, [pc, #4]	@ (80058b4 <__errno+0x8>)
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	200000ec 	.word	0x200000ec

080058b8 <__libc_init_array>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	4d0d      	ldr	r5, [pc, #52]	@ (80058f0 <__libc_init_array+0x38>)
 80058bc:	4c0d      	ldr	r4, [pc, #52]	@ (80058f4 <__libc_init_array+0x3c>)
 80058be:	1b64      	subs	r4, r4, r5
 80058c0:	10a4      	asrs	r4, r4, #2
 80058c2:	2600      	movs	r6, #0
 80058c4:	42a6      	cmp	r6, r4
 80058c6:	d109      	bne.n	80058dc <__libc_init_array+0x24>
 80058c8:	4d0b      	ldr	r5, [pc, #44]	@ (80058f8 <__libc_init_array+0x40>)
 80058ca:	4c0c      	ldr	r4, [pc, #48]	@ (80058fc <__libc_init_array+0x44>)
 80058cc:	f000 fdb6 	bl	800643c <_init>
 80058d0:	1b64      	subs	r4, r4, r5
 80058d2:	10a4      	asrs	r4, r4, #2
 80058d4:	2600      	movs	r6, #0
 80058d6:	42a6      	cmp	r6, r4
 80058d8:	d105      	bne.n	80058e6 <__libc_init_array+0x2e>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e0:	4798      	blx	r3
 80058e2:	3601      	adds	r6, #1
 80058e4:	e7ee      	b.n	80058c4 <__libc_init_array+0xc>
 80058e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ea:	4798      	blx	r3
 80058ec:	3601      	adds	r6, #1
 80058ee:	e7f2      	b.n	80058d6 <__libc_init_array+0x1e>
 80058f0:	0800655c 	.word	0x0800655c
 80058f4:	0800655c 	.word	0x0800655c
 80058f8:	0800655c 	.word	0x0800655c
 80058fc:	08006560 	.word	0x08006560

08005900 <__retarget_lock_init_recursive>:
 8005900:	4770      	bx	lr

08005902 <__retarget_lock_acquire_recursive>:
 8005902:	4770      	bx	lr

08005904 <__retarget_lock_release_recursive>:
 8005904:	4770      	bx	lr
	...

08005908 <_free_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4605      	mov	r5, r0
 800590c:	2900      	cmp	r1, #0
 800590e:	d041      	beq.n	8005994 <_free_r+0x8c>
 8005910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005914:	1f0c      	subs	r4, r1, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	bfb8      	it	lt
 800591a:	18e4      	addlt	r4, r4, r3
 800591c:	f000 f8e0 	bl	8005ae0 <__malloc_lock>
 8005920:	4a1d      	ldr	r2, [pc, #116]	@ (8005998 <_free_r+0x90>)
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	b933      	cbnz	r3, 8005934 <_free_r+0x2c>
 8005926:	6063      	str	r3, [r4, #4]
 8005928:	6014      	str	r4, [r2, #0]
 800592a:	4628      	mov	r0, r5
 800592c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005930:	f000 b8dc 	b.w	8005aec <__malloc_unlock>
 8005934:	42a3      	cmp	r3, r4
 8005936:	d908      	bls.n	800594a <_free_r+0x42>
 8005938:	6820      	ldr	r0, [r4, #0]
 800593a:	1821      	adds	r1, r4, r0
 800593c:	428b      	cmp	r3, r1
 800593e:	bf01      	itttt	eq
 8005940:	6819      	ldreq	r1, [r3, #0]
 8005942:	685b      	ldreq	r3, [r3, #4]
 8005944:	1809      	addeq	r1, r1, r0
 8005946:	6021      	streq	r1, [r4, #0]
 8005948:	e7ed      	b.n	8005926 <_free_r+0x1e>
 800594a:	461a      	mov	r2, r3
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	b10b      	cbz	r3, 8005954 <_free_r+0x4c>
 8005950:	42a3      	cmp	r3, r4
 8005952:	d9fa      	bls.n	800594a <_free_r+0x42>
 8005954:	6811      	ldr	r1, [r2, #0]
 8005956:	1850      	adds	r0, r2, r1
 8005958:	42a0      	cmp	r0, r4
 800595a:	d10b      	bne.n	8005974 <_free_r+0x6c>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	4401      	add	r1, r0
 8005960:	1850      	adds	r0, r2, r1
 8005962:	4283      	cmp	r3, r0
 8005964:	6011      	str	r1, [r2, #0]
 8005966:	d1e0      	bne.n	800592a <_free_r+0x22>
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	6053      	str	r3, [r2, #4]
 800596e:	4408      	add	r0, r1
 8005970:	6010      	str	r0, [r2, #0]
 8005972:	e7da      	b.n	800592a <_free_r+0x22>
 8005974:	d902      	bls.n	800597c <_free_r+0x74>
 8005976:	230c      	movs	r3, #12
 8005978:	602b      	str	r3, [r5, #0]
 800597a:	e7d6      	b.n	800592a <_free_r+0x22>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	1821      	adds	r1, r4, r0
 8005980:	428b      	cmp	r3, r1
 8005982:	bf04      	itt	eq
 8005984:	6819      	ldreq	r1, [r3, #0]
 8005986:	685b      	ldreq	r3, [r3, #4]
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	bf04      	itt	eq
 800598c:	1809      	addeq	r1, r1, r0
 800598e:	6021      	streq	r1, [r4, #0]
 8005990:	6054      	str	r4, [r2, #4]
 8005992:	e7ca      	b.n	800592a <_free_r+0x22>
 8005994:	bd38      	pop	{r3, r4, r5, pc}
 8005996:	bf00      	nop
 8005998:	200012ac 	.word	0x200012ac

0800599c <sbrk_aligned>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	4e0f      	ldr	r6, [pc, #60]	@ (80059dc <sbrk_aligned+0x40>)
 80059a0:	460c      	mov	r4, r1
 80059a2:	6831      	ldr	r1, [r6, #0]
 80059a4:	4605      	mov	r5, r0
 80059a6:	b911      	cbnz	r1, 80059ae <sbrk_aligned+0x12>
 80059a8:	f000 fcb4 	bl	8006314 <_sbrk_r>
 80059ac:	6030      	str	r0, [r6, #0]
 80059ae:	4621      	mov	r1, r4
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fcaf 	bl	8006314 <_sbrk_r>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	d103      	bne.n	80059c2 <sbrk_aligned+0x26>
 80059ba:	f04f 34ff 	mov.w	r4, #4294967295
 80059be:	4620      	mov	r0, r4
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	1cc4      	adds	r4, r0, #3
 80059c4:	f024 0403 	bic.w	r4, r4, #3
 80059c8:	42a0      	cmp	r0, r4
 80059ca:	d0f8      	beq.n	80059be <sbrk_aligned+0x22>
 80059cc:	1a21      	subs	r1, r4, r0
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 fca0 	bl	8006314 <_sbrk_r>
 80059d4:	3001      	adds	r0, #1
 80059d6:	d1f2      	bne.n	80059be <sbrk_aligned+0x22>
 80059d8:	e7ef      	b.n	80059ba <sbrk_aligned+0x1e>
 80059da:	bf00      	nop
 80059dc:	200012a8 	.word	0x200012a8

080059e0 <_malloc_r>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	1ccd      	adds	r5, r1, #3
 80059e6:	f025 0503 	bic.w	r5, r5, #3
 80059ea:	3508      	adds	r5, #8
 80059ec:	2d0c      	cmp	r5, #12
 80059ee:	bf38      	it	cc
 80059f0:	250c      	movcc	r5, #12
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	4606      	mov	r6, r0
 80059f6:	db01      	blt.n	80059fc <_malloc_r+0x1c>
 80059f8:	42a9      	cmp	r1, r5
 80059fa:	d904      	bls.n	8005a06 <_malloc_r+0x26>
 80059fc:	230c      	movs	r3, #12
 80059fe:	6033      	str	r3, [r6, #0]
 8005a00:	2000      	movs	r0, #0
 8005a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005adc <_malloc_r+0xfc>
 8005a0a:	f000 f869 	bl	8005ae0 <__malloc_lock>
 8005a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a12:	461c      	mov	r4, r3
 8005a14:	bb44      	cbnz	r4, 8005a68 <_malloc_r+0x88>
 8005a16:	4629      	mov	r1, r5
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f7ff ffbf 	bl	800599c <sbrk_aligned>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	4604      	mov	r4, r0
 8005a22:	d158      	bne.n	8005ad6 <_malloc_r+0xf6>
 8005a24:	f8d8 4000 	ldr.w	r4, [r8]
 8005a28:	4627      	mov	r7, r4
 8005a2a:	2f00      	cmp	r7, #0
 8005a2c:	d143      	bne.n	8005ab6 <_malloc_r+0xd6>
 8005a2e:	2c00      	cmp	r4, #0
 8005a30:	d04b      	beq.n	8005aca <_malloc_r+0xea>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	4639      	mov	r1, r7
 8005a36:	4630      	mov	r0, r6
 8005a38:	eb04 0903 	add.w	r9, r4, r3
 8005a3c:	f000 fc6a 	bl	8006314 <_sbrk_r>
 8005a40:	4581      	cmp	r9, r0
 8005a42:	d142      	bne.n	8005aca <_malloc_r+0xea>
 8005a44:	6821      	ldr	r1, [r4, #0]
 8005a46:	1a6d      	subs	r5, r5, r1
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ffa6 	bl	800599c <sbrk_aligned>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d03a      	beq.n	8005aca <_malloc_r+0xea>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	442b      	add	r3, r5
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	bb62      	cbnz	r2, 8005abc <_malloc_r+0xdc>
 8005a62:	f8c8 7000 	str.w	r7, [r8]
 8005a66:	e00f      	b.n	8005a88 <_malloc_r+0xa8>
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	1b52      	subs	r2, r2, r5
 8005a6c:	d420      	bmi.n	8005ab0 <_malloc_r+0xd0>
 8005a6e:	2a0b      	cmp	r2, #11
 8005a70:	d917      	bls.n	8005aa2 <_malloc_r+0xc2>
 8005a72:	1961      	adds	r1, r4, r5
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	6025      	str	r5, [r4, #0]
 8005a78:	bf18      	it	ne
 8005a7a:	6059      	strne	r1, [r3, #4]
 8005a7c:	6863      	ldr	r3, [r4, #4]
 8005a7e:	bf08      	it	eq
 8005a80:	f8c8 1000 	streq.w	r1, [r8]
 8005a84:	5162      	str	r2, [r4, r5]
 8005a86:	604b      	str	r3, [r1, #4]
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f000 f82f 	bl	8005aec <__malloc_unlock>
 8005a8e:	f104 000b 	add.w	r0, r4, #11
 8005a92:	1d23      	adds	r3, r4, #4
 8005a94:	f020 0007 	bic.w	r0, r0, #7
 8005a98:	1ac2      	subs	r2, r0, r3
 8005a9a:	bf1c      	itt	ne
 8005a9c:	1a1b      	subne	r3, r3, r0
 8005a9e:	50a3      	strne	r3, [r4, r2]
 8005aa0:	e7af      	b.n	8005a02 <_malloc_r+0x22>
 8005aa2:	6862      	ldr	r2, [r4, #4]
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	bf0c      	ite	eq
 8005aa8:	f8c8 2000 	streq.w	r2, [r8]
 8005aac:	605a      	strne	r2, [r3, #4]
 8005aae:	e7eb      	b.n	8005a88 <_malloc_r+0xa8>
 8005ab0:	4623      	mov	r3, r4
 8005ab2:	6864      	ldr	r4, [r4, #4]
 8005ab4:	e7ae      	b.n	8005a14 <_malloc_r+0x34>
 8005ab6:	463c      	mov	r4, r7
 8005ab8:	687f      	ldr	r7, [r7, #4]
 8005aba:	e7b6      	b.n	8005a2a <_malloc_r+0x4a>
 8005abc:	461a      	mov	r2, r3
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	d1fb      	bne.n	8005abc <_malloc_r+0xdc>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	6053      	str	r3, [r2, #4]
 8005ac8:	e7de      	b.n	8005a88 <_malloc_r+0xa8>
 8005aca:	230c      	movs	r3, #12
 8005acc:	6033      	str	r3, [r6, #0]
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f000 f80c 	bl	8005aec <__malloc_unlock>
 8005ad4:	e794      	b.n	8005a00 <_malloc_r+0x20>
 8005ad6:	6005      	str	r5, [r0, #0]
 8005ad8:	e7d6      	b.n	8005a88 <_malloc_r+0xa8>
 8005ada:	bf00      	nop
 8005adc:	200012ac 	.word	0x200012ac

08005ae0 <__malloc_lock>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	@ (8005ae8 <__malloc_lock+0x8>)
 8005ae2:	f7ff bf0e 	b.w	8005902 <__retarget_lock_acquire_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	200012a4 	.word	0x200012a4

08005aec <__malloc_unlock>:
 8005aec:	4801      	ldr	r0, [pc, #4]	@ (8005af4 <__malloc_unlock+0x8>)
 8005aee:	f7ff bf09 	b.w	8005904 <__retarget_lock_release_recursive>
 8005af2:	bf00      	nop
 8005af4:	200012a4 	.word	0x200012a4

08005af8 <__sfputc_r>:
 8005af8:	6893      	ldr	r3, [r2, #8]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	b410      	push	{r4}
 8005b00:	6093      	str	r3, [r2, #8]
 8005b02:	da08      	bge.n	8005b16 <__sfputc_r+0x1e>
 8005b04:	6994      	ldr	r4, [r2, #24]
 8005b06:	42a3      	cmp	r3, r4
 8005b08:	db01      	blt.n	8005b0e <__sfputc_r+0x16>
 8005b0a:	290a      	cmp	r1, #10
 8005b0c:	d103      	bne.n	8005b16 <__sfputc_r+0x1e>
 8005b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b12:	f000 bb6b 	b.w	80061ec <__swbuf_r>
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	1c58      	adds	r0, r3, #1
 8005b1a:	6010      	str	r0, [r2, #0]
 8005b1c:	7019      	strb	r1, [r3, #0]
 8005b1e:	4608      	mov	r0, r1
 8005b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <__sfputs_r>:
 8005b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b28:	4606      	mov	r6, r0
 8005b2a:	460f      	mov	r7, r1
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	18d5      	adds	r5, r2, r3
 8005b30:	42ac      	cmp	r4, r5
 8005b32:	d101      	bne.n	8005b38 <__sfputs_r+0x12>
 8005b34:	2000      	movs	r0, #0
 8005b36:	e007      	b.n	8005b48 <__sfputs_r+0x22>
 8005b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b3c:	463a      	mov	r2, r7
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f7ff ffda 	bl	8005af8 <__sfputc_r>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d1f3      	bne.n	8005b30 <__sfputs_r+0xa>
 8005b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b4c <_vfiprintf_r>:
 8005b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b50:	460d      	mov	r5, r1
 8005b52:	b09d      	sub	sp, #116	@ 0x74
 8005b54:	4614      	mov	r4, r2
 8005b56:	4698      	mov	r8, r3
 8005b58:	4606      	mov	r6, r0
 8005b5a:	b118      	cbz	r0, 8005b64 <_vfiprintf_r+0x18>
 8005b5c:	6a03      	ldr	r3, [r0, #32]
 8005b5e:	b90b      	cbnz	r3, 8005b64 <_vfiprintf_r+0x18>
 8005b60:	f7ff fdca 	bl	80056f8 <__sinit>
 8005b64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b66:	07d9      	lsls	r1, r3, #31
 8005b68:	d405      	bmi.n	8005b76 <_vfiprintf_r+0x2a>
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	059a      	lsls	r2, r3, #22
 8005b6e:	d402      	bmi.n	8005b76 <_vfiprintf_r+0x2a>
 8005b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b72:	f7ff fec6 	bl	8005902 <__retarget_lock_acquire_recursive>
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	071b      	lsls	r3, r3, #28
 8005b7a:	d501      	bpl.n	8005b80 <_vfiprintf_r+0x34>
 8005b7c:	692b      	ldr	r3, [r5, #16]
 8005b7e:	b99b      	cbnz	r3, 8005ba8 <_vfiprintf_r+0x5c>
 8005b80:	4629      	mov	r1, r5
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 fb70 	bl	8006268 <__swsetup_r>
 8005b88:	b170      	cbz	r0, 8005ba8 <_vfiprintf_r+0x5c>
 8005b8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b8c:	07dc      	lsls	r4, r3, #31
 8005b8e:	d504      	bpl.n	8005b9a <_vfiprintf_r+0x4e>
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	b01d      	add	sp, #116	@ 0x74
 8005b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9a:	89ab      	ldrh	r3, [r5, #12]
 8005b9c:	0598      	lsls	r0, r3, #22
 8005b9e:	d4f7      	bmi.n	8005b90 <_vfiprintf_r+0x44>
 8005ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ba2:	f7ff feaf 	bl	8005904 <__retarget_lock_release_recursive>
 8005ba6:	e7f3      	b.n	8005b90 <_vfiprintf_r+0x44>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bac:	2320      	movs	r3, #32
 8005bae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb6:	2330      	movs	r3, #48	@ 0x30
 8005bb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d68 <_vfiprintf_r+0x21c>
 8005bbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bc0:	f04f 0901 	mov.w	r9, #1
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	469a      	mov	sl, r3
 8005bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bcc:	b10a      	cbz	r2, 8005bd2 <_vfiprintf_r+0x86>
 8005bce:	2a25      	cmp	r2, #37	@ 0x25
 8005bd0:	d1f9      	bne.n	8005bc6 <_vfiprintf_r+0x7a>
 8005bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd6:	d00b      	beq.n	8005bf0 <_vfiprintf_r+0xa4>
 8005bd8:	465b      	mov	r3, fp
 8005bda:	4622      	mov	r2, r4
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4630      	mov	r0, r6
 8005be0:	f7ff ffa1 	bl	8005b26 <__sfputs_r>
 8005be4:	3001      	adds	r0, #1
 8005be6:	f000 80a7 	beq.w	8005d38 <_vfiprintf_r+0x1ec>
 8005bea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bec:	445a      	add	r2, fp
 8005bee:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 809f 	beq.w	8005d38 <_vfiprintf_r+0x1ec>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c04:	f10a 0a01 	add.w	sl, sl, #1
 8005c08:	9304      	str	r3, [sp, #16]
 8005c0a:	9307      	str	r3, [sp, #28]
 8005c0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c10:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c12:	4654      	mov	r4, sl
 8005c14:	2205      	movs	r2, #5
 8005c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1a:	4853      	ldr	r0, [pc, #332]	@ (8005d68 <_vfiprintf_r+0x21c>)
 8005c1c:	f7fa fad8 	bl	80001d0 <memchr>
 8005c20:	9a04      	ldr	r2, [sp, #16]
 8005c22:	b9d8      	cbnz	r0, 8005c5c <_vfiprintf_r+0x110>
 8005c24:	06d1      	lsls	r1, r2, #27
 8005c26:	bf44      	itt	mi
 8005c28:	2320      	movmi	r3, #32
 8005c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c2e:	0713      	lsls	r3, r2, #28
 8005c30:	bf44      	itt	mi
 8005c32:	232b      	movmi	r3, #43	@ 0x2b
 8005c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c38:	f89a 3000 	ldrb.w	r3, [sl]
 8005c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c3e:	d015      	beq.n	8005c6c <_vfiprintf_r+0x120>
 8005c40:	9a07      	ldr	r2, [sp, #28]
 8005c42:	4654      	mov	r4, sl
 8005c44:	2000      	movs	r0, #0
 8005c46:	f04f 0c0a 	mov.w	ip, #10
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c50:	3b30      	subs	r3, #48	@ 0x30
 8005c52:	2b09      	cmp	r3, #9
 8005c54:	d94b      	bls.n	8005cee <_vfiprintf_r+0x1a2>
 8005c56:	b1b0      	cbz	r0, 8005c86 <_vfiprintf_r+0x13a>
 8005c58:	9207      	str	r2, [sp, #28]
 8005c5a:	e014      	b.n	8005c86 <_vfiprintf_r+0x13a>
 8005c5c:	eba0 0308 	sub.w	r3, r0, r8
 8005c60:	fa09 f303 	lsl.w	r3, r9, r3
 8005c64:	4313      	orrs	r3, r2
 8005c66:	9304      	str	r3, [sp, #16]
 8005c68:	46a2      	mov	sl, r4
 8005c6a:	e7d2      	b.n	8005c12 <_vfiprintf_r+0xc6>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	1d19      	adds	r1, r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	9103      	str	r1, [sp, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bfbb      	ittet	lt
 8005c78:	425b      	neglt	r3, r3
 8005c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7e:	9307      	strge	r3, [sp, #28]
 8005c80:	9307      	strlt	r3, [sp, #28]
 8005c82:	bfb8      	it	lt
 8005c84:	9204      	strlt	r2, [sp, #16]
 8005c86:	7823      	ldrb	r3, [r4, #0]
 8005c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c8a:	d10a      	bne.n	8005ca2 <_vfiprintf_r+0x156>
 8005c8c:	7863      	ldrb	r3, [r4, #1]
 8005c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c90:	d132      	bne.n	8005cf8 <_vfiprintf_r+0x1ac>
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	1d1a      	adds	r2, r3, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	9203      	str	r2, [sp, #12]
 8005c9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c9e:	3402      	adds	r4, #2
 8005ca0:	9305      	str	r3, [sp, #20]
 8005ca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d78 <_vfiprintf_r+0x22c>
 8005ca6:	7821      	ldrb	r1, [r4, #0]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	4650      	mov	r0, sl
 8005cac:	f7fa fa90 	bl	80001d0 <memchr>
 8005cb0:	b138      	cbz	r0, 8005cc2 <_vfiprintf_r+0x176>
 8005cb2:	9b04      	ldr	r3, [sp, #16]
 8005cb4:	eba0 000a 	sub.w	r0, r0, sl
 8005cb8:	2240      	movs	r2, #64	@ 0x40
 8005cba:	4082      	lsls	r2, r0
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	3401      	adds	r4, #1
 8005cc0:	9304      	str	r3, [sp, #16]
 8005cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc6:	4829      	ldr	r0, [pc, #164]	@ (8005d6c <_vfiprintf_r+0x220>)
 8005cc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ccc:	2206      	movs	r2, #6
 8005cce:	f7fa fa7f 	bl	80001d0 <memchr>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d03f      	beq.n	8005d56 <_vfiprintf_r+0x20a>
 8005cd6:	4b26      	ldr	r3, [pc, #152]	@ (8005d70 <_vfiprintf_r+0x224>)
 8005cd8:	bb1b      	cbnz	r3, 8005d22 <_vfiprintf_r+0x1d6>
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	3307      	adds	r3, #7
 8005cde:	f023 0307 	bic.w	r3, r3, #7
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	9303      	str	r3, [sp, #12]
 8005ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce8:	443b      	add	r3, r7
 8005cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cec:	e76a      	b.n	8005bc4 <_vfiprintf_r+0x78>
 8005cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	e7a8      	b.n	8005c4a <_vfiprintf_r+0xfe>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	3401      	adds	r4, #1
 8005cfc:	9305      	str	r3, [sp, #20]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f04f 0c0a 	mov.w	ip, #10
 8005d04:	4620      	mov	r0, r4
 8005d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d0a:	3a30      	subs	r2, #48	@ 0x30
 8005d0c:	2a09      	cmp	r2, #9
 8005d0e:	d903      	bls.n	8005d18 <_vfiprintf_r+0x1cc>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0c6      	beq.n	8005ca2 <_vfiprintf_r+0x156>
 8005d14:	9105      	str	r1, [sp, #20]
 8005d16:	e7c4      	b.n	8005ca2 <_vfiprintf_r+0x156>
 8005d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7f0      	b.n	8005d04 <_vfiprintf_r+0x1b8>
 8005d22:	ab03      	add	r3, sp, #12
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	462a      	mov	r2, r5
 8005d28:	4b12      	ldr	r3, [pc, #72]	@ (8005d74 <_vfiprintf_r+0x228>)
 8005d2a:	a904      	add	r1, sp, #16
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f3af 8000 	nop.w
 8005d32:	4607      	mov	r7, r0
 8005d34:	1c78      	adds	r0, r7, #1
 8005d36:	d1d6      	bne.n	8005ce6 <_vfiprintf_r+0x19a>
 8005d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d405      	bmi.n	8005d4a <_vfiprintf_r+0x1fe>
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	059a      	lsls	r2, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_vfiprintf_r+0x1fe>
 8005d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d46:	f7ff fddd 	bl	8005904 <__retarget_lock_release_recursive>
 8005d4a:	89ab      	ldrh	r3, [r5, #12]
 8005d4c:	065b      	lsls	r3, r3, #25
 8005d4e:	f53f af1f 	bmi.w	8005b90 <_vfiprintf_r+0x44>
 8005d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d54:	e71e      	b.n	8005b94 <_vfiprintf_r+0x48>
 8005d56:	ab03      	add	r3, sp, #12
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <_vfiprintf_r+0x228>)
 8005d5e:	a904      	add	r1, sp, #16
 8005d60:	4630      	mov	r0, r6
 8005d62:	f000 f879 	bl	8005e58 <_printf_i>
 8005d66:	e7e4      	b.n	8005d32 <_vfiprintf_r+0x1e6>
 8005d68:	08006520 	.word	0x08006520
 8005d6c:	0800652a 	.word	0x0800652a
 8005d70:	00000000 	.word	0x00000000
 8005d74:	08005b27 	.word	0x08005b27
 8005d78:	08006526 	.word	0x08006526

08005d7c <_printf_common>:
 8005d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d80:	4616      	mov	r6, r2
 8005d82:	4698      	mov	r8, r3
 8005d84:	688a      	ldr	r2, [r1, #8]
 8005d86:	690b      	ldr	r3, [r1, #16]
 8005d88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	bfb8      	it	lt
 8005d90:	4613      	movlt	r3, r2
 8005d92:	6033      	str	r3, [r6, #0]
 8005d94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d98:	4607      	mov	r7, r0
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	b10a      	cbz	r2, 8005da2 <_printf_common+0x26>
 8005d9e:	3301      	adds	r3, #1
 8005da0:	6033      	str	r3, [r6, #0]
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	0699      	lsls	r1, r3, #26
 8005da6:	bf42      	ittt	mi
 8005da8:	6833      	ldrmi	r3, [r6, #0]
 8005daa:	3302      	addmi	r3, #2
 8005dac:	6033      	strmi	r3, [r6, #0]
 8005dae:	6825      	ldr	r5, [r4, #0]
 8005db0:	f015 0506 	ands.w	r5, r5, #6
 8005db4:	d106      	bne.n	8005dc4 <_printf_common+0x48>
 8005db6:	f104 0a19 	add.w	sl, r4, #25
 8005dba:	68e3      	ldr	r3, [r4, #12]
 8005dbc:	6832      	ldr	r2, [r6, #0]
 8005dbe:	1a9b      	subs	r3, r3, r2
 8005dc0:	42ab      	cmp	r3, r5
 8005dc2:	dc26      	bgt.n	8005e12 <_printf_common+0x96>
 8005dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005dc8:	6822      	ldr	r2, [r4, #0]
 8005dca:	3b00      	subs	r3, #0
 8005dcc:	bf18      	it	ne
 8005dce:	2301      	movne	r3, #1
 8005dd0:	0692      	lsls	r2, r2, #26
 8005dd2:	d42b      	bmi.n	8005e2c <_printf_common+0xb0>
 8005dd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dd8:	4641      	mov	r1, r8
 8005dda:	4638      	mov	r0, r7
 8005ddc:	47c8      	blx	r9
 8005dde:	3001      	adds	r0, #1
 8005de0:	d01e      	beq.n	8005e20 <_printf_common+0xa4>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	6922      	ldr	r2, [r4, #16]
 8005de6:	f003 0306 	and.w	r3, r3, #6
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	bf02      	ittt	eq
 8005dee:	68e5      	ldreq	r5, [r4, #12]
 8005df0:	6833      	ldreq	r3, [r6, #0]
 8005df2:	1aed      	subeq	r5, r5, r3
 8005df4:	68a3      	ldr	r3, [r4, #8]
 8005df6:	bf0c      	ite	eq
 8005df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dfc:	2500      	movne	r5, #0
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	bfc4      	itt	gt
 8005e02:	1a9b      	subgt	r3, r3, r2
 8005e04:	18ed      	addgt	r5, r5, r3
 8005e06:	2600      	movs	r6, #0
 8005e08:	341a      	adds	r4, #26
 8005e0a:	42b5      	cmp	r5, r6
 8005e0c:	d11a      	bne.n	8005e44 <_printf_common+0xc8>
 8005e0e:	2000      	movs	r0, #0
 8005e10:	e008      	b.n	8005e24 <_printf_common+0xa8>
 8005e12:	2301      	movs	r3, #1
 8005e14:	4652      	mov	r2, sl
 8005e16:	4641      	mov	r1, r8
 8005e18:	4638      	mov	r0, r7
 8005e1a:	47c8      	blx	r9
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d103      	bne.n	8005e28 <_printf_common+0xac>
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295
 8005e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e28:	3501      	adds	r5, #1
 8005e2a:	e7c6      	b.n	8005dba <_printf_common+0x3e>
 8005e2c:	18e1      	adds	r1, r4, r3
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	2030      	movs	r0, #48	@ 0x30
 8005e32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e36:	4422      	add	r2, r4
 8005e38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e40:	3302      	adds	r3, #2
 8005e42:	e7c7      	b.n	8005dd4 <_printf_common+0x58>
 8005e44:	2301      	movs	r3, #1
 8005e46:	4622      	mov	r2, r4
 8005e48:	4641      	mov	r1, r8
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	47c8      	blx	r9
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d0e6      	beq.n	8005e20 <_printf_common+0xa4>
 8005e52:	3601      	adds	r6, #1
 8005e54:	e7d9      	b.n	8005e0a <_printf_common+0x8e>
	...

08005e58 <_printf_i>:
 8005e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5c:	7e0f      	ldrb	r7, [r1, #24]
 8005e5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e60:	2f78      	cmp	r7, #120	@ 0x78
 8005e62:	4691      	mov	r9, r2
 8005e64:	4680      	mov	r8, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	469a      	mov	sl, r3
 8005e6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e6e:	d807      	bhi.n	8005e80 <_printf_i+0x28>
 8005e70:	2f62      	cmp	r7, #98	@ 0x62
 8005e72:	d80a      	bhi.n	8005e8a <_printf_i+0x32>
 8005e74:	2f00      	cmp	r7, #0
 8005e76:	f000 80d1 	beq.w	800601c <_printf_i+0x1c4>
 8005e7a:	2f58      	cmp	r7, #88	@ 0x58
 8005e7c:	f000 80b8 	beq.w	8005ff0 <_printf_i+0x198>
 8005e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e88:	e03a      	b.n	8005f00 <_printf_i+0xa8>
 8005e8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e8e:	2b15      	cmp	r3, #21
 8005e90:	d8f6      	bhi.n	8005e80 <_printf_i+0x28>
 8005e92:	a101      	add	r1, pc, #4	@ (adr r1, 8005e98 <_printf_i+0x40>)
 8005e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e98:	08005ef1 	.word	0x08005ef1
 8005e9c:	08005f05 	.word	0x08005f05
 8005ea0:	08005e81 	.word	0x08005e81
 8005ea4:	08005e81 	.word	0x08005e81
 8005ea8:	08005e81 	.word	0x08005e81
 8005eac:	08005e81 	.word	0x08005e81
 8005eb0:	08005f05 	.word	0x08005f05
 8005eb4:	08005e81 	.word	0x08005e81
 8005eb8:	08005e81 	.word	0x08005e81
 8005ebc:	08005e81 	.word	0x08005e81
 8005ec0:	08005e81 	.word	0x08005e81
 8005ec4:	08006003 	.word	0x08006003
 8005ec8:	08005f2f 	.word	0x08005f2f
 8005ecc:	08005fbd 	.word	0x08005fbd
 8005ed0:	08005e81 	.word	0x08005e81
 8005ed4:	08005e81 	.word	0x08005e81
 8005ed8:	08006025 	.word	0x08006025
 8005edc:	08005e81 	.word	0x08005e81
 8005ee0:	08005f2f 	.word	0x08005f2f
 8005ee4:	08005e81 	.word	0x08005e81
 8005ee8:	08005e81 	.word	0x08005e81
 8005eec:	08005fc5 	.word	0x08005fc5
 8005ef0:	6833      	ldr	r3, [r6, #0]
 8005ef2:	1d1a      	adds	r2, r3, #4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6032      	str	r2, [r6, #0]
 8005ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f00:	2301      	movs	r3, #1
 8005f02:	e09c      	b.n	800603e <_printf_i+0x1e6>
 8005f04:	6833      	ldr	r3, [r6, #0]
 8005f06:	6820      	ldr	r0, [r4, #0]
 8005f08:	1d19      	adds	r1, r3, #4
 8005f0a:	6031      	str	r1, [r6, #0]
 8005f0c:	0606      	lsls	r6, r0, #24
 8005f0e:	d501      	bpl.n	8005f14 <_printf_i+0xbc>
 8005f10:	681d      	ldr	r5, [r3, #0]
 8005f12:	e003      	b.n	8005f1c <_printf_i+0xc4>
 8005f14:	0645      	lsls	r5, r0, #25
 8005f16:	d5fb      	bpl.n	8005f10 <_printf_i+0xb8>
 8005f18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f1c:	2d00      	cmp	r5, #0
 8005f1e:	da03      	bge.n	8005f28 <_printf_i+0xd0>
 8005f20:	232d      	movs	r3, #45	@ 0x2d
 8005f22:	426d      	negs	r5, r5
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f28:	4858      	ldr	r0, [pc, #352]	@ (800608c <_printf_i+0x234>)
 8005f2a:	230a      	movs	r3, #10
 8005f2c:	e011      	b.n	8005f52 <_printf_i+0xfa>
 8005f2e:	6821      	ldr	r1, [r4, #0]
 8005f30:	6833      	ldr	r3, [r6, #0]
 8005f32:	0608      	lsls	r0, r1, #24
 8005f34:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f38:	d402      	bmi.n	8005f40 <_printf_i+0xe8>
 8005f3a:	0649      	lsls	r1, r1, #25
 8005f3c:	bf48      	it	mi
 8005f3e:	b2ad      	uxthmi	r5, r5
 8005f40:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f42:	4852      	ldr	r0, [pc, #328]	@ (800608c <_printf_i+0x234>)
 8005f44:	6033      	str	r3, [r6, #0]
 8005f46:	bf14      	ite	ne
 8005f48:	230a      	movne	r3, #10
 8005f4a:	2308      	moveq	r3, #8
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f52:	6866      	ldr	r6, [r4, #4]
 8005f54:	60a6      	str	r6, [r4, #8]
 8005f56:	2e00      	cmp	r6, #0
 8005f58:	db05      	blt.n	8005f66 <_printf_i+0x10e>
 8005f5a:	6821      	ldr	r1, [r4, #0]
 8005f5c:	432e      	orrs	r6, r5
 8005f5e:	f021 0104 	bic.w	r1, r1, #4
 8005f62:	6021      	str	r1, [r4, #0]
 8005f64:	d04b      	beq.n	8005ffe <_printf_i+0x1a6>
 8005f66:	4616      	mov	r6, r2
 8005f68:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f6c:	fb03 5711 	mls	r7, r3, r1, r5
 8005f70:	5dc7      	ldrb	r7, [r0, r7]
 8005f72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f76:	462f      	mov	r7, r5
 8005f78:	42bb      	cmp	r3, r7
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	d9f4      	bls.n	8005f68 <_printf_i+0x110>
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d10b      	bne.n	8005f9a <_printf_i+0x142>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	07df      	lsls	r7, r3, #31
 8005f86:	d508      	bpl.n	8005f9a <_printf_i+0x142>
 8005f88:	6923      	ldr	r3, [r4, #16]
 8005f8a:	6861      	ldr	r1, [r4, #4]
 8005f8c:	4299      	cmp	r1, r3
 8005f8e:	bfde      	ittt	le
 8005f90:	2330      	movle	r3, #48	@ 0x30
 8005f92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f9a:	1b92      	subs	r2, r2, r6
 8005f9c:	6122      	str	r2, [r4, #16]
 8005f9e:	f8cd a000 	str.w	sl, [sp]
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	aa03      	add	r2, sp, #12
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4640      	mov	r0, r8
 8005faa:	f7ff fee7 	bl	8005d7c <_printf_common>
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d14a      	bne.n	8006048 <_printf_i+0x1f0>
 8005fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb6:	b004      	add	sp, #16
 8005fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	f043 0320 	orr.w	r3, r3, #32
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	4832      	ldr	r0, [pc, #200]	@ (8006090 <_printf_i+0x238>)
 8005fc6:	2778      	movs	r7, #120	@ 0x78
 8005fc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	6831      	ldr	r1, [r6, #0]
 8005fd0:	061f      	lsls	r7, r3, #24
 8005fd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fd6:	d402      	bmi.n	8005fde <_printf_i+0x186>
 8005fd8:	065f      	lsls	r7, r3, #25
 8005fda:	bf48      	it	mi
 8005fdc:	b2ad      	uxthmi	r5, r5
 8005fde:	6031      	str	r1, [r6, #0]
 8005fe0:	07d9      	lsls	r1, r3, #31
 8005fe2:	bf44      	itt	mi
 8005fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fe8:	6023      	strmi	r3, [r4, #0]
 8005fea:	b11d      	cbz	r5, 8005ff4 <_printf_i+0x19c>
 8005fec:	2310      	movs	r3, #16
 8005fee:	e7ad      	b.n	8005f4c <_printf_i+0xf4>
 8005ff0:	4826      	ldr	r0, [pc, #152]	@ (800608c <_printf_i+0x234>)
 8005ff2:	e7e9      	b.n	8005fc8 <_printf_i+0x170>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	f023 0320 	bic.w	r3, r3, #32
 8005ffa:	6023      	str	r3, [r4, #0]
 8005ffc:	e7f6      	b.n	8005fec <_printf_i+0x194>
 8005ffe:	4616      	mov	r6, r2
 8006000:	e7bd      	b.n	8005f7e <_printf_i+0x126>
 8006002:	6833      	ldr	r3, [r6, #0]
 8006004:	6825      	ldr	r5, [r4, #0]
 8006006:	6961      	ldr	r1, [r4, #20]
 8006008:	1d18      	adds	r0, r3, #4
 800600a:	6030      	str	r0, [r6, #0]
 800600c:	062e      	lsls	r6, r5, #24
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	d501      	bpl.n	8006016 <_printf_i+0x1be>
 8006012:	6019      	str	r1, [r3, #0]
 8006014:	e002      	b.n	800601c <_printf_i+0x1c4>
 8006016:	0668      	lsls	r0, r5, #25
 8006018:	d5fb      	bpl.n	8006012 <_printf_i+0x1ba>
 800601a:	8019      	strh	r1, [r3, #0]
 800601c:	2300      	movs	r3, #0
 800601e:	6123      	str	r3, [r4, #16]
 8006020:	4616      	mov	r6, r2
 8006022:	e7bc      	b.n	8005f9e <_printf_i+0x146>
 8006024:	6833      	ldr	r3, [r6, #0]
 8006026:	1d1a      	adds	r2, r3, #4
 8006028:	6032      	str	r2, [r6, #0]
 800602a:	681e      	ldr	r6, [r3, #0]
 800602c:	6862      	ldr	r2, [r4, #4]
 800602e:	2100      	movs	r1, #0
 8006030:	4630      	mov	r0, r6
 8006032:	f7fa f8cd 	bl	80001d0 <memchr>
 8006036:	b108      	cbz	r0, 800603c <_printf_i+0x1e4>
 8006038:	1b80      	subs	r0, r0, r6
 800603a:	6060      	str	r0, [r4, #4]
 800603c:	6863      	ldr	r3, [r4, #4]
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	2300      	movs	r3, #0
 8006042:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006046:	e7aa      	b.n	8005f9e <_printf_i+0x146>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	4632      	mov	r2, r6
 800604c:	4649      	mov	r1, r9
 800604e:	4640      	mov	r0, r8
 8006050:	47d0      	blx	sl
 8006052:	3001      	adds	r0, #1
 8006054:	d0ad      	beq.n	8005fb2 <_printf_i+0x15a>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	079b      	lsls	r3, r3, #30
 800605a:	d413      	bmi.n	8006084 <_printf_i+0x22c>
 800605c:	68e0      	ldr	r0, [r4, #12]
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	4298      	cmp	r0, r3
 8006062:	bfb8      	it	lt
 8006064:	4618      	movlt	r0, r3
 8006066:	e7a6      	b.n	8005fb6 <_printf_i+0x15e>
 8006068:	2301      	movs	r3, #1
 800606a:	4632      	mov	r2, r6
 800606c:	4649      	mov	r1, r9
 800606e:	4640      	mov	r0, r8
 8006070:	47d0      	blx	sl
 8006072:	3001      	adds	r0, #1
 8006074:	d09d      	beq.n	8005fb2 <_printf_i+0x15a>
 8006076:	3501      	adds	r5, #1
 8006078:	68e3      	ldr	r3, [r4, #12]
 800607a:	9903      	ldr	r1, [sp, #12]
 800607c:	1a5b      	subs	r3, r3, r1
 800607e:	42ab      	cmp	r3, r5
 8006080:	dcf2      	bgt.n	8006068 <_printf_i+0x210>
 8006082:	e7eb      	b.n	800605c <_printf_i+0x204>
 8006084:	2500      	movs	r5, #0
 8006086:	f104 0619 	add.w	r6, r4, #25
 800608a:	e7f5      	b.n	8006078 <_printf_i+0x220>
 800608c:	08006531 	.word	0x08006531
 8006090:	08006542 	.word	0x08006542

08006094 <__sflush_r>:
 8006094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	0716      	lsls	r6, r2, #28
 800609e:	4605      	mov	r5, r0
 80060a0:	460c      	mov	r4, r1
 80060a2:	d454      	bmi.n	800614e <__sflush_r+0xba>
 80060a4:	684b      	ldr	r3, [r1, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dc02      	bgt.n	80060b0 <__sflush_r+0x1c>
 80060aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dd48      	ble.n	8006142 <__sflush_r+0xae>
 80060b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060b2:	2e00      	cmp	r6, #0
 80060b4:	d045      	beq.n	8006142 <__sflush_r+0xae>
 80060b6:	2300      	movs	r3, #0
 80060b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060bc:	682f      	ldr	r7, [r5, #0]
 80060be:	6a21      	ldr	r1, [r4, #32]
 80060c0:	602b      	str	r3, [r5, #0]
 80060c2:	d030      	beq.n	8006126 <__sflush_r+0x92>
 80060c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	0759      	lsls	r1, r3, #29
 80060ca:	d505      	bpl.n	80060d8 <__sflush_r+0x44>
 80060cc:	6863      	ldr	r3, [r4, #4]
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060d2:	b10b      	cbz	r3, 80060d8 <__sflush_r+0x44>
 80060d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060d6:	1ad2      	subs	r2, r2, r3
 80060d8:	2300      	movs	r3, #0
 80060da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060dc:	6a21      	ldr	r1, [r4, #32]
 80060de:	4628      	mov	r0, r5
 80060e0:	47b0      	blx	r6
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	d106      	bne.n	80060f6 <__sflush_r+0x62>
 80060e8:	6829      	ldr	r1, [r5, #0]
 80060ea:	291d      	cmp	r1, #29
 80060ec:	d82b      	bhi.n	8006146 <__sflush_r+0xb2>
 80060ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006198 <__sflush_r+0x104>)
 80060f0:	40ca      	lsrs	r2, r1
 80060f2:	07d6      	lsls	r6, r2, #31
 80060f4:	d527      	bpl.n	8006146 <__sflush_r+0xb2>
 80060f6:	2200      	movs	r2, #0
 80060f8:	6062      	str	r2, [r4, #4]
 80060fa:	04d9      	lsls	r1, r3, #19
 80060fc:	6922      	ldr	r2, [r4, #16]
 80060fe:	6022      	str	r2, [r4, #0]
 8006100:	d504      	bpl.n	800610c <__sflush_r+0x78>
 8006102:	1c42      	adds	r2, r0, #1
 8006104:	d101      	bne.n	800610a <__sflush_r+0x76>
 8006106:	682b      	ldr	r3, [r5, #0]
 8006108:	b903      	cbnz	r3, 800610c <__sflush_r+0x78>
 800610a:	6560      	str	r0, [r4, #84]	@ 0x54
 800610c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800610e:	602f      	str	r7, [r5, #0]
 8006110:	b1b9      	cbz	r1, 8006142 <__sflush_r+0xae>
 8006112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006116:	4299      	cmp	r1, r3
 8006118:	d002      	beq.n	8006120 <__sflush_r+0x8c>
 800611a:	4628      	mov	r0, r5
 800611c:	f7ff fbf4 	bl	8005908 <_free_r>
 8006120:	2300      	movs	r3, #0
 8006122:	6363      	str	r3, [r4, #52]	@ 0x34
 8006124:	e00d      	b.n	8006142 <__sflush_r+0xae>
 8006126:	2301      	movs	r3, #1
 8006128:	4628      	mov	r0, r5
 800612a:	47b0      	blx	r6
 800612c:	4602      	mov	r2, r0
 800612e:	1c50      	adds	r0, r2, #1
 8006130:	d1c9      	bne.n	80060c6 <__sflush_r+0x32>
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0c6      	beq.n	80060c6 <__sflush_r+0x32>
 8006138:	2b1d      	cmp	r3, #29
 800613a:	d001      	beq.n	8006140 <__sflush_r+0xac>
 800613c:	2b16      	cmp	r3, #22
 800613e:	d11e      	bne.n	800617e <__sflush_r+0xea>
 8006140:	602f      	str	r7, [r5, #0]
 8006142:	2000      	movs	r0, #0
 8006144:	e022      	b.n	800618c <__sflush_r+0xf8>
 8006146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800614a:	b21b      	sxth	r3, r3
 800614c:	e01b      	b.n	8006186 <__sflush_r+0xf2>
 800614e:	690f      	ldr	r7, [r1, #16]
 8006150:	2f00      	cmp	r7, #0
 8006152:	d0f6      	beq.n	8006142 <__sflush_r+0xae>
 8006154:	0793      	lsls	r3, r2, #30
 8006156:	680e      	ldr	r6, [r1, #0]
 8006158:	bf08      	it	eq
 800615a:	694b      	ldreq	r3, [r1, #20]
 800615c:	600f      	str	r7, [r1, #0]
 800615e:	bf18      	it	ne
 8006160:	2300      	movne	r3, #0
 8006162:	eba6 0807 	sub.w	r8, r6, r7
 8006166:	608b      	str	r3, [r1, #8]
 8006168:	f1b8 0f00 	cmp.w	r8, #0
 800616c:	dde9      	ble.n	8006142 <__sflush_r+0xae>
 800616e:	6a21      	ldr	r1, [r4, #32]
 8006170:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006172:	4643      	mov	r3, r8
 8006174:	463a      	mov	r2, r7
 8006176:	4628      	mov	r0, r5
 8006178:	47b0      	blx	r6
 800617a:	2800      	cmp	r0, #0
 800617c:	dc08      	bgt.n	8006190 <__sflush_r+0xfc>
 800617e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006190:	4407      	add	r7, r0
 8006192:	eba8 0800 	sub.w	r8, r8, r0
 8006196:	e7e7      	b.n	8006168 <__sflush_r+0xd4>
 8006198:	20400001 	.word	0x20400001

0800619c <_fflush_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	690b      	ldr	r3, [r1, #16]
 80061a0:	4605      	mov	r5, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	b913      	cbnz	r3, 80061ac <_fflush_r+0x10>
 80061a6:	2500      	movs	r5, #0
 80061a8:	4628      	mov	r0, r5
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	b118      	cbz	r0, 80061b6 <_fflush_r+0x1a>
 80061ae:	6a03      	ldr	r3, [r0, #32]
 80061b0:	b90b      	cbnz	r3, 80061b6 <_fflush_r+0x1a>
 80061b2:	f7ff faa1 	bl	80056f8 <__sinit>
 80061b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f3      	beq.n	80061a6 <_fflush_r+0xa>
 80061be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061c0:	07d0      	lsls	r0, r2, #31
 80061c2:	d404      	bmi.n	80061ce <_fflush_r+0x32>
 80061c4:	0599      	lsls	r1, r3, #22
 80061c6:	d402      	bmi.n	80061ce <_fflush_r+0x32>
 80061c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ca:	f7ff fb9a 	bl	8005902 <__retarget_lock_acquire_recursive>
 80061ce:	4628      	mov	r0, r5
 80061d0:	4621      	mov	r1, r4
 80061d2:	f7ff ff5f 	bl	8006094 <__sflush_r>
 80061d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061d8:	07da      	lsls	r2, r3, #31
 80061da:	4605      	mov	r5, r0
 80061dc:	d4e4      	bmi.n	80061a8 <_fflush_r+0xc>
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	059b      	lsls	r3, r3, #22
 80061e2:	d4e1      	bmi.n	80061a8 <_fflush_r+0xc>
 80061e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061e6:	f7ff fb8d 	bl	8005904 <__retarget_lock_release_recursive>
 80061ea:	e7dd      	b.n	80061a8 <_fflush_r+0xc>

080061ec <__swbuf_r>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	460e      	mov	r6, r1
 80061f0:	4614      	mov	r4, r2
 80061f2:	4605      	mov	r5, r0
 80061f4:	b118      	cbz	r0, 80061fe <__swbuf_r+0x12>
 80061f6:	6a03      	ldr	r3, [r0, #32]
 80061f8:	b90b      	cbnz	r3, 80061fe <__swbuf_r+0x12>
 80061fa:	f7ff fa7d 	bl	80056f8 <__sinit>
 80061fe:	69a3      	ldr	r3, [r4, #24]
 8006200:	60a3      	str	r3, [r4, #8]
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	071a      	lsls	r2, r3, #28
 8006206:	d501      	bpl.n	800620c <__swbuf_r+0x20>
 8006208:	6923      	ldr	r3, [r4, #16]
 800620a:	b943      	cbnz	r3, 800621e <__swbuf_r+0x32>
 800620c:	4621      	mov	r1, r4
 800620e:	4628      	mov	r0, r5
 8006210:	f000 f82a 	bl	8006268 <__swsetup_r>
 8006214:	b118      	cbz	r0, 800621e <__swbuf_r+0x32>
 8006216:	f04f 37ff 	mov.w	r7, #4294967295
 800621a:	4638      	mov	r0, r7
 800621c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	6922      	ldr	r2, [r4, #16]
 8006222:	1a98      	subs	r0, r3, r2
 8006224:	6963      	ldr	r3, [r4, #20]
 8006226:	b2f6      	uxtb	r6, r6
 8006228:	4283      	cmp	r3, r0
 800622a:	4637      	mov	r7, r6
 800622c:	dc05      	bgt.n	800623a <__swbuf_r+0x4e>
 800622e:	4621      	mov	r1, r4
 8006230:	4628      	mov	r0, r5
 8006232:	f7ff ffb3 	bl	800619c <_fflush_r>
 8006236:	2800      	cmp	r0, #0
 8006238:	d1ed      	bne.n	8006216 <__swbuf_r+0x2a>
 800623a:	68a3      	ldr	r3, [r4, #8]
 800623c:	3b01      	subs	r3, #1
 800623e:	60a3      	str	r3, [r4, #8]
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	701e      	strb	r6, [r3, #0]
 8006248:	6962      	ldr	r2, [r4, #20]
 800624a:	1c43      	adds	r3, r0, #1
 800624c:	429a      	cmp	r2, r3
 800624e:	d004      	beq.n	800625a <__swbuf_r+0x6e>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	07db      	lsls	r3, r3, #31
 8006254:	d5e1      	bpl.n	800621a <__swbuf_r+0x2e>
 8006256:	2e0a      	cmp	r6, #10
 8006258:	d1df      	bne.n	800621a <__swbuf_r+0x2e>
 800625a:	4621      	mov	r1, r4
 800625c:	4628      	mov	r0, r5
 800625e:	f7ff ff9d 	bl	800619c <_fflush_r>
 8006262:	2800      	cmp	r0, #0
 8006264:	d0d9      	beq.n	800621a <__swbuf_r+0x2e>
 8006266:	e7d6      	b.n	8006216 <__swbuf_r+0x2a>

08006268 <__swsetup_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4b29      	ldr	r3, [pc, #164]	@ (8006310 <__swsetup_r+0xa8>)
 800626c:	4605      	mov	r5, r0
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	460c      	mov	r4, r1
 8006272:	b118      	cbz	r0, 800627c <__swsetup_r+0x14>
 8006274:	6a03      	ldr	r3, [r0, #32]
 8006276:	b90b      	cbnz	r3, 800627c <__swsetup_r+0x14>
 8006278:	f7ff fa3e 	bl	80056f8 <__sinit>
 800627c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006280:	0719      	lsls	r1, r3, #28
 8006282:	d422      	bmi.n	80062ca <__swsetup_r+0x62>
 8006284:	06da      	lsls	r2, r3, #27
 8006286:	d407      	bmi.n	8006298 <__swsetup_r+0x30>
 8006288:	2209      	movs	r2, #9
 800628a:	602a      	str	r2, [r5, #0]
 800628c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006290:	81a3      	strh	r3, [r4, #12]
 8006292:	f04f 30ff 	mov.w	r0, #4294967295
 8006296:	e033      	b.n	8006300 <__swsetup_r+0x98>
 8006298:	0758      	lsls	r0, r3, #29
 800629a:	d512      	bpl.n	80062c2 <__swsetup_r+0x5a>
 800629c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800629e:	b141      	cbz	r1, 80062b2 <__swsetup_r+0x4a>
 80062a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062a4:	4299      	cmp	r1, r3
 80062a6:	d002      	beq.n	80062ae <__swsetup_r+0x46>
 80062a8:	4628      	mov	r0, r5
 80062aa:	f7ff fb2d 	bl	8005908 <_free_r>
 80062ae:	2300      	movs	r3, #0
 80062b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	2300      	movs	r3, #0
 80062bc:	6063      	str	r3, [r4, #4]
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f043 0308 	orr.w	r3, r3, #8
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	b94b      	cbnz	r3, 80062e2 <__swsetup_r+0x7a>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062d8:	d003      	beq.n	80062e2 <__swsetup_r+0x7a>
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 f84f 	bl	8006380 <__smakebuf_r>
 80062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e6:	f013 0201 	ands.w	r2, r3, #1
 80062ea:	d00a      	beq.n	8006302 <__swsetup_r+0x9a>
 80062ec:	2200      	movs	r2, #0
 80062ee:	60a2      	str	r2, [r4, #8]
 80062f0:	6962      	ldr	r2, [r4, #20]
 80062f2:	4252      	negs	r2, r2
 80062f4:	61a2      	str	r2, [r4, #24]
 80062f6:	6922      	ldr	r2, [r4, #16]
 80062f8:	b942      	cbnz	r2, 800630c <__swsetup_r+0xa4>
 80062fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062fe:	d1c5      	bne.n	800628c <__swsetup_r+0x24>
 8006300:	bd38      	pop	{r3, r4, r5, pc}
 8006302:	0799      	lsls	r1, r3, #30
 8006304:	bf58      	it	pl
 8006306:	6962      	ldrpl	r2, [r4, #20]
 8006308:	60a2      	str	r2, [r4, #8]
 800630a:	e7f4      	b.n	80062f6 <__swsetup_r+0x8e>
 800630c:	2000      	movs	r0, #0
 800630e:	e7f7      	b.n	8006300 <__swsetup_r+0x98>
 8006310:	200000ec 	.word	0x200000ec

08006314 <_sbrk_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4d06      	ldr	r5, [pc, #24]	@ (8006330 <_sbrk_r+0x1c>)
 8006318:	2300      	movs	r3, #0
 800631a:	4604      	mov	r4, r0
 800631c:	4608      	mov	r0, r1
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	f7fa fc86 	bl	8000c30 <_sbrk>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_sbrk_r+0x1a>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_sbrk_r+0x1a>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	200012a0 	.word	0x200012a0

08006334 <__swhatbuf_r>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	460c      	mov	r4, r1
 8006338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633c:	2900      	cmp	r1, #0
 800633e:	b096      	sub	sp, #88	@ 0x58
 8006340:	4615      	mov	r5, r2
 8006342:	461e      	mov	r6, r3
 8006344:	da0d      	bge.n	8006362 <__swhatbuf_r+0x2e>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800634c:	f04f 0100 	mov.w	r1, #0
 8006350:	bf14      	ite	ne
 8006352:	2340      	movne	r3, #64	@ 0x40
 8006354:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006358:	2000      	movs	r0, #0
 800635a:	6031      	str	r1, [r6, #0]
 800635c:	602b      	str	r3, [r5, #0]
 800635e:	b016      	add	sp, #88	@ 0x58
 8006360:	bd70      	pop	{r4, r5, r6, pc}
 8006362:	466a      	mov	r2, sp
 8006364:	f000 f848 	bl	80063f8 <_fstat_r>
 8006368:	2800      	cmp	r0, #0
 800636a:	dbec      	blt.n	8006346 <__swhatbuf_r+0x12>
 800636c:	9901      	ldr	r1, [sp, #4]
 800636e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006372:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006376:	4259      	negs	r1, r3
 8006378:	4159      	adcs	r1, r3
 800637a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800637e:	e7eb      	b.n	8006358 <__swhatbuf_r+0x24>

08006380 <__smakebuf_r>:
 8006380:	898b      	ldrh	r3, [r1, #12]
 8006382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006384:	079d      	lsls	r5, r3, #30
 8006386:	4606      	mov	r6, r0
 8006388:	460c      	mov	r4, r1
 800638a:	d507      	bpl.n	800639c <__smakebuf_r+0x1c>
 800638c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	2301      	movs	r3, #1
 8006396:	6163      	str	r3, [r4, #20]
 8006398:	b003      	add	sp, #12
 800639a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800639c:	ab01      	add	r3, sp, #4
 800639e:	466a      	mov	r2, sp
 80063a0:	f7ff ffc8 	bl	8006334 <__swhatbuf_r>
 80063a4:	9f00      	ldr	r7, [sp, #0]
 80063a6:	4605      	mov	r5, r0
 80063a8:	4639      	mov	r1, r7
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff fb18 	bl	80059e0 <_malloc_r>
 80063b0:	b948      	cbnz	r0, 80063c6 <__smakebuf_r+0x46>
 80063b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b6:	059a      	lsls	r2, r3, #22
 80063b8:	d4ee      	bmi.n	8006398 <__smakebuf_r+0x18>
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	f043 0302 	orr.w	r3, r3, #2
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	e7e2      	b.n	800638c <__smakebuf_r+0xc>
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	6020      	str	r0, [r4, #0]
 80063ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	9b01      	ldr	r3, [sp, #4]
 80063d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063d6:	b15b      	cbz	r3, 80063f0 <__smakebuf_r+0x70>
 80063d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 f81d 	bl	800641c <_isatty_r>
 80063e2:	b128      	cbz	r0, 80063f0 <__smakebuf_r+0x70>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	89a3      	ldrh	r3, [r4, #12]
 80063f2:	431d      	orrs	r5, r3
 80063f4:	81a5      	strh	r5, [r4, #12]
 80063f6:	e7cf      	b.n	8006398 <__smakebuf_r+0x18>

080063f8 <_fstat_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d07      	ldr	r5, [pc, #28]	@ (8006418 <_fstat_r+0x20>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	f7fa fc0a 	bl	8000c1e <_fstat>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	d102      	bne.n	8006414 <_fstat_r+0x1c>
 800640e:	682b      	ldr	r3, [r5, #0]
 8006410:	b103      	cbz	r3, 8006414 <_fstat_r+0x1c>
 8006412:	6023      	str	r3, [r4, #0]
 8006414:	bd38      	pop	{r3, r4, r5, pc}
 8006416:	bf00      	nop
 8006418:	200012a0 	.word	0x200012a0

0800641c <_isatty_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d06      	ldr	r5, [pc, #24]	@ (8006438 <_isatty_r+0x1c>)
 8006420:	2300      	movs	r3, #0
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	f7fa fbfe 	bl	8000c28 <_isatty>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_isatty_r+0x1a>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_isatty_r+0x1a>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	200012a0 	.word	0x200012a0

0800643c <_init>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr

08006448 <_fini>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	bf00      	nop
 800644c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644e:	bc08      	pop	{r3}
 8006450:	469e      	mov	lr, r3
 8006452:	4770      	bx	lr
